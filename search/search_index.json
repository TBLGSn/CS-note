{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"leetcode","title":"Home"},{"location":"index.html#leetcode","text":"","title":"leetcode"},{"location":"100.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e24\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 p \u548c q \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u8fd9\u4e24\u68f5\u6811\u662f\u5426\u76f8\u540c\u3002 \u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684 \u89e3\u7b54: //\u6df1\u5ea6\u4f18\u5148 class Solution { public: bool isSameTree(TreeNode* p, TreeNode* q) { if (p == nullptr && q == nullptr) { return true; } else if (p == nullptr || q == nullptr) { return false; } else if (p->val != q->val) { return false; } else { return isSameTree(p->left, q->left) && isSameTree(p->right, q->right); } } };","title":100},{"location":"100.html#_1","text":"\u7ed9\u4f60\u4e24\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 p \u548c q \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u8fd9\u4e24\u68f5\u6811\u662f\u5426\u76f8\u540c\u3002 \u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684","title":"\u9898\u76ee:"},{"location":"100.html#_2","text":"//\u6df1\u5ea6\u4f18\u5148 class Solution { public: bool isSameTree(TreeNode* p, TreeNode* q) { if (p == nullptr && q == nullptr) { return true; } else if (p == nullptr || q == nullptr) { return false; } else if (p->val != q->val) { return false; } else { return isSameTree(p->left, q->left) && isSameTree(p->right, q->right); } } };","title":"\u89e3\u7b54:"},{"location":"101.html","text":"\u9898\u76ee: \u793a\u4f8b: \u601d\u8def \u6df1\u5ea6\u4f18\u5148 \u8fed\u4ee3\u7248\u672c \u89e3\u7b54: //\u9012\u5f52\u7248\u672c class Solution { public: bool check(TreeNode* p, TreeNode* q){ if(!p && !q) return true; if(!p || !q) return false; //\u968f\u540e pp \u53f3\u79fb\u65f6\uff0cqq \u5de6\u79fb\uff0cpp \u5de6\u79fb\u65f6\uff0cqq \u53f3\u79fb return p->val == q->val && check(p->left,q->right)&&check(p->right,q->left); } bool isSymmetric(TreeNode* root) { return check(root,root); } }; /*\u8fed\u4ee3\u7248\u672c \u521d\u59cb\u5316\u65f6\u6211\u4eec\u628a\u6839\u8282\u70b9\u5165\u961f\u4e24\u6b21\u3002\u6bcf\u6b21\u63d0\u53d6\u4e24\u4e2a\u7ed3\u70b9\u5e76\u6bd4\u8f83\u5b83\u4eec\u7684\u503c\uff08\u961f\u5217\u4e2d\u6bcf\u4e24\u4e2a\u8fde\u7eed\u7684\u7ed3\u70b9\u5e94\u8be5\u662f\u76f8\u7b49\u7684\uff0c\u800c\u4e14\u5b83\u4eec\u7684\u5b50\u6811\u4e92\u4e3a\u955c\u50cf\uff09\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u63d2\u5165\u961f\u5217\u4e2d\u3002\u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u6216\u8005\u6211\u4eec\u68c0\u6d4b\u5230\u6811\u4e0d\u5bf9\u79f0\uff08\u5373\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u8fde\u7eed\u7ed3\u70b9\uff09\u65f6\uff0c\u8be5\u7b97\u6cd5\u7ed3\u675f */ class Solution { public: bool check(TreeNode* u, TreeNode* v){ queue<TreeNode*> q; q.push(u); q.push(v); while(!q.empty()) { u = q.front();q.pop(); v = q.front();q.pop(); if(!u && !v) continue; if ((!u || !v) || (u->val != v->val)) return false; q.push(u->left); q.push(v->right); q.push(u->right); q.push(v->left); } return true; } bool isSymmetric(TreeNode* root) { return check(root,root); } }; \u603b\u7ed3 - \u5f15\u5165\u4e00\u4e2a\u961f\u5217\uff0c\u8fd9\u662f\u628a\u9012\u5f52\u7a0b\u5e8f\u6539\u5199\u6210\u8fed\u4ee3\u7a0b\u5e8f\u7684\u5e38\u7528\u65b9\u6cd5\u3002","title":101},{"location":"101.html#_1","text":"","title":"\u9898\u76ee:"},{"location":"101.html#_2","text":"","title":"\u793a\u4f8b:"},{"location":"101.html#_3","text":"\u6df1\u5ea6\u4f18\u5148 \u8fed\u4ee3\u7248\u672c","title":"\u601d\u8def"},{"location":"101.html#_4","text":"//\u9012\u5f52\u7248\u672c class Solution { public: bool check(TreeNode* p, TreeNode* q){ if(!p && !q) return true; if(!p || !q) return false; //\u968f\u540e pp \u53f3\u79fb\u65f6\uff0cqq \u5de6\u79fb\uff0cpp \u5de6\u79fb\u65f6\uff0cqq \u53f3\u79fb return p->val == q->val && check(p->left,q->right)&&check(p->right,q->left); } bool isSymmetric(TreeNode* root) { return check(root,root); } }; /*\u8fed\u4ee3\u7248\u672c \u521d\u59cb\u5316\u65f6\u6211\u4eec\u628a\u6839\u8282\u70b9\u5165\u961f\u4e24\u6b21\u3002\u6bcf\u6b21\u63d0\u53d6\u4e24\u4e2a\u7ed3\u70b9\u5e76\u6bd4\u8f83\u5b83\u4eec\u7684\u503c\uff08\u961f\u5217\u4e2d\u6bcf\u4e24\u4e2a\u8fde\u7eed\u7684\u7ed3\u70b9\u5e94\u8be5\u662f\u76f8\u7b49\u7684\uff0c\u800c\u4e14\u5b83\u4eec\u7684\u5b50\u6811\u4e92\u4e3a\u955c\u50cf\uff09\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u63d2\u5165\u961f\u5217\u4e2d\u3002\u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u6216\u8005\u6211\u4eec\u68c0\u6d4b\u5230\u6811\u4e0d\u5bf9\u79f0\uff08\u5373\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u8fde\u7eed\u7ed3\u70b9\uff09\u65f6\uff0c\u8be5\u7b97\u6cd5\u7ed3\u675f */ class Solution { public: bool check(TreeNode* u, TreeNode* v){ queue<TreeNode*> q; q.push(u); q.push(v); while(!q.empty()) { u = q.front();q.pop(); v = q.front();q.pop(); if(!u && !v) continue; if ((!u || !v) || (u->val != v->val)) return false; q.push(u->left); q.push(v->right); q.push(u->right); q.push(v->left); } return true; } bool isSymmetric(TreeNode* root) { return check(root,root); } };","title":"\u89e3\u7b54:"},{"location":"101.html#_5","text":"- \u5f15\u5165\u4e00\u4e2a\u961f\u5217\uff0c\u8fd9\u662f\u628a\u9012\u5f52\u7a0b\u5e8f\u6539\u5199\u6210\u8fed\u4ee3\u7a0b\u5e8f\u7684\u5e38\u7528\u65b9\u6cd5\u3002","title":"\u603b\u7ed3"},{"location":"1010.html","text":"\u9898\u76ee: \u5728\u6b4c\u66f2\u5217\u8868\u4e2d\uff0c\u7b2c i \u9996\u6b4c\u66f2\u7684\u6301\u7eed\u65f6\u95f4\u4e3a time[i] \u79d2\u3002 \u8fd4\u56de\u5176\u603b\u6301\u7eed\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u53ef\u88ab 60 \u6574\u9664\u7684\u6b4c\u66f2\u5bf9\u7684\u6570\u91cf\u3002 \u5f62\u5f0f\u4e0a\uff0c\u6211\u4eec\u5e0c\u671b\u7d22\u5f15\u7684\u6570\u5b57 i \u548c j \u6ee1\u8db3 i < j \u4e14\u6709 (time[i] + time[j]) % 60 == 0\u3002 \u793a\u4f8b1: >\u8f93\u5165\uff1a[30,20,150,100,40] >\u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u8fd9\u4e09\u5bf9\u7684\u603b\u6301\u7eed\u65f6\u95f4\u53ef\u88ab 60 \u6574\u6570\uff1a (time[0] = 30, time[2] = 150): \u603b\u6301\u7eed\u65f6\u95f4 180 (time[1] = 20, time[3] = 100): \u603b\u6301\u7eed\u65f6\u95f4 120 (time[1] = 20, time[4] = 40): \u603b\u6301\u7eed\u65f6\u95f4 60 \u793a\u4f8b2 >\u8f93\u5165\uff1a[60,60,60] >\u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u6240\u6709\u4e09\u5bf9\u7684\u603b\u6301\u7eed\u65f6\u95f4\u90fd\u662f 120\uff0c\u53ef\u4ee5\u88ab 60 \u6574\u6570\u3002 \u63d0\u793a >1 <= time.length <= 60000 >1 <= time[i] <= 500 \u601d\u8def: 1. \u66b4\u529b(\u8d85\u65f6) 2. hash - \u5148\u5c06time[i] % 60 \u6620\u5c04\u5230hash\u8868\u4e2d - \u5faa\u73aftime\u65f6\uff0c\u5feb\u901f\u5f97\u5230hash\u8868\u4e2d\u50a8\u5b58\u7684\u4fe1\u606f - \u5176\u5b9e\u8d28\u5229\u7528\u4e86hash\u7684\u8bb0\u6570\u529f\u80fd 3. \u65b9\u68482\u7684\u4f18\u5316:\u80fd\u591f\u4f18\u5316\u4e3a\u53ea\u4f7f\u7528\u4e00\u6b21\u5faa\u73af\u5373\u53ef\uff08\u5728\u8fdb\u884c\u4f59\u6570\u7edf\u8ba1\u7684\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u914d\u5bf9\uff09 \u89e3\u7b54: int numPairsDivisibleBy60(int* time, int timeSize){ int hash[60] ={0}; int count =0; for(int i=0; i<timeSize ; i++){ time[i] %= 60; hash[time[i]]++; } for(int i=0;i<timeSize;i++){ hash[time[i]] --; if(time[i] == 0){ count += hash[time[i]]; }else{ count += hash[60-time[i]]; } } return count; } int numPairsDivisibleBy60(int* time, int timeSize){ int hash[60] ={0}; int count =0; for(int i=0; i<timeSize ; i++){ int mod = time[i] % 60; int remain = mod == 0 ? 0 : 60 - mod; count += hash[remain]; hash[mod]++; } return count; }","title":1010},{"location":"1010.html#_1","text":"\u5728\u6b4c\u66f2\u5217\u8868\u4e2d\uff0c\u7b2c i \u9996\u6b4c\u66f2\u7684\u6301\u7eed\u65f6\u95f4\u4e3a time[i] \u79d2\u3002 \u8fd4\u56de\u5176\u603b\u6301\u7eed\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u53ef\u88ab 60 \u6574\u9664\u7684\u6b4c\u66f2\u5bf9\u7684\u6570\u91cf\u3002 \u5f62\u5f0f\u4e0a\uff0c\u6211\u4eec\u5e0c\u671b\u7d22\u5f15\u7684\u6570\u5b57 i \u548c j \u6ee1\u8db3 i < j \u4e14\u6709 (time[i] + time[j]) % 60 == 0\u3002","title":"\u9898\u76ee:"},{"location":"1010.html#1","text":">\u8f93\u5165\uff1a[30,20,150,100,40] >\u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u8fd9\u4e09\u5bf9\u7684\u603b\u6301\u7eed\u65f6\u95f4\u53ef\u88ab 60 \u6574\u6570\uff1a (time[0] = 30, time[2] = 150): \u603b\u6301\u7eed\u65f6\u95f4 180 (time[1] = 20, time[3] = 100): \u603b\u6301\u7eed\u65f6\u95f4 120 (time[1] = 20, time[4] = 40): \u603b\u6301\u7eed\u65f6\u95f4 60","title":"\u793a\u4f8b1:"},{"location":"1010.html#2","text":">\u8f93\u5165\uff1a[60,60,60] >\u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u6240\u6709\u4e09\u5bf9\u7684\u603b\u6301\u7eed\u65f6\u95f4\u90fd\u662f 120\uff0c\u53ef\u4ee5\u88ab 60 \u6574\u6570\u3002","title":"\u793a\u4f8b2"},{"location":"1010.html#_2","text":">1 <= time.length <= 60000 >1 <= time[i] <= 500","title":"\u63d0\u793a"},{"location":"1010.html#_3","text":"1. \u66b4\u529b(\u8d85\u65f6) 2. hash - \u5148\u5c06time[i] % 60 \u6620\u5c04\u5230hash\u8868\u4e2d - \u5faa\u73aftime\u65f6\uff0c\u5feb\u901f\u5f97\u5230hash\u8868\u4e2d\u50a8\u5b58\u7684\u4fe1\u606f - \u5176\u5b9e\u8d28\u5229\u7528\u4e86hash\u7684\u8bb0\u6570\u529f\u80fd 3. \u65b9\u68482\u7684\u4f18\u5316:\u80fd\u591f\u4f18\u5316\u4e3a\u53ea\u4f7f\u7528\u4e00\u6b21\u5faa\u73af\u5373\u53ef\uff08\u5728\u8fdb\u884c\u4f59\u6570\u7edf\u8ba1\u7684\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u914d\u5bf9\uff09","title":"\u601d\u8def:"},{"location":"1010.html#_4","text":"int numPairsDivisibleBy60(int* time, int timeSize){ int hash[60] ={0}; int count =0; for(int i=0; i<timeSize ; i++){ time[i] %= 60; hash[time[i]]++; } for(int i=0;i<timeSize;i++){ hash[time[i]] --; if(time[i] == 0){ count += hash[time[i]]; }else{ count += hash[60-time[i]]; } } return count; } int numPairsDivisibleBy60(int* time, int timeSize){ int hash[60] ={0}; int count =0; for(int i=0; i<timeSize ; i++){ int mod = time[i] % 60; int remain = mod == 0 ? 0 : 60 - mod; count += hash[remain]; hash[mod]++; } return count; }","title":"\u89e3\u7b54:"},{"location":"1011.html","text":"\u9898\u76ee: \u4f20\u9001\u5e26\u4e0a\u7684\u5305\u88f9\u5fc5\u987b\u5728 D \u5929\u5185\u4ece\u4e00\u4e2a\u6e2f\u53e3\u8fd0\u9001\u5230\u53e6\u4e00\u4e2a\u6e2f\u53e3\u3002 \u4f20\u9001\u5e26\u4e0a\u7684\u7b2c i \u4e2a\u5305\u88f9\u7684\u91cd\u91cf\u4e3a weights[i]\u3002\u6bcf\u4e00\u5929\uff0c\u6211\u4eec\u90fd\u4f1a\u6309\u7ed9\u51fa\u91cd\u91cf\u7684\u987a\u5e8f\u5f80\u4f20\u9001\u5e26\u4e0a\u88c5\u8f7d\u5305\u88f9\u3002\u6211\u4eec\u88c5\u8f7d\u7684\u91cd\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u8239\u7684\u6700\u5927\u8fd0\u8f7d\u91cd\u91cf\u3002 \u8fd4\u56de\u80fd\u5728 D \u5929\u5185\u5c06\u4f20\u9001\u5e26\u4e0a\u7684\u6240\u6709\u5305\u88f9\u9001\u8fbe\u7684\u8239\u7684\u6700\u4f4e\u8fd0\u8f7d\u80fd\u529b\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1aweights = [1,2,3,4,5,6,7,8,9,10], D = 5 >\u8f93\u51fa\uff1a15 >\u89e3\u91ca\uff1a \u8239\u8236\u6700\u4f4e\u8f7d\u91cd 15 \u5c31\u80fd\u591f\u5728 5 \u5929\u5185\u9001\u8fbe\u6240\u6709\u5305\u88f9\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u7b2c 1 \u5929\uff1a1, 2, 3, 4, 5 \u7b2c 2 \u5929\uff1a6, 7 \u7b2c 3 \u5929\uff1a8 \u7b2c 4 \u5929\uff1a9 \u7b2c 5 \u5929\uff1a10 \u601d\u8def \u7c7b\u4f3c 875.md ,\u67e5\u627e\u6700\u5c0f\u7684\u80fd\u591f\u5b8c\u6210\u4efb\u52a1\u7684\u503c \u4ece1 \u5230 \u65e0\u7a77 \u8fdb\u884c \u5c1d\u8bd5 \u6298\u534a\u67e5\u627e\u8fdb\u884c\u5c1d\u8bd5 \u89e3\u7b54: class Solution { public: bool helper(const vector<int>& nums, int k, int D){ int days = 1; for(int i = 0,sum = 0; i < nums.size(); ++i ){ if(nums[i] > k) return false; //\u8d27\u7269\u91cd\u91cf\u91cd\u4e8e\u6700\u5927\u627f\u91cd if(sum + nums[i] <= k){ sum += nums[i]; } else { sum = nums[i]; days ++; } } return days <= D; } int shipWithinDays(vector<int>& nums, int days) { int lo = 0; int hi = accumulate(nums.begin(), nums.end(), 0) ; while( lo < hi) { int mid = (lo + hi) >> 1; bool flag = helper(nums, mid, days); if(flag){ hi = mid; } else { lo = mid + 1 ; } } return lo; } }; \u6807\u51c6\u89e3\u7b54 // \u67e5\u627e\u8303\u56f4\u8fdb\u4e00\u6b65\u7f29\u5c0f class Solution { public: int shipWithinDays(vector<int>& nums, int days) { // \u5c0f\u4e8e\u6700\u5927\u5143\u7d20\u7684\u627f\u91cd\u4e0d\u53ef\u80fd\u7b26\u5408\u6761\u4ef6 int lo = *max_element(nums.begin(), nums.end()); int hi = accumulate(nums.begin(), nums.end(), 0) ; while( lo < hi) { int mid = (lo + hi) >> 1; int m = 1; int cur_sum = 0; for(int wight: nums) { if(cur_sum + wight > mid){ m ++; cur_sum = 0; } cur_sum += wight; } if(m <= days){ hi = mid; } else { lo = mid + 1 ; } } return lo; } }; \u603b\u7ed3 - \u4ec0\u4e48\u65f6\u5019\u4f7f\u7528 lo<= hi\uff0c\u4ec0\u4e48\u65f6\u5019\u7528 lo < hi - lo = mid ? lo= mid + 1 - hi = mid ? hi = mid - 1","title":"1011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b"},{"location":"1011.html#_1","text":"\u4f20\u9001\u5e26\u4e0a\u7684\u5305\u88f9\u5fc5\u987b\u5728 D \u5929\u5185\u4ece\u4e00\u4e2a\u6e2f\u53e3\u8fd0\u9001\u5230\u53e6\u4e00\u4e2a\u6e2f\u53e3\u3002 \u4f20\u9001\u5e26\u4e0a\u7684\u7b2c i \u4e2a\u5305\u88f9\u7684\u91cd\u91cf\u4e3a weights[i]\u3002\u6bcf\u4e00\u5929\uff0c\u6211\u4eec\u90fd\u4f1a\u6309\u7ed9\u51fa\u91cd\u91cf\u7684\u987a\u5e8f\u5f80\u4f20\u9001\u5e26\u4e0a\u88c5\u8f7d\u5305\u88f9\u3002\u6211\u4eec\u88c5\u8f7d\u7684\u91cd\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u8239\u7684\u6700\u5927\u8fd0\u8f7d\u91cd\u91cf\u3002 \u8fd4\u56de\u80fd\u5728 D \u5929\u5185\u5c06\u4f20\u9001\u5e26\u4e0a\u7684\u6240\u6709\u5305\u88f9\u9001\u8fbe\u7684\u8239\u7684\u6700\u4f4e\u8fd0\u8f7d\u80fd\u529b\u3002","title":"\u9898\u76ee:"},{"location":"1011.html#_2","text":">\u8f93\u5165\uff1aweights = [1,2,3,4,5,6,7,8,9,10], D = 5 >\u8f93\u51fa\uff1a15 >\u89e3\u91ca\uff1a \u8239\u8236\u6700\u4f4e\u8f7d\u91cd 15 \u5c31\u80fd\u591f\u5728 5 \u5929\u5185\u9001\u8fbe\u6240\u6709\u5305\u88f9\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u7b2c 1 \u5929\uff1a1, 2, 3, 4, 5 \u7b2c 2 \u5929\uff1a6, 7 \u7b2c 3 \u5929\uff1a8 \u7b2c 4 \u5929\uff1a9 \u7b2c 5 \u5929\uff1a10","title":"\u793a\u4f8b:"},{"location":"1011.html#_3","text":"\u7c7b\u4f3c 875.md ,\u67e5\u627e\u6700\u5c0f\u7684\u80fd\u591f\u5b8c\u6210\u4efb\u52a1\u7684\u503c \u4ece1 \u5230 \u65e0\u7a77 \u8fdb\u884c \u5c1d\u8bd5 \u6298\u534a\u67e5\u627e\u8fdb\u884c\u5c1d\u8bd5","title":"\u601d\u8def"},{"location":"1011.html#_4","text":"class Solution { public: bool helper(const vector<int>& nums, int k, int D){ int days = 1; for(int i = 0,sum = 0; i < nums.size(); ++i ){ if(nums[i] > k) return false; //\u8d27\u7269\u91cd\u91cf\u91cd\u4e8e\u6700\u5927\u627f\u91cd if(sum + nums[i] <= k){ sum += nums[i]; } else { sum = nums[i]; days ++; } } return days <= D; } int shipWithinDays(vector<int>& nums, int days) { int lo = 0; int hi = accumulate(nums.begin(), nums.end(), 0) ; while( lo < hi) { int mid = (lo + hi) >> 1; bool flag = helper(nums, mid, days); if(flag){ hi = mid; } else { lo = mid + 1 ; } } return lo; } };","title":"\u89e3\u7b54:"},{"location":"1011.html#_5","text":"// \u67e5\u627e\u8303\u56f4\u8fdb\u4e00\u6b65\u7f29\u5c0f class Solution { public: int shipWithinDays(vector<int>& nums, int days) { // \u5c0f\u4e8e\u6700\u5927\u5143\u7d20\u7684\u627f\u91cd\u4e0d\u53ef\u80fd\u7b26\u5408\u6761\u4ef6 int lo = *max_element(nums.begin(), nums.end()); int hi = accumulate(nums.begin(), nums.end(), 0) ; while( lo < hi) { int mid = (lo + hi) >> 1; int m = 1; int cur_sum = 0; for(int wight: nums) { if(cur_sum + wight > mid){ m ++; cur_sum = 0; } cur_sum += wight; } if(m <= days){ hi = mid; } else { lo = mid + 1 ; } } return lo; } };","title":"\u6807\u51c6\u89e3\u7b54"},{"location":"1011.html#_6","text":"- \u4ec0\u4e48\u65f6\u5019\u4f7f\u7528 lo<= hi\uff0c\u4ec0\u4e48\u65f6\u5019\u7528 lo < hi - lo = mid ? lo= mid + 1 - hi = mid ? hi = mid - 1","title":"\u603b\u7ed3"},{"location":"1019.html","text":"\u9898\u76ee: \u627e\u51fa\u540e\u7eed\u8282\u70b9\u4e2d\u6bd4\u5f53\u524d\u8282\u70b9\u5927\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u5982\u679c\u6ca1\u6709\u5219\u4e3a0 \u793a\u4f8b: >\u8f93\u5165\uff1a[1,7,5,1,9,2,5,1] >\u8f93\u51fa\uff1a[7,9,9,9,0,5,0,0] \u601d\u8def \u5355\u8c03\u6808 \u2014\u2014 \u6808\u4e2d\u5143\u7d20\u662f\u6709\u5e8f\u7684 \u5148\u9006\u5e8f\uff0c\u7136\u540e\u7528\u6808 \u89e3\u7b54: class Solution { public: vector<int> nextLargerNodes(ListNode* head) { vector<int> temp; stack<int> st;//\u5b58\u50a8\u7740a[i]\u4e4b\u540e\u7684\u5e8f\u5217\u4e2d\u6bd4a[i]\u5927\u7684\u5143\u7d20 //\u904d\u5386\u94fe\u8868,\u5c06\u94fe\u8868\u7684\u503c\u50a8\u5b58\u5728temp\u4e2d\u53bb for(ListNode* p = head; p != NULL; p = p->next) { temp.push_back(p->val); } vector<int> res(temp.size()); //\u5012\u5e8f\u904d\u5386temp vector for(int i = temp.size()-1; i >= 0 ;--i) { while(!st.empty() && st.top()<=temp[i]) st.pop(); res[i] = st.empty() ? 0 : st.top();//\u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u586b\u5165\u6808\u9876 st.push(temp[i]); //\u538b\u5982a[i],\u4fdd\u6301\u8fed\u4ee3\u4e0d\u53d8\u5f62 } //\u8fd4\u56de return res; } }; \u603b\u7ed3 \u53e6\u4e00\u79cd\u89e3\u6cd5\uff0c\u6808\u4e2d\u5b58\u50a8\u7684\u662f\u4e0b\u6807\uff0c\u800c\u4e0d\u662f\u5143\u7d20\u7684\u503c \u6ce8\u610f:for \u5faa\u73afi \u7684\u7c7b\u578b\u4e0d\u80fd\u6539\u4e3asize_t","title":1019},{"location":"1019.html#_1","text":"\u627e\u51fa\u540e\u7eed\u8282\u70b9\u4e2d\u6bd4\u5f53\u524d\u8282\u70b9\u5927\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u5982\u679c\u6ca1\u6709\u5219\u4e3a0","title":"\u9898\u76ee:"},{"location":"1019.html#_2","text":">\u8f93\u5165\uff1a[1,7,5,1,9,2,5,1] >\u8f93\u51fa\uff1a[7,9,9,9,0,5,0,0]","title":"\u793a\u4f8b:"},{"location":"1019.html#_3","text":"\u5355\u8c03\u6808 \u2014\u2014 \u6808\u4e2d\u5143\u7d20\u662f\u6709\u5e8f\u7684 \u5148\u9006\u5e8f\uff0c\u7136\u540e\u7528\u6808","title":"\u601d\u8def"},{"location":"1019.html#_4","text":"class Solution { public: vector<int> nextLargerNodes(ListNode* head) { vector<int> temp; stack<int> st;//\u5b58\u50a8\u7740a[i]\u4e4b\u540e\u7684\u5e8f\u5217\u4e2d\u6bd4a[i]\u5927\u7684\u5143\u7d20 //\u904d\u5386\u94fe\u8868,\u5c06\u94fe\u8868\u7684\u503c\u50a8\u5b58\u5728temp\u4e2d\u53bb for(ListNode* p = head; p != NULL; p = p->next) { temp.push_back(p->val); } vector<int> res(temp.size()); //\u5012\u5e8f\u904d\u5386temp vector for(int i = temp.size()-1; i >= 0 ;--i) { while(!st.empty() && st.top()<=temp[i]) st.pop(); res[i] = st.empty() ? 0 : st.top();//\u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u586b\u5165\u6808\u9876 st.push(temp[i]); //\u538b\u5982a[i],\u4fdd\u6301\u8fed\u4ee3\u4e0d\u53d8\u5f62 } //\u8fd4\u56de return res; } };","title":"\u89e3\u7b54:"},{"location":"1019.html#_5","text":"\u53e6\u4e00\u79cd\u89e3\u6cd5\uff0c\u6808\u4e2d\u5b58\u50a8\u7684\u662f\u4e0b\u6807\uff0c\u800c\u4e0d\u662f\u5143\u7d20\u7684\u503c \u6ce8\u610f:for \u5faa\u73afi \u7684\u7c7b\u578b\u4e0d\u80fd\u6539\u4e3asize_t","title":"\u603b\u7ed3"},{"location":"1053.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4 A\uff08\u5176\u4e2d\u7684\u5143\u7d20\u4e0d\u4e00\u5b9a\u5b8c\u5168\u4e0d\u540c\uff09\uff0c\u8bf7\u4f60\u8fd4\u56de\u53ef\u5728 \u4e00\u6b21\u4ea4\u6362\uff08\u4ea4\u6362\u4e24\u6570\u5b57 A[i] \u548c A[j] \u7684\u4f4d\u7f6e\uff09\u540e\u5f97\u5230\u7684\u3001\u6309\u5b57\u5178\u5e8f\u6392\u5217\u5c0f\u4e8e A \u7684\u6700\u5927\u53ef\u80fd\u6392\u5217\u3002 \u5982\u679c\u65e0\u6cd5\u8fd9\u4e48\u64cd\u4f5c\uff0c\u5c31\u8bf7\u8fd4\u56de\u539f\u6570\u7ec4\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1aarr = [3,2,1] >\u8f93\u51fa\uff1a[3,1,2] >\u89e3\u91ca\uff1a\u4ea4\u6362 2 \u548c 1 \u601d\u8def \u6807\u51c6\u7b54\u6848 class Solution { public int[] prevPermOpt1(vector<int> nums) { int len = nums.size(); int curMax = -1; int index = -1; boolean hasResult = false; for (int i = len - 2; i >= 0; i--) { if (A[i+1] < A[i]) { // \u6b64\u5904\u9006\u5e8f\uff0c\u9700\u8981\u79fb\u52a8A[i] for (int j = i + 1; j < len; j++) { // \u5bfb\u627e\u4e0e A[i] \u4ea4\u6362\u7684\u4f4d\u7f6e if (A[i] > A[j]) { // \u5fc5\u987b\u6ee1\u8db3 A[i] > A[j]\uff0c\u5426\u5219\u4e0d\u80fd\u6ee1\u8db3\u4ea4\u6362\u540e\u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e\u539f\u59cb\u5b57\u5178\u5e8f hasResult = true; if (A[j] > curMax) { curMax = A[j]; index = j; } } } if (hasResult) { int tmp = A[i]; A[i] = A[index]; A[index] = tmp; return A; } } } return A; } } \u603b\u7ed3","title":"\u9898\u76ee:"},{"location":"1053.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4 A\uff08\u5176\u4e2d\u7684\u5143\u7d20\u4e0d\u4e00\u5b9a\u5b8c\u5168\u4e0d\u540c\uff09\uff0c\u8bf7\u4f60\u8fd4\u56de\u53ef\u5728 \u4e00\u6b21\u4ea4\u6362\uff08\u4ea4\u6362\u4e24\u6570\u5b57 A[i] \u548c A[j] \u7684\u4f4d\u7f6e\uff09\u540e\u5f97\u5230\u7684\u3001\u6309\u5b57\u5178\u5e8f\u6392\u5217\u5c0f\u4e8e A \u7684\u6700\u5927\u53ef\u80fd\u6392\u5217\u3002 \u5982\u679c\u65e0\u6cd5\u8fd9\u4e48\u64cd\u4f5c\uff0c\u5c31\u8bf7\u8fd4\u56de\u539f\u6570\u7ec4\u3002","title":"\u9898\u76ee:"},{"location":"1053.html#_2","text":">\u8f93\u5165\uff1aarr = [3,2,1] >\u8f93\u51fa\uff1a[3,1,2] >\u89e3\u91ca\uff1a\u4ea4\u6362 2 \u548c 1","title":"\u793a\u4f8b:"},{"location":"1053.html#_3","text":"","title":"\u601d\u8def"},{"location":"1053.html#_4","text":"class Solution { public int[] prevPermOpt1(vector<int> nums) { int len = nums.size(); int curMax = -1; int index = -1; boolean hasResult = false; for (int i = len - 2; i >= 0; i--) { if (A[i+1] < A[i]) { // \u6b64\u5904\u9006\u5e8f\uff0c\u9700\u8981\u79fb\u52a8A[i] for (int j = i + 1; j < len; j++) { // \u5bfb\u627e\u4e0e A[i] \u4ea4\u6362\u7684\u4f4d\u7f6e if (A[i] > A[j]) { // \u5fc5\u987b\u6ee1\u8db3 A[i] > A[j]\uff0c\u5426\u5219\u4e0d\u80fd\u6ee1\u8db3\u4ea4\u6362\u540e\u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e\u539f\u59cb\u5b57\u5178\u5e8f hasResult = true; if (A[j] > curMax) { curMax = A[j]; index = j; } } } if (hasResult) { int tmp = A[i]; A[i] = A[index]; A[index] = tmp; return A; } } } return A; } }","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1053.html#_5","text":"","title":"\u603b\u7ed3"},{"location":"11.html","text":"\u9898\u76ee: \u7ed9\u4f60 n \u4e2a\u975e\u8d1f\u6574\u6570 a1\uff0ca2\uff0c...\uff0can\uff0c\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 (i, ai) \u3002 \u5728\u5750\u6807\u5185\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a (i, ai) \u548c (i, 0)\u3002 \u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u8bf4\u660e\uff1a\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c\u4e14 n \u7684\u503c\u81f3\u5c11\u4e3a 2\u3002 \u793a\u4f8b1: \u8f93\u5165\uff1a[1,8,6,2,5,4,8,3,7] >\u8f93\u51fa\uff1a49 \u89e3\u7b54: /* * \u5173\u952e\u70b9\uff1a * 1. \u975e\u8d1f\u6574\u6570 * 2. i \u4e0e a_i \u540c\u6837\u91cd\u8981\uff0c\u4e0d\u7136 8 * 8 \u5e94\u8be5\u5c31\u662f\u6700\u5927\u7684\u6570 * 3. n\u7684\u503c\u81f3\u5c11\u4e3a2 * \u6781\u7aef\u60c5\u5f62\uff1a * \u5728A-i\u90fd\u76f8\u540c\u65f6\uff0ci\u51b3\u5b9a\u6700\u5927\u9762\u79ef * \u5728A_i \u4f9d\u6b21\u589e\u52a0\uff0c\u6216\u8005\u51cf\u5c11\u65f6\uff0c\u6700\u5c0f\u7684i\u6240\u5728\u4f4d\u7f6e\u7684A-i\u51b3\u5b9a\u9762\u79ef\u5927\u5c0f */ /* * \u89e3\u6cd5\uff1a * 1. \u66b4\u529b\u6cd5\uff0c\u7b97\u51fa\u6240\u6709\u7684\u9762\u79ef\u5927\u5c0f\uff0c\u53d6\u6700\u5927\u503c\uff0c\u53ef\u89e3\u3002 * \u8ba1\u7b97\u673a\u4f9d\u6b21\u8bfb\u53d6\u8f93\u5165\uff0c\u6bcf\u8bfb\u53d6\u4e00\u4e2a\u6570\u5b57\u4fbf\u4e0e\u539f\u6765\u6240\u6709\u7684\u6570\u5b57\u8ba1\u7b97\u4e00\u6b21\uff0c\u6bd4\u8f83\u51fa\u6700\u5927\u503c * 2. \u6392\u5e8f\uff0c\u4e0d\u53ef\u505a\uff0c\u56e0\u4e3a\u4f1a\u4e22\u5931i * 3. \u53cc\u6307\u9488\u6cd5\uff08\u65b0\u89e3\u6cd5\uff09 */ int maxArea(int* height, int heightSize){ int left = 0; int right = heightSize - 1; int area = -1; while (left<right){ int temp = fmin(height[left],height[right]) * (right - left); area = area > temp? area:temp; if(height[left]<height[right]){ left ++; }else{ right --; } } return area; }","title":11},{"location":"11.html#_1","text":"\u7ed9\u4f60 n \u4e2a\u975e\u8d1f\u6574\u6570 a1\uff0ca2\uff0c...\uff0can\uff0c\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 (i, ai) \u3002 \u5728\u5750\u6807\u5185\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a (i, ai) \u548c (i, 0)\u3002 \u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u8bf4\u660e\uff1a\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c\u4e14 n \u7684\u503c\u81f3\u5c11\u4e3a 2\u3002","title":"\u9898\u76ee:"},{"location":"11.html#1","text":"\u8f93\u5165\uff1a[1,8,6,2,5,4,8,3,7] >\u8f93\u51fa\uff1a49","title":"\u793a\u4f8b1:"},{"location":"11.html#_2","text":"/* * \u5173\u952e\u70b9\uff1a * 1. \u975e\u8d1f\u6574\u6570 * 2. i \u4e0e a_i \u540c\u6837\u91cd\u8981\uff0c\u4e0d\u7136 8 * 8 \u5e94\u8be5\u5c31\u662f\u6700\u5927\u7684\u6570 * 3. n\u7684\u503c\u81f3\u5c11\u4e3a2 * \u6781\u7aef\u60c5\u5f62\uff1a * \u5728A-i\u90fd\u76f8\u540c\u65f6\uff0ci\u51b3\u5b9a\u6700\u5927\u9762\u79ef * \u5728A_i \u4f9d\u6b21\u589e\u52a0\uff0c\u6216\u8005\u51cf\u5c11\u65f6\uff0c\u6700\u5c0f\u7684i\u6240\u5728\u4f4d\u7f6e\u7684A-i\u51b3\u5b9a\u9762\u79ef\u5927\u5c0f */ /* * \u89e3\u6cd5\uff1a * 1. \u66b4\u529b\u6cd5\uff0c\u7b97\u51fa\u6240\u6709\u7684\u9762\u79ef\u5927\u5c0f\uff0c\u53d6\u6700\u5927\u503c\uff0c\u53ef\u89e3\u3002 * \u8ba1\u7b97\u673a\u4f9d\u6b21\u8bfb\u53d6\u8f93\u5165\uff0c\u6bcf\u8bfb\u53d6\u4e00\u4e2a\u6570\u5b57\u4fbf\u4e0e\u539f\u6765\u6240\u6709\u7684\u6570\u5b57\u8ba1\u7b97\u4e00\u6b21\uff0c\u6bd4\u8f83\u51fa\u6700\u5927\u503c * 2. \u6392\u5e8f\uff0c\u4e0d\u53ef\u505a\uff0c\u56e0\u4e3a\u4f1a\u4e22\u5931i * 3. \u53cc\u6307\u9488\u6cd5\uff08\u65b0\u89e3\u6cd5\uff09 */ int maxArea(int* height, int heightSize){ int left = 0; int right = heightSize - 1; int area = -1; while (left<right){ int temp = fmin(height[left],height[right]) * (right - left); area = area > temp? area:temp; if(height[left]<height[right]){ left ++; }else{ right --; } } return area; }","title":"\u89e3\u7b54:"},{"location":"110.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a \u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1 \u3002 \u793a\u4f8b: >\u8f93\u5165\uff1aroot = [3,9,20,null,null,15,7] >\u8f93\u51fa\uff1atrue \u89e3\u7b54: /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: int hight(TreeNode* root) { if(!root) return 0; int left = 0, hi = 0; if(root->left) left = hight(root->left); if(root->right) hi = hight(root ->right); return 1 + max(left, hi); } bool isBalanced(TreeNode* root) { if(!root) return true; // if(!root->right && !root->left ) // return true; int le = hight(root->left); int hi = hight(root->right); return abs<int>(le - hi) <= 1 && isBalanced(root->left) && isBalanced(root->right); } }; /*\u65b9\u6cd5\u4e00\u7531\u4e8e\u662f\u81ea\u9876\u5411\u4e0b\u9012\u5f52\uff0c\u56e0\u6b64\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u51fd\u6570 height \u4f1a\u88ab\u91cd\u590d\u8c03\u7528\uff0c\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\u3002\u5982\u679c\u4f7f\u7528\u81ea\u5e95\u5411\u4e0a\u7684\u505a\u6cd5\uff0c\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u51fd\u6570 height \u53ea\u4f1a\u88ab\u8c03\u7528\u4e00\u6b21\u3002 \u81ea\u5e95\u5411\u4e0a\u9012\u5f52\u7684\u505a\u6cd5\u7c7b\u4f3c\u4e8e\u540e\u5e8f\u904d\u5386\uff0c\u5bf9\u4e8e\u5f53\u524d\u904d\u5386\u5230\u7684\u8282\u70b9\uff0c\u5148\u9012\u5f52\u5730\u5224\u65ad\u5176\u5de6\u53f3\u5b50\u6811\u662f\u5426\u5e73\u8861\uff0c\u518d\u5224\u65ad\u4ee5\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u662f\u5426\u5e73\u8861\u3002\u5982\u679c\u4e00\u68f5\u5b50\u6811\u662f\u5e73\u8861\u7684\uff0c\u5219\u8fd4\u56de\u5176\u9ad8\u5ea6\uff08\u9ad8\u5ea6\u4e00\u5b9a\u662f\u975e\u8d1f\u6574\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002\u5982\u679c\u5b58\u5728\u4e00\u68f5\u5b50\u6811\u4e0d\u5e73\u8861\uff0c\u5219\u6574\u4e2a\u4e8c\u53c9\u6811\u4e00\u5b9a\u4e0d\u5e73\u8861\u3002 */ class Solution { public: int height(TreeNode* root) { if (root == NULL) { return 0; } int leftHeight = height(root->left); int rightHeight = height(root->right); if (leftHeight == -1 || rightHeight == -1 || abs(leftHeight - rightHeight) > 1) { return -1; } else { return max(leftHeight, rightHeight) + 1; } } bool isBalanced(TreeNode* root) { return height(root) >= 0; } };","title":110},{"location":"110.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002 \u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a \u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1 \u3002","title":"\u9898\u76ee:"},{"location":"110.html#_2","text":">\u8f93\u5165\uff1aroot = [3,9,20,null,null,15,7] >\u8f93\u51fa\uff1atrue","title":"\u793a\u4f8b:"},{"location":"110.html#_3","text":"/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: int hight(TreeNode* root) { if(!root) return 0; int left = 0, hi = 0; if(root->left) left = hight(root->left); if(root->right) hi = hight(root ->right); return 1 + max(left, hi); } bool isBalanced(TreeNode* root) { if(!root) return true; // if(!root->right && !root->left ) // return true; int le = hight(root->left); int hi = hight(root->right); return abs<int>(le - hi) <= 1 && isBalanced(root->left) && isBalanced(root->right); } }; /*\u65b9\u6cd5\u4e00\u7531\u4e8e\u662f\u81ea\u9876\u5411\u4e0b\u9012\u5f52\uff0c\u56e0\u6b64\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u51fd\u6570 height \u4f1a\u88ab\u91cd\u590d\u8c03\u7528\uff0c\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\u3002\u5982\u679c\u4f7f\u7528\u81ea\u5e95\u5411\u4e0a\u7684\u505a\u6cd5\uff0c\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u51fd\u6570 height \u53ea\u4f1a\u88ab\u8c03\u7528\u4e00\u6b21\u3002 \u81ea\u5e95\u5411\u4e0a\u9012\u5f52\u7684\u505a\u6cd5\u7c7b\u4f3c\u4e8e\u540e\u5e8f\u904d\u5386\uff0c\u5bf9\u4e8e\u5f53\u524d\u904d\u5386\u5230\u7684\u8282\u70b9\uff0c\u5148\u9012\u5f52\u5730\u5224\u65ad\u5176\u5de6\u53f3\u5b50\u6811\u662f\u5426\u5e73\u8861\uff0c\u518d\u5224\u65ad\u4ee5\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u662f\u5426\u5e73\u8861\u3002\u5982\u679c\u4e00\u68f5\u5b50\u6811\u662f\u5e73\u8861\u7684\uff0c\u5219\u8fd4\u56de\u5176\u9ad8\u5ea6\uff08\u9ad8\u5ea6\u4e00\u5b9a\u662f\u975e\u8d1f\u6574\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002\u5982\u679c\u5b58\u5728\u4e00\u68f5\u5b50\u6811\u4e0d\u5e73\u8861\uff0c\u5219\u6574\u4e2a\u4e8c\u53c9\u6811\u4e00\u5b9a\u4e0d\u5e73\u8861\u3002 */ class Solution { public: int height(TreeNode* root) { if (root == NULL) { return 0; } int leftHeight = height(root->left); int rightHeight = height(root->right); if (leftHeight == -1 || rightHeight == -1 || abs(leftHeight - rightHeight) > 1) { return -1; } else { return max(leftHeight, rightHeight) + 1; } } bool isBalanced(TreeNode* root) { return height(root) >= 0; } };","title":"\u89e3\u7b54:"},{"location":"1109.html","text":"\u9898\u76ee: \u8fd9\u91cc\u6709 n \u4e2a\u822a\u73ed\uff0c\u5b83\u4eec\u5206\u522b\u4ece 1 \u5230 n \u8fdb\u884c\u7f16\u53f7\u3002 \u6709\u4e00\u4efd\u822a\u73ed\u9884\u8ba2\u8868 bookings \uff0c\u8868\u4e2d\u7b2c i \u6761\u9884\u8ba2\u8bb0\u5f55 bookings[i] = [firsti, lasti, seatsi] \u610f\u5473\u7740\u5728\u4ece firsti \u5230 lasti \uff08\u5305\u542b firsti \u548c lasti \uff09\u7684 \u6bcf\u4e2a\u822a\u73ed \u4e0a\u9884\u8ba2\u4e86 seatsi \u4e2a\u5ea7\u4f4d\u3002 \u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 answer\uff0c\u5176\u4e2d answer[i] \u662f\u822a\u73ed i \u4e0a\u9884\u8ba2\u7684\u5ea7\u4f4d\u603b\u6570\u3002 \u793a\u4f8b: \u8f93\u5165\uff1abookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5 \u8f93\u51fa\uff1a[10,55,45,25,25] \u89e3\u91ca\uff1a \u822a\u73ed\u7f16\u53f7 1 2 3 4 5 \u9884\u8ba2\u8bb0\u5f55 1 \uff1a 10 10 \u9884\u8ba2\u8bb0\u5f55 2 \uff1a 20 20 \u9884\u8ba2\u8bb0\u5f55 3 \uff1a 25 25 25 25 \u603b\u5ea7\u4f4d\u6570\uff1a 10 55 45 25 25 \u56e0\u6b64\uff0canswer = [10,55,45,25,25] \u601d\u8def \u524d\u7f00\u548c\u7684\u5e94\u7528\u573a\u666f\u662f\uff0c\u9700\u8981\u5bf9\u67d0\u4e2a\u533a\u95f4[i...j]\u9891\u7e41\u67e5\u8be2\u7d2f\u8ba1\u548c\uff0c\u907f\u514d\u6bcf\u6b21\u67e5\u8be2\u90fd\u904d\u5386\u8fd9\u4e2a\u533a\u95f4\u3002 \u5dee\u5206\u6570\u7ec4\u7684\u5e94\u7528\u573a\u666f\u662f\uff0c\u9700\u8981\u5bf9\u67d0\u4e2a\u533a\u95f4[i...j]\u9891\u7e41\u5730\u52a0\u6216\u51cf\u67d0\u4e00\u503c\uff0c\u907f\u514d\u6bcf\u6b21\u90fd\u904d\u5386\u8fd9\u4e2a\u533a\u95f4\u3002 \u6b64\u9898\u53ef\u7528\u5dee\u5206\u6570\u7ec4\u89e3\uff0c\u5dee\u5206\u6570\u7ec4diff\u4e2d\uff0cdiff[i] = nums[i] - nums[i-1]\uff0c\u53ef\u7531diff\u53cd\u63a8\u539f\u6570\u7ec4\u3002\u8981\u5bf9[i,...,j]\u533a\u95f4\u5185\u7684\u5143\u7d20\u6574\u4f53+3\uff0c\u5219\u4ee4diff[i] += 3, diff[j+1] -= 3\u5373\u53ef\uff0c\u590d\u6742\u5ea6O(1)\u3002 \u90a3\u4e48\u5dee\u5206\u6570\u7ec4\u7684\u4f5c\u7528\u4e00\u5b9a\u5c31\u662f\u6c42\u591a\u6b21\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u540e\u7684\u6570\u7ec4 // \u6ce8\u610f effcet \u53ef\u80fd\u57285+1\u7ed3\u675f \u7f16\u53f7 1 2 3 4 5 thing1 10 -10 thing2 20 -20 thing3 25 -25 coEffect 10 45 -10 -20 0 ans 10 55 45 25 25 \u89e3\u7b54 //\u8d85\u65f6 class Solution { public: vector<int> corpFlightBookings(vector<vector<int>>& bookings, int n) { vector<int> ans(n , 0); // n \u4e2a\u822a\u73ed for(auto booking: bookings) { for(int i = booking[0]; i <= booking[1]; ++i) { ans[i -1] += booking[2]; } } return ans; } }; \u6807\u51c6\u7b54\u6848 class Solution { public: vector<int> corpFlightBookings(vector<vector<int>>& things, int n) { vector<int> coEffect(n + 2, 0); // \u7d2f\u52a0\u5f71\u54cd\u6570\u7ec4 for (auto& thing : things){ coEffect[thing[0]] += thing[2]; coEffect[thing[1] + 1] -= thing[2]; } vector<int> ans(n, 0); // \u524d\u7f00\u548c\u6570\u7ec4 ans[0] = coEffect[1]; for (int i = 1; i < n; i++){ ans[i] = ans[i-1] + coEffect[i + 1]; //i-1\u7684\u524d\u7f00\u52a0\u4e0a \"\u5f71\u54cd\"\u6570\u7ec4 } return ans; } };","title":"\u9898\u76ee:"},{"location":"1109.html#_1","text":"\u8fd9\u91cc\u6709 n \u4e2a\u822a\u73ed\uff0c\u5b83\u4eec\u5206\u522b\u4ece 1 \u5230 n \u8fdb\u884c\u7f16\u53f7\u3002 \u6709\u4e00\u4efd\u822a\u73ed\u9884\u8ba2\u8868 bookings \uff0c\u8868\u4e2d\u7b2c i \u6761\u9884\u8ba2\u8bb0\u5f55 bookings[i] = [firsti, lasti, seatsi] \u610f\u5473\u7740\u5728\u4ece firsti \u5230 lasti \uff08\u5305\u542b firsti \u548c lasti \uff09\u7684 \u6bcf\u4e2a\u822a\u73ed \u4e0a\u9884\u8ba2\u4e86 seatsi \u4e2a\u5ea7\u4f4d\u3002 \u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 answer\uff0c\u5176\u4e2d answer[i] \u662f\u822a\u73ed i \u4e0a\u9884\u8ba2\u7684\u5ea7\u4f4d\u603b\u6570\u3002","title":"\u9898\u76ee:"},{"location":"1109.html#_2","text":"\u8f93\u5165\uff1abookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5 \u8f93\u51fa\uff1a[10,55,45,25,25] \u89e3\u91ca\uff1a \u822a\u73ed\u7f16\u53f7 1 2 3 4 5 \u9884\u8ba2\u8bb0\u5f55 1 \uff1a 10 10 \u9884\u8ba2\u8bb0\u5f55 2 \uff1a 20 20 \u9884\u8ba2\u8bb0\u5f55 3 \uff1a 25 25 25 25 \u603b\u5ea7\u4f4d\u6570\uff1a 10 55 45 25 25 \u56e0\u6b64\uff0canswer = [10,55,45,25,25]","title":"\u793a\u4f8b:"},{"location":"1109.html#_3","text":"\u524d\u7f00\u548c\u7684\u5e94\u7528\u573a\u666f\u662f\uff0c\u9700\u8981\u5bf9\u67d0\u4e2a\u533a\u95f4[i...j]\u9891\u7e41\u67e5\u8be2\u7d2f\u8ba1\u548c\uff0c\u907f\u514d\u6bcf\u6b21\u67e5\u8be2\u90fd\u904d\u5386\u8fd9\u4e2a\u533a\u95f4\u3002 \u5dee\u5206\u6570\u7ec4\u7684\u5e94\u7528\u573a\u666f\u662f\uff0c\u9700\u8981\u5bf9\u67d0\u4e2a\u533a\u95f4[i...j]\u9891\u7e41\u5730\u52a0\u6216\u51cf\u67d0\u4e00\u503c\uff0c\u907f\u514d\u6bcf\u6b21\u90fd\u904d\u5386\u8fd9\u4e2a\u533a\u95f4\u3002 \u6b64\u9898\u53ef\u7528\u5dee\u5206\u6570\u7ec4\u89e3\uff0c\u5dee\u5206\u6570\u7ec4diff\u4e2d\uff0cdiff[i] = nums[i] - nums[i-1]\uff0c\u53ef\u7531diff\u53cd\u63a8\u539f\u6570\u7ec4\u3002\u8981\u5bf9[i,...,j]\u533a\u95f4\u5185\u7684\u5143\u7d20\u6574\u4f53+3\uff0c\u5219\u4ee4diff[i] += 3, diff[j+1] -= 3\u5373\u53ef\uff0c\u590d\u6742\u5ea6O(1)\u3002 \u90a3\u4e48\u5dee\u5206\u6570\u7ec4\u7684\u4f5c\u7528\u4e00\u5b9a\u5c31\u662f\u6c42\u591a\u6b21\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u540e\u7684\u6570\u7ec4 // \u6ce8\u610f effcet \u53ef\u80fd\u57285+1\u7ed3\u675f \u7f16\u53f7 1 2 3 4 5 thing1 10 -10 thing2 20 -20 thing3 25 -25 coEffect 10 45 -10 -20 0 ans 10 55 45 25 25","title":"\u601d\u8def"},{"location":"1109.html#_4","text":"//\u8d85\u65f6 class Solution { public: vector<int> corpFlightBookings(vector<vector<int>>& bookings, int n) { vector<int> ans(n , 0); // n \u4e2a\u822a\u73ed for(auto booking: bookings) { for(int i = booking[0]; i <= booking[1]; ++i) { ans[i -1] += booking[2]; } } return ans; } };","title":"\u89e3\u7b54"},{"location":"1109.html#_5","text":"class Solution { public: vector<int> corpFlightBookings(vector<vector<int>>& things, int n) { vector<int> coEffect(n + 2, 0); // \u7d2f\u52a0\u5f71\u54cd\u6570\u7ec4 for (auto& thing : things){ coEffect[thing[0]] += thing[2]; coEffect[thing[1] + 1] -= thing[2]; } vector<int> ans(n, 0); // \u524d\u7f00\u548c\u6570\u7ec4 ans[0] = coEffect[1]; for (int i = 1; i < n; i++){ ans[i] = ans[i-1] + coEffect[i + 1]; //i-1\u7684\u524d\u7f00\u52a0\u4e0a \"\u5f71\u54cd\"\u6570\u7ec4 } return ans; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1161.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\u3002\u8bbe\u6839\u8282\u70b9\u4f4d\u4e8e\u4e8c\u53c9\u6811\u7684\u7b2c 1 \u5c42\uff0c\u800c\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4f4d\u4e8e\u7b2c 2 \u5c42\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u8bf7\u4f60\u627e\u51fa\u5c42\u5185\u5143\u7d20\u4e4b\u548c \u6700\u5927 \u7684\u90a3\u51e0\u5c42\uff08\u53ef\u80fd\u53ea\u6709\u4e00\u5c42\uff09\u7684\u5c42\u53f7\uff0c\u5e76\u8fd4\u56de\u5176\u4e2d \u6700\u5c0f \u7684\u90a3\u4e2a\u3002 \u793a\u4f8b1: >\u8f93\u5165\uff1aroot = [1,7,0,7,-8,null,null] >\u8f93\u51fa\uff1a2 \u5b9e\u4f8b2 >\u8f93\u5165\uff1a root = [989,null,10250,98693,-89388,null,null,null,-32127] >\u8f93\u51fa\uff1a 2 \u601d\u8def \u89e3\u7b54: // \u60f3\u5230\uff0c\u5e76\u5b9e\u73b0\u4e86\u5c42\u6b21\u904d\u5386\uff0c\u4f46\u8d85\u65f6\uff0c\u8d85\u65f6\u7684\u539f\u56e0\u662f:\u60f3\u5355\u7eaf\u901a\u8fc7\u8ba1\u6570\u5224\u65ad\u662f\u5426\u5230\u4e86\u65b0\u7684\u4e00\u5c42\uff0c\u4f46\u5b9e\u9645\u4e0a\u65e0\u6cd5\u786e\u5b9a\u6bcf\u4e00\u884c\u6709\u591a\u5c11\u4e2a\u5143\u7d20. //\u5982\u679c\u53bb\u6389if(p == nullptr)\u5219\u4e0d\u4f1a\u51fa\u73b0\u8d85\u65f6\uff0c\u4f46\u7ed3\u679c\u4f1a\u51fa\u9519(\u8fd8\u662f\u56e0\u4e3a\u65e0\u6cd5\u786e\u5b9a\u6bcf\u884c\u7684\u5143\u7d20) /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: int maxLevelSum(TreeNode* root) { map<int , int> MapInt; queue<TreeNode*> Q; int m = 1; // \u5c42\u6570 int num = 1; // \u6bcf\u5c42\u7684\u4e2a\u6570 Q.push(root); for(int i = 0; Q.size()!= 0; ) { if( i >= num ){ i = 0; m++; // \u5c42\u6570 ++ num *= 2; } TreeNode* p = nullptr; p = Q.front(); i ++; if(p == nullptr) { Q.pop(); //std::cout<<\"null\"; Q.push(nullptr); Q.push(nullptr); continue; } else { //std::cout<<p->val; MapInt[m] += p->val; Q.push(p->left); Q.push(p->right); Q.pop(); } // for(auto p :MapInt) // std::cout<<p.first <<\" \"<<p.second<<\"\\n\"; // std::cout<<\"................\"<<\"\\n\"; } int ret = -1; MapInt[0] = INT_MIN; for(auto p :MapInt){ if(p.second > MapInt[0]){ ret = p.first; MapInt[0] = p.second; } } return ret; } }; \u6807\u51c6\u7b54\u6848 //\u65e0\u6807\u51c6\u7b54\u6848\uff0c\u67e5\u770b\u89e3\u6790\u60f3\u5230\u4e86\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5f53\u524d\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u53ef\u5224\u65ad\u5f53\u524d\u884c\u662f\u5426\u5df2\u7ecf\u5b8c\u7ed3 class Solution { public: int maxLevelSum(TreeNode* root) { int max = INT_MIN; int res = -1;// \u6700\u5c0f\u7684\u5c42\u6570 queue<TreeNode*> Q; int m = 0; // \u5c42\u6570 int sum = 0; // \u5f53\u524d\u5c42\u6570\u5143\u7d20\u7684\u603b\u548c TreeNode* last=root;//\u6307\u5411\u6bcf\u4e00\u884c\u7684\u6700\u53f3\u8fb9\u7684\u5143\u7d20 TreeNode* nlast = nullptr; Q.push(root); while(Q.size()!= 0) { TreeNode* p = nullptr; p = Q.front(); sum += p->val; if(p->left) { Q.push(p->left); nlast = p->left; } if(p->right) { Q.push(p->right); nlast = p->right; } //\u5f53\u524d\u884c\u7ed3\u675f if(p == last) { m++; // \u884c\u6570\u52a01 last = nlast; if(max <sum) { max = sum; res = m; } sum = 0; } Q.pop(); } return res; } }; \u603b\u7ed3 \u4e0a\u8ff0\u89e3\u6cd5\uff0c\u901a\u8fc7nlast\u548clast\u7684\u5171\u540c\u4f5c\u7528\uff0c\u5de7\u5999\u7684\u8ddf\u8e2a\u5f53\u524d\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 \u8fd9\u662f\u8fd9\u9053\u9898\u7684\u70b9\u775b\u4e4b\u7b14\u3002 \u7528\u5f52\u7eb3\u6cd5\uff0c\u6211\u4eec\u5047\u8bbelast\u6307\u5411\u5f53\u524d\u884c\u7684\u4e00\u4e2a\u6700\u540e\u5143\u7d20\u3002","title":1161},{"location":"1161.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\u3002\u8bbe\u6839\u8282\u70b9\u4f4d\u4e8e\u4e8c\u53c9\u6811\u7684\u7b2c 1 \u5c42\uff0c\u800c\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4f4d\u4e8e\u7b2c 2 \u5c42\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u8bf7\u4f60\u627e\u51fa\u5c42\u5185\u5143\u7d20\u4e4b\u548c \u6700\u5927 \u7684\u90a3\u51e0\u5c42\uff08\u53ef\u80fd\u53ea\u6709\u4e00\u5c42\uff09\u7684\u5c42\u53f7\uff0c\u5e76\u8fd4\u56de\u5176\u4e2d \u6700\u5c0f \u7684\u90a3\u4e2a\u3002","title":"\u9898\u76ee:"},{"location":"1161.html#1","text":">\u8f93\u5165\uff1aroot = [1,7,0,7,-8,null,null] >\u8f93\u51fa\uff1a2","title":"\u793a\u4f8b1:"},{"location":"1161.html#2","text":">\u8f93\u5165\uff1a root = [989,null,10250,98693,-89388,null,null,null,-32127] >\u8f93\u51fa\uff1a 2","title":"\u5b9e\u4f8b2"},{"location":"1161.html#_2","text":"","title":"\u601d\u8def"},{"location":"1161.html#_3","text":"// \u60f3\u5230\uff0c\u5e76\u5b9e\u73b0\u4e86\u5c42\u6b21\u904d\u5386\uff0c\u4f46\u8d85\u65f6\uff0c\u8d85\u65f6\u7684\u539f\u56e0\u662f:\u60f3\u5355\u7eaf\u901a\u8fc7\u8ba1\u6570\u5224\u65ad\u662f\u5426\u5230\u4e86\u65b0\u7684\u4e00\u5c42\uff0c\u4f46\u5b9e\u9645\u4e0a\u65e0\u6cd5\u786e\u5b9a\u6bcf\u4e00\u884c\u6709\u591a\u5c11\u4e2a\u5143\u7d20. //\u5982\u679c\u53bb\u6389if(p == nullptr)\u5219\u4e0d\u4f1a\u51fa\u73b0\u8d85\u65f6\uff0c\u4f46\u7ed3\u679c\u4f1a\u51fa\u9519(\u8fd8\u662f\u56e0\u4e3a\u65e0\u6cd5\u786e\u5b9a\u6bcf\u884c\u7684\u5143\u7d20) /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: int maxLevelSum(TreeNode* root) { map<int , int> MapInt; queue<TreeNode*> Q; int m = 1; // \u5c42\u6570 int num = 1; // \u6bcf\u5c42\u7684\u4e2a\u6570 Q.push(root); for(int i = 0; Q.size()!= 0; ) { if( i >= num ){ i = 0; m++; // \u5c42\u6570 ++ num *= 2; } TreeNode* p = nullptr; p = Q.front(); i ++; if(p == nullptr) { Q.pop(); //std::cout<<\"null\"; Q.push(nullptr); Q.push(nullptr); continue; } else { //std::cout<<p->val; MapInt[m] += p->val; Q.push(p->left); Q.push(p->right); Q.pop(); } // for(auto p :MapInt) // std::cout<<p.first <<\" \"<<p.second<<\"\\n\"; // std::cout<<\"................\"<<\"\\n\"; } int ret = -1; MapInt[0] = INT_MIN; for(auto p :MapInt){ if(p.second > MapInt[0]){ ret = p.first; MapInt[0] = p.second; } } return ret; } };","title":"\u89e3\u7b54:"},{"location":"1161.html#_4","text":"//\u65e0\u6807\u51c6\u7b54\u6848\uff0c\u67e5\u770b\u89e3\u6790\u60f3\u5230\u4e86\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5f53\u524d\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u53ef\u5224\u65ad\u5f53\u524d\u884c\u662f\u5426\u5df2\u7ecf\u5b8c\u7ed3 class Solution { public: int maxLevelSum(TreeNode* root) { int max = INT_MIN; int res = -1;// \u6700\u5c0f\u7684\u5c42\u6570 queue<TreeNode*> Q; int m = 0; // \u5c42\u6570 int sum = 0; // \u5f53\u524d\u5c42\u6570\u5143\u7d20\u7684\u603b\u548c TreeNode* last=root;//\u6307\u5411\u6bcf\u4e00\u884c\u7684\u6700\u53f3\u8fb9\u7684\u5143\u7d20 TreeNode* nlast = nullptr; Q.push(root); while(Q.size()!= 0) { TreeNode* p = nullptr; p = Q.front(); sum += p->val; if(p->left) { Q.push(p->left); nlast = p->left; } if(p->right) { Q.push(p->right); nlast = p->right; } //\u5f53\u524d\u884c\u7ed3\u675f if(p == last) { m++; // \u884c\u6570\u52a01 last = nlast; if(max <sum) { max = sum; res = m; } sum = 0; } Q.pop(); } return res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1161.html#_5","text":"\u4e0a\u8ff0\u89e3\u6cd5\uff0c\u901a\u8fc7nlast\u548clast\u7684\u5171\u540c\u4f5c\u7528\uff0c\u5de7\u5999\u7684\u8ddf\u8e2a\u5f53\u524d\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 \u8fd9\u662f\u8fd9\u9053\u9898\u7684\u70b9\u775b\u4e4b\u7b14\u3002 \u7528\u5f52\u7eb3\u6cd5\uff0c\u6211\u4eec\u5047\u8bbelast\u6307\u5411\u5f53\u524d\u884c\u7684\u4e00\u4e2a\u6700\u540e\u5143\u7d20\u3002","title":"\u603b\u7ed3"},{"location":"1190.html","text":"\u9898\u76ee: \u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff08\u4ec5\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u548c\u62ec\u53f7\uff09\u3002 \u8bf7\u4f60\u6309\u7167\u4ece\u62ec\u53f7\u5185\u5230\u5916\u7684\u987a\u5e8f\uff0c\u9010\u5c42\u53cd\u8f6c\u6bcf\u5bf9\u5339\u914d\u62ec\u53f7\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u6700\u7ec8\u7684\u7ed3\u679c\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1as = \"a(bcdefghijkl(mno)p)q\" >\u8f93\u51fa\uff1a\"apmnolkjihgfedcbq\" \u601d\u8def \u501f\u52a9\u6808\u6765\u5b9e\u73b0 \u89e3\u7b54: class Solution { public: string reverseParentheses(string s) { stack<string> stk; string res = \"\"; for (char c: s) { if (c == '(') //\u9047\u5230\u5de6\u62ec\u53f7 \u5c31\u662f\u4e00\u4e2a\u65b0\u7684\u53f0\u9636\u4e86 { stk.push(res); //\u5f53\u524d\u7684\u8fd9\u4e00\u6bb5\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u5b58\u8fdbstack res = \"\"; //\u91cd\u65b0\u8ba1\u65b0\u7684\u4e00\u6bb5 } else if (c == ')') //\u5f53\u524d\u8fd9\u4e00\u6bb5 \u8981\u7ffb\u8f6c \u4e0e\u524d\u9762\u7684\u4e00\u6bb5\u63a5\u8d77\u6765 { reverse(res.begin(), res.end()); res = stk.top() + res; stk.pop(); //\u524d\u9762\u8fd9\u4e00\u6bb5\u4e0d\u8981\u4e86 } else res += c; //\u7edf\u8ba1\u8fdb\u5f53\u524d\u8fd9\u4e00\u6bb5 } return res; } }; \u603b\u7ed3 \u601d\u7ef4\u5c40\u9650\u4e8e\u5355\u4e2a\u7684char\uff0c\u800c\u6ca1\u6709\u5c06\u5176\u7406\u89e3\u4e3a\u5b57\u7b26\u6bb5\u6765\u501f\u52a9\u6808\u5b9e\u73b0.","title":1190},{"location":"1190.html#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff08\u4ec5\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u548c\u62ec\u53f7\uff09\u3002 \u8bf7\u4f60\u6309\u7167\u4ece\u62ec\u53f7\u5185\u5230\u5916\u7684\u987a\u5e8f\uff0c\u9010\u5c42\u53cd\u8f6c\u6bcf\u5bf9\u5339\u914d\u62ec\u53f7\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u6700\u7ec8\u7684\u7ed3\u679c\u3002","title":"\u9898\u76ee:"},{"location":"1190.html#_2","text":">\u8f93\u5165\uff1as = \"a(bcdefghijkl(mno)p)q\" >\u8f93\u51fa\uff1a\"apmnolkjihgfedcbq\"","title":"\u793a\u4f8b:"},{"location":"1190.html#_3","text":"\u501f\u52a9\u6808\u6765\u5b9e\u73b0","title":"\u601d\u8def"},{"location":"1190.html#_4","text":"class Solution { public: string reverseParentheses(string s) { stack<string> stk; string res = \"\"; for (char c: s) { if (c == '(') //\u9047\u5230\u5de6\u62ec\u53f7 \u5c31\u662f\u4e00\u4e2a\u65b0\u7684\u53f0\u9636\u4e86 { stk.push(res); //\u5f53\u524d\u7684\u8fd9\u4e00\u6bb5\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u5b58\u8fdbstack res = \"\"; //\u91cd\u65b0\u8ba1\u65b0\u7684\u4e00\u6bb5 } else if (c == ')') //\u5f53\u524d\u8fd9\u4e00\u6bb5 \u8981\u7ffb\u8f6c \u4e0e\u524d\u9762\u7684\u4e00\u6bb5\u63a5\u8d77\u6765 { reverse(res.begin(), res.end()); res = stk.top() + res; stk.pop(); //\u524d\u9762\u8fd9\u4e00\u6bb5\u4e0d\u8981\u4e86 } else res += c; //\u7edf\u8ba1\u8fdb\u5f53\u524d\u8fd9\u4e00\u6bb5 } return res; } };","title":"\u89e3\u7b54:"},{"location":"1190.html#_5","text":"\u601d\u7ef4\u5c40\u9650\u4e8e\u5355\u4e2a\u7684char\uff0c\u800c\u6ca1\u6709\u5c06\u5176\u7406\u89e3\u4e3a\u5b57\u7b26\u6bb5\u6765\u501f\u52a9\u6808\u5b9e\u73b0.","title":"\u603b\u7ed3"},{"location":"120.html","text":"\u9898\u76ee: \u4e09\u89d2\u5f62\u7684\u6700\u5c0f\u8def\u5f84\u548c \u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002 \u76f8\u90bb\u7684\u7ed3\u70b9 \u5728\u8fd9\u91cc\u6307\u7684\u662f \u4e0b\u6807 \u4e0e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 \u76f8\u540c\u6216\u8005\u7b49\u4e8e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 + 1 \u7684\u4e24\u4e2a\u7ed3\u70b9\u3002 \u793a\u4f8b1: >\u8f93\u5165\uff1a[ [2], [3,4], [6,5,7], [4,1,8,3] ] >\u8f93\u51fa\uff1a11 \u89e3\u7b54: /* * 1. \u8d2a\u5fc3\u7b97\u6cd5,\u9519\u8bef */ int min_index(int** triangle,int i ,int index){ if(triangle[i][index] > triangle[i][index+1 ]) return index +1; //else return index; } int minimumTotal(int** triangle, int triangleSize, int* triangleColSize){ int index = 0; // \u5f53\u524d\u5143\u7d20\u6807\u8bb0 int count = triangle[0][0]; for(int i=0;i<triangleSize -1;i++){ index = min_index(triangle, i + 1,index); //printf(\"%d %d \",index,triangle[i][index]); count += triangle[i + 1 ][index]; } return count ; } /* * 2. \u52a8\u6001\u89c4\u5212 */ int minimumTotal(int** triangle, int triangleSize, int* triangleColSize){ // \u8bb0\u5f55\u5230\u6bcf\u4e00\u884c\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u4ee3\u4ef7 int* cot = (int*)malloc(triangleSize * sizeof(int)); int sum = INT_MAX; for(int i=0;i<triangleSize; i ++){ cot[i] = 0; } if(cot == NULL){ return -1; } cot[0] = triangle[0][0]; for(int i=1;i<triangleSize; i++){ for(int j=triangleColSize[i] - 1 ;j>=0;j--){ if(j == 0){ cot[0] += triangle[i][j]; }else if( j == triangleColSize[i] - 1){ cot[j] = cot[j - 1] + triangle[i][j]; }else{ cot[j] = fmin(cot[j-1],cot[j]) + triangle[i][j] ; } } for(int k=0;k<triangleSize;k++){ printf(\"%d \",cot[k]); } printf(\"\\n\"); } for(int i = 0;i<triangleSize;i ++){ sum = sum<cot[i]?sum:cot[i]; } return sum; } /* * \u5b98\u65b9\u89e3\u7b54\uff0c\u4ee3\u7801\u5b66\u4e60 */ int minimumTotal(int** triangle, int triangleSize, int* triangleColSize) { int f[triangleSize]; memset(f, 0, sizeof(f)); f[0] = triangle[0][0]; for (int i = 1; i < triangleSize; ++i) { f[i] = f[i - 1] + triangle[i][i]; for (int j = i - 1; j > 0; --j) { f[j] = fmin(f[j - 1], f[j]) + triangle[i][j]; } f[0] += triangle[i][0]; } int ret = f[0]; for (int i = 1; i < triangleSize; i++) ret = fmin(ret, f[i]); return ret; }","title":120},{"location":"120.html#_1","text":"\u4e09\u89d2\u5f62\u7684\u6700\u5c0f\u8def\u5f84\u548c \u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002 \u76f8\u90bb\u7684\u7ed3\u70b9 \u5728\u8fd9\u91cc\u6307\u7684\u662f \u4e0b\u6807 \u4e0e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 \u76f8\u540c\u6216\u8005\u7b49\u4e8e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 + 1 \u7684\u4e24\u4e2a\u7ed3\u70b9\u3002","title":"\u9898\u76ee:"},{"location":"120.html#1","text":">\u8f93\u5165\uff1a[ [2], [3,4], [6,5,7], [4,1,8,3] ] >\u8f93\u51fa\uff1a11","title":"\u793a\u4f8b1:"},{"location":"120.html#_2","text":"/* * 1. \u8d2a\u5fc3\u7b97\u6cd5,\u9519\u8bef */ int min_index(int** triangle,int i ,int index){ if(triangle[i][index] > triangle[i][index+1 ]) return index +1; //else return index; } int minimumTotal(int** triangle, int triangleSize, int* triangleColSize){ int index = 0; // \u5f53\u524d\u5143\u7d20\u6807\u8bb0 int count = triangle[0][0]; for(int i=0;i<triangleSize -1;i++){ index = min_index(triangle, i + 1,index); //printf(\"%d %d \",index,triangle[i][index]); count += triangle[i + 1 ][index]; } return count ; } /* * 2. \u52a8\u6001\u89c4\u5212 */ int minimumTotal(int** triangle, int triangleSize, int* triangleColSize){ // \u8bb0\u5f55\u5230\u6bcf\u4e00\u884c\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u4ee3\u4ef7 int* cot = (int*)malloc(triangleSize * sizeof(int)); int sum = INT_MAX; for(int i=0;i<triangleSize; i ++){ cot[i] = 0; } if(cot == NULL){ return -1; } cot[0] = triangle[0][0]; for(int i=1;i<triangleSize; i++){ for(int j=triangleColSize[i] - 1 ;j>=0;j--){ if(j == 0){ cot[0] += triangle[i][j]; }else if( j == triangleColSize[i] - 1){ cot[j] = cot[j - 1] + triangle[i][j]; }else{ cot[j] = fmin(cot[j-1],cot[j]) + triangle[i][j] ; } } for(int k=0;k<triangleSize;k++){ printf(\"%d \",cot[k]); } printf(\"\\n\"); } for(int i = 0;i<triangleSize;i ++){ sum = sum<cot[i]?sum:cot[i]; } return sum; } /* * \u5b98\u65b9\u89e3\u7b54\uff0c\u4ee3\u7801\u5b66\u4e60 */ int minimumTotal(int** triangle, int triangleSize, int* triangleColSize) { int f[triangleSize]; memset(f, 0, sizeof(f)); f[0] = triangle[0][0]; for (int i = 1; i < triangleSize; ++i) { f[i] = f[i - 1] + triangle[i][i]; for (int j = i - 1; j > 0; --j) { f[j] = fmin(f[j - 1], f[j]) + triangle[i][j]; } f[0] += triangle[i][0]; } int ret = f[0]; for (int i = 1; i < triangleSize; i++) ret = fmin(ret, f[i]); return ret; }","title":"\u89e3\u7b54:"},{"location":"1237.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u51fd\u6570 f(x, y) \u548c\u4e00\u4e2a\u76ee\u6807\u7ed3\u679c z\uff0c\u51fd\u6570\u516c\u5f0f\u672a\u77e5\uff0c\u8bf7\u4f60\u8ba1\u7b97\u65b9\u7a0b f(x,y) == z \u6240\u6709\u53ef\u80fd\u7684\u6b63\u6574\u6570 \u6570\u5bf9 x \u548c y\u3002\u6ee1\u8db3\u6761\u4ef6\u7684\u7ed3\u679c\u6570\u5bf9\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u3002 \u5c3d\u7ba1\u51fd\u6570\u7684\u5177\u4f53\u5f0f\u5b50\u672a\u77e5\uff0c\u4f46\u5b83\u662f\u5355\u8c03\u9012\u589e\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a f(x, y) < f(x + 1, y) f(x, y) < f(x, y + 1) \u51fd\u6570\u63a5\u53e3\u5b9a\u4e49\u5982\u4e0b\uff1a interface CustomFunction { public: // Returns some positive integer f(x, y) for two positive integers x and y based on a formula. int f(int x, int y); }; \u793a\u4f8b: \u8f93\u5165\uff1afunction_id = 1, z = 5 \u8f93\u51fa\uff1a[[1,4],[2,3],[3,2],[4,1]] \u89e3\u91ca\uff1afunction_id = 1 \u6697\u542b\u7684\u51fd\u6570\u5f0f\u5b50\u4e3a f(x, y) = x + y \u4ee5\u4e0b x \u548c y \u6ee1\u8db3 f(x, y) \u7b49\u4e8e 5\uff1a x=1, y=4 -> f(1, 4) = 1 + 4 = 5 x=2, y=3 -> f(2, 3) = 2 + 3 = 5 x=3, y=2 -> f(3, 2) = 3 + 2 = 5 x=4, y=1 -> f(4, 1) = 4 + 1 = 5 \u63d0\u793a 1 <= function_id <= 9 1 <= z <= 100 \u9898\u76ee\u4fdd\u8bc1 f(x, y) == z \u7684\u89e3\u5904\u4e8e 1 <= x, y <= 1000 \u7684\u8303\u56f4\u5185\u3002 \u5728 1 <= x, y <= 1000 \u7684\u524d\u63d0\u4e0b\uff0c\u9898\u76ee\u4fdd\u8bc1 f(x, y) \u662f\u4e00\u4e2a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002 \u601d\u8def \u901a\u8fc7 customfunction.f(x ,y) \u8c03\u7528\u5373\u53ef \u76f8\u5f53\u4e8e240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II \u4e2d,\u641c\u7d22\u8fd9\u6837\u7684\u884c\u5217\u9012\u589e\u7684\u8868\u683c f(1,1) f(1,2) .... f(1, m) f(2, 1) .......... f(2, m) .... f(n,1) ............f(m, n) \u89e3\u7b54: //\u6bcf\u4e00\u884c\u8fdb\u884c\u4e8c\u5206\u67e5\u627e t \u76f8\u5f53\u4e8e x\uff0c\u6211\u4eec\u641c\u7d22 y class Solution { public: vector<vector<int>> findSolution(CustomFunction& customfunction, int z) { vector<vector<int>> res; for(int t = 1; t < 1001; ++t) { //\u884c\u9012\u589e,\u56e0\u6b64 \u4e8c\u53c9\u641c\u7d22 int l = 1, r = 1001;//\u5de6\u95ed\uff0c\u53f3\u5f00\u533a\u95f4 while(l < r) { int mid = (r + l) / 2 ; int tmp = customfunction.f(t, mid); if( tmp < z) { l = mid + 1; } else if(tmp >= z) { r = mid; } } if(customfunction.f(t, l) == z) res.push_back({t, l}); } return res; } }; class Solution { public: vector<vector<int>> findSolution(CustomFunction& customfunction, int z) { vector<vector<int>> res; for(int t = 1; t < 1001; ++t) { //\u884c\u9012\u589e,\u56e0\u6b64 \u4e8c\u53c9\u641c\u7d22 int l = 1, r = 1001;//\u5de6\u95ed\uff0c\u53f3\u5f00\u533a\u95f4 while(l < r) { int mid = (r +l) / 2 ; int tmp = customfunction.f(t,mid); if( tmp < z) { l = mid + 1; } else if(tmp > z) { r = mid; } else { res.push_back({t, mid}); break; } } } return res; } }; //\u5bf9\u6574\u4e2a\u6570\u7ec4\u8fdb\u884c\u641c\u7d22 class Solution { public: vector<vector<int>> findSolution(CustomFunction& customfunction, int z) { int x = 1000, y = 1; vector<vector<int>> res; while(x > 0 && y > 0) { int tmp = customfunction.f(x, y); if(tmp > z) --x; else if(tmp < z) ++y; else { res.push_back({x, y}); --x; } } return res; } }; \u603b\u7ed3 \u5229\u7528\u63d0\u793a\u4e2d\u7684 1 <= x, y <= 1000 \u4f5c\u4e3a\u7a0b\u5e8f\u7684\u6761\u4ef6\u4e4b\u4e00","title":"1237.\u627e\u51fa\u7ed9\u5b9a\u65b9\u7a0b\u7684\u6b63\u6574\u6570\u89e3"},{"location":"1237.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u51fd\u6570 f(x, y) \u548c\u4e00\u4e2a\u76ee\u6807\u7ed3\u679c z\uff0c\u51fd\u6570\u516c\u5f0f\u672a\u77e5\uff0c\u8bf7\u4f60\u8ba1\u7b97\u65b9\u7a0b f(x,y) == z \u6240\u6709\u53ef\u80fd\u7684\u6b63\u6574\u6570 \u6570\u5bf9 x \u548c y\u3002\u6ee1\u8db3\u6761\u4ef6\u7684\u7ed3\u679c\u6570\u5bf9\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u3002 \u5c3d\u7ba1\u51fd\u6570\u7684\u5177\u4f53\u5f0f\u5b50\u672a\u77e5\uff0c\u4f46\u5b83\u662f\u5355\u8c03\u9012\u589e\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a f(x, y) < f(x + 1, y) f(x, y) < f(x, y + 1) \u51fd\u6570\u63a5\u53e3\u5b9a\u4e49\u5982\u4e0b\uff1a interface CustomFunction { public: // Returns some positive integer f(x, y) for two positive integers x and y based on a formula. int f(int x, int y); };","title":"\u9898\u76ee:"},{"location":"1237.html#_2","text":"\u8f93\u5165\uff1afunction_id = 1, z = 5 \u8f93\u51fa\uff1a[[1,4],[2,3],[3,2],[4,1]] \u89e3\u91ca\uff1afunction_id = 1 \u6697\u542b\u7684\u51fd\u6570\u5f0f\u5b50\u4e3a f(x, y) = x + y \u4ee5\u4e0b x \u548c y \u6ee1\u8db3 f(x, y) \u7b49\u4e8e 5\uff1a x=1, y=4 -> f(1, 4) = 1 + 4 = 5 x=2, y=3 -> f(2, 3) = 2 + 3 = 5 x=3, y=2 -> f(3, 2) = 3 + 2 = 5 x=4, y=1 -> f(4, 1) = 4 + 1 = 5","title":"\u793a\u4f8b:"},{"location":"1237.html#_3","text":"1 <= function_id <= 9 1 <= z <= 100 \u9898\u76ee\u4fdd\u8bc1 f(x, y) == z \u7684\u89e3\u5904\u4e8e 1 <= x, y <= 1000 \u7684\u8303\u56f4\u5185\u3002 \u5728 1 <= x, y <= 1000 \u7684\u524d\u63d0\u4e0b\uff0c\u9898\u76ee\u4fdd\u8bc1 f(x, y) \u662f\u4e00\u4e2a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002","title":"\u63d0\u793a"},{"location":"1237.html#_4","text":"\u901a\u8fc7 customfunction.f(x ,y) \u8c03\u7528\u5373\u53ef \u76f8\u5f53\u4e8e240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II \u4e2d,\u641c\u7d22\u8fd9\u6837\u7684\u884c\u5217\u9012\u589e\u7684\u8868\u683c f(1,1) f(1,2) .... f(1, m) f(2, 1) .......... f(2, m) .... f(n,1) ............f(m, n)","title":"\u601d\u8def"},{"location":"1237.html#_5","text":"//\u6bcf\u4e00\u884c\u8fdb\u884c\u4e8c\u5206\u67e5\u627e t \u76f8\u5f53\u4e8e x\uff0c\u6211\u4eec\u641c\u7d22 y class Solution { public: vector<vector<int>> findSolution(CustomFunction& customfunction, int z) { vector<vector<int>> res; for(int t = 1; t < 1001; ++t) { //\u884c\u9012\u589e,\u56e0\u6b64 \u4e8c\u53c9\u641c\u7d22 int l = 1, r = 1001;//\u5de6\u95ed\uff0c\u53f3\u5f00\u533a\u95f4 while(l < r) { int mid = (r + l) / 2 ; int tmp = customfunction.f(t, mid); if( tmp < z) { l = mid + 1; } else if(tmp >= z) { r = mid; } } if(customfunction.f(t, l) == z) res.push_back({t, l}); } return res; } }; class Solution { public: vector<vector<int>> findSolution(CustomFunction& customfunction, int z) { vector<vector<int>> res; for(int t = 1; t < 1001; ++t) { //\u884c\u9012\u589e,\u56e0\u6b64 \u4e8c\u53c9\u641c\u7d22 int l = 1, r = 1001;//\u5de6\u95ed\uff0c\u53f3\u5f00\u533a\u95f4 while(l < r) { int mid = (r +l) / 2 ; int tmp = customfunction.f(t,mid); if( tmp < z) { l = mid + 1; } else if(tmp > z) { r = mid; } else { res.push_back({t, mid}); break; } } } return res; } }; //\u5bf9\u6574\u4e2a\u6570\u7ec4\u8fdb\u884c\u641c\u7d22 class Solution { public: vector<vector<int>> findSolution(CustomFunction& customfunction, int z) { int x = 1000, y = 1; vector<vector<int>> res; while(x > 0 && y > 0) { int tmp = customfunction.f(x, y); if(tmp > z) --x; else if(tmp < z) ++y; else { res.push_back({x, y}); --x; } } return res; } };","title":"\u89e3\u7b54:"},{"location":"1237.html#_6","text":"\u5229\u7528\u63d0\u793a\u4e2d\u7684 1 <= x, y <= 1000 \u4f5c\u4e3a\u7a0b\u5e8f\u7684\u6761\u4ef6\u4e4b\u4e00","title":"\u603b\u7ed3"},{"location":"1248.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k\u3002 \u5982\u679c\u67d0\u4e2a \u8fde\u7eed \u5b50\u6570\u7ec4\u4e2d\u6070\u597d\u6709 k \u4e2a\u5947\u6570\u6570\u5b57\uff0c\u6211\u4eec\u5c31\u8ba4\u4e3a\u8fd9\u4e2a\u5b50\u6570\u7ec4\u662f\u300c\u4f18\u7f8e\u5b50\u6570\u7ec4\u300d\u3002 \u8bf7\u8fd4\u56de\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u300c\u4f18\u7f8e\u5b50\u6570\u7ec4\u300d\u7684\u6570\u76ee\u3002 \u793a\u4f8b: \u8f93\u5165\uff1anums = [1,1,2,1,1], k = 3 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u5305\u542b 3 \u4e2a\u5947\u6570\u7684\u5b50\u6570\u7ec4\u662f [1,1,2,1] \u548c [1,2,1,1] \u3002 \u601d\u8def \u524d\u7f00\u548c\u548c hash \u8868 \u901a\u5e38\u7684pre[i], \u7edf\u8ba1\u7684\u662f\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570,\u800c\u8fd9\u91ccpre[i]\u8868\u793a\u7684\u662f: \u4ee5 i \u7ed3\u5c3e\u7684\u300c\u4f18\u7f8e\u5b50\u6570\u7ec4\u300d\u4e2a\u6570\u3002\u56e0\u4e3a\u6709pre[j\u22121]==pre[i]\u2212k, \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u52a0\u4e0a pre[j-1]\u7684\u4e2a\u6570\u5373\u53ef,\u6709\u591a\u5c11pre[j-1] ,\u90a3\u4e48\u4e00\u5b9a\u6709pre[j-1] \u4e2a\u5b50\u533a\u95f4 \u6807\u51c6\u7b54\u6848 class Solution { public: int numberOfSubarrays(vector<int>& nums, int k) { int n = (int)nums.size(); vector<int> cnt(n+1, 0); int odd = 0, ans = 0;// \u5947\u6570\u7684\u4e2a\u6570 cnt[0] = 1; //cnt[0] == 1 for (int i = 0; i < n; ++i) { odd += nums[i] & 1; ans += odd >= k ? cnt[odd - k] : 0; cnt[odd] += 1; } return ans; } }; class Solution { public : int numberOfSubarrays(vector<int>& nums, int k) { // \u6570\u7ec4 pre \u7684\u4e0b\u6807\u662f\u524d\u7f00\u548c\uff08\u5373\u5f53\u524d\u5947\u6570\u7684\u4e2a\u6570\uff09\uff0c\u503c\u662f\u524d\u7f00\u548c\u7684\u4e2a\u6570\u3002 vector<int> pre(nums.size() + 1, 0); pre[0] = 1; int res = 0, sum = 0; for(int num : nums ) { sum += num & 1; pre[sum] ++; if(sum >= k) { res += pre[sum - k]; } } for (int num: nums) { sum += num & 1; pre[sum]++; if (sum >= k) { res += pre[sum - k]; } } return res; } }; \u603b\u7ed3 - \u8fd0\u7528\u4f4d\u8fd0\u7b97 &(\u5f53\u90fd\u4e3a 1\u65f6\u624d\u4e3a1)\uff0c\u5224\u65ad\u5947\u5076\u6027","title":"1248.\u7edf\u8ba1\u300c\u4f18\u7f8e\u5b50\u6570\u7ec4\u300d"},{"location":"1248.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k\u3002 \u5982\u679c\u67d0\u4e2a \u8fde\u7eed \u5b50\u6570\u7ec4\u4e2d\u6070\u597d\u6709 k \u4e2a\u5947\u6570\u6570\u5b57\uff0c\u6211\u4eec\u5c31\u8ba4\u4e3a\u8fd9\u4e2a\u5b50\u6570\u7ec4\u662f\u300c\u4f18\u7f8e\u5b50\u6570\u7ec4\u300d\u3002 \u8bf7\u8fd4\u56de\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u300c\u4f18\u7f8e\u5b50\u6570\u7ec4\u300d\u7684\u6570\u76ee\u3002","title":"\u9898\u76ee:"},{"location":"1248.html#_2","text":"\u8f93\u5165\uff1anums = [1,1,2,1,1], k = 3 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u5305\u542b 3 \u4e2a\u5947\u6570\u7684\u5b50\u6570\u7ec4\u662f [1,1,2,1] \u548c [1,2,1,1] \u3002","title":"\u793a\u4f8b:"},{"location":"1248.html#_3","text":"\u524d\u7f00\u548c\u548c hash \u8868 \u901a\u5e38\u7684pre[i], \u7edf\u8ba1\u7684\u662f\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570,\u800c\u8fd9\u91ccpre[i]\u8868\u793a\u7684\u662f: \u4ee5 i \u7ed3\u5c3e\u7684\u300c\u4f18\u7f8e\u5b50\u6570\u7ec4\u300d\u4e2a\u6570\u3002\u56e0\u4e3a\u6709pre[j\u22121]==pre[i]\u2212k, \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u52a0\u4e0a pre[j-1]\u7684\u4e2a\u6570\u5373\u53ef,\u6709\u591a\u5c11pre[j-1] ,\u90a3\u4e48\u4e00\u5b9a\u6709pre[j-1] \u4e2a\u5b50\u533a\u95f4","title":"\u601d\u8def"},{"location":"1248.html#_4","text":"class Solution { public: int numberOfSubarrays(vector<int>& nums, int k) { int n = (int)nums.size(); vector<int> cnt(n+1, 0); int odd = 0, ans = 0;// \u5947\u6570\u7684\u4e2a\u6570 cnt[0] = 1; //cnt[0] == 1 for (int i = 0; i < n; ++i) { odd += nums[i] & 1; ans += odd >= k ? cnt[odd - k] : 0; cnt[odd] += 1; } return ans; } }; class Solution { public : int numberOfSubarrays(vector<int>& nums, int k) { // \u6570\u7ec4 pre \u7684\u4e0b\u6807\u662f\u524d\u7f00\u548c\uff08\u5373\u5f53\u524d\u5947\u6570\u7684\u4e2a\u6570\uff09\uff0c\u503c\u662f\u524d\u7f00\u548c\u7684\u4e2a\u6570\u3002 vector<int> pre(nums.size() + 1, 0); pre[0] = 1; int res = 0, sum = 0; for(int num : nums ) { sum += num & 1; pre[sum] ++; if(sum >= k) { res += pre[sum - k]; } } for (int num: nums) { sum += num & 1; pre[sum]++; if (sum >= k) { res += pre[sum - k]; } } return res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1248.html#_5","text":"- \u8fd0\u7528\u4f4d\u8fd0\u7b97 &(\u5f53\u90fd\u4e3a 1\u65f6\u624d\u4e3a1)\uff0c\u5224\u65ad\u5947\u5076\u6027","title":"\u603b\u7ed3"},{"location":"1249.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u7531 '('\u3001')' \u548c\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 s\u3002 \u4f60\u9700\u8981\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\u6700\u5c11\u6570\u76ee\u7684 '(' \u6216\u8005 ')' \uff08\u53ef\u4ee5\u5220\u9664\u4efb\u610f\u4f4d\u7f6e\u7684\u62ec\u53f7)\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u300c\u62ec\u53f7\u5b57\u7b26\u4e32\u300d\u6709\u6548\u3002 \u8bf7\u8fd4\u56de\u4efb\u610f\u4e00\u4e2a\u5408\u6cd5\u5b57\u7b26\u4e32\u3002 \u6709\u6548\u300c\u62ec\u53f7\u5b57\u7b26\u4e32\u300d\u5e94\u5f53\u7b26\u5408\u4ee5\u4e0b \u4efb\u610f\u4e00\u6761 \u8981\u6c42\uff1a \u7a7a\u5b57\u7b26\u4e32\u6216\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 \u53ef\u4ee5\u88ab\u5199\u4f5c AB\uff08A \u8fde\u63a5 B\uff09\u7684\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d A \u548c B \u90fd\u662f\u6709\u6548\u300c\u62ec\u53f7\u5b57\u7b26\u4e32\u300d \u53ef\u4ee5\u88ab\u5199\u4f5c (A) \u7684\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d A \u662f\u4e00\u4e2a\u6709\u6548\u7684\u300c\u62ec\u53f7\u5b57\u7b26\u4e32\u300d \u793a\u4f8b: > \u8f93\u51fa\uff1as = \"lee(t(c)o)de)\" > \u8f93\u51fa\uff1a\"lee(t(c)o)de\" > \u89e3\u91ca\uff1a\"lee(t(co)de)\" , \"lee(t(c)ode)\" \u4e5f\u662f\u4e00\u4e2a\u53ef\u884c\u7b54\u6848\u3002 \u89e3\u7b54: class Solution { public: string minRemoveToMakeValid(string s) { stack<char> sta; size_t i = 0; for(const char c : s) { if(isalpha(c)){ sta.push(c); } else if( c == '(') { sta.push(c); i ++ ; } else if( c == ')'){ if( i > 0){ sta.push(c); i --; } //else continue; } } string ret; while(!sta.empty()) { char c = sta.top(); if( c == '(' && i !=0) { sta.pop(); i --; continue; } sta.pop(); ret.push_back(c); } reverse(ret.begin(), ret.end()); return ret; } };","title":1249},{"location":"1249.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u7531 '('\u3001')' \u548c\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 s\u3002 \u4f60\u9700\u8981\u4ece\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\u6700\u5c11\u6570\u76ee\u7684 '(' \u6216\u8005 ')' \uff08\u53ef\u4ee5\u5220\u9664\u4efb\u610f\u4f4d\u7f6e\u7684\u62ec\u53f7)\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u300c\u62ec\u53f7\u5b57\u7b26\u4e32\u300d\u6709\u6548\u3002 \u8bf7\u8fd4\u56de\u4efb\u610f\u4e00\u4e2a\u5408\u6cd5\u5b57\u7b26\u4e32\u3002 \u6709\u6548\u300c\u62ec\u53f7\u5b57\u7b26\u4e32\u300d\u5e94\u5f53\u7b26\u5408\u4ee5\u4e0b \u4efb\u610f\u4e00\u6761 \u8981\u6c42\uff1a \u7a7a\u5b57\u7b26\u4e32\u6216\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 \u53ef\u4ee5\u88ab\u5199\u4f5c AB\uff08A \u8fde\u63a5 B\uff09\u7684\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d A \u548c B \u90fd\u662f\u6709\u6548\u300c\u62ec\u53f7\u5b57\u7b26\u4e32\u300d \u53ef\u4ee5\u88ab\u5199\u4f5c (A) \u7684\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d A \u662f\u4e00\u4e2a\u6709\u6548\u7684\u300c\u62ec\u53f7\u5b57\u7b26\u4e32\u300d","title":"\u9898\u76ee:"},{"location":"1249.html#_2","text":"> \u8f93\u51fa\uff1as = \"lee(t(c)o)de)\" > \u8f93\u51fa\uff1a\"lee(t(c)o)de\" > \u89e3\u91ca\uff1a\"lee(t(co)de)\" , \"lee(t(c)ode)\" \u4e5f\u662f\u4e00\u4e2a\u53ef\u884c\u7b54\u6848\u3002","title":"\u793a\u4f8b:"},{"location":"1249.html#_3","text":"class Solution { public: string minRemoveToMakeValid(string s) { stack<char> sta; size_t i = 0; for(const char c : s) { if(isalpha(c)){ sta.push(c); } else if( c == '(') { sta.push(c); i ++ ; } else if( c == ')'){ if( i > 0){ sta.push(c); i --; } //else continue; } } string ret; while(!sta.empty()) { char c = sta.top(); if( c == '(' && i !=0) { sta.pop(); i --; continue; } sta.pop(); ret.push_back(c); } reverse(ret.begin(), ret.end()); return ret; } };","title":"\u89e3\u7b54:"},{"location":"128.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u51fa\u6570\u5b57\u8fde\u7eed\u7684\u6700\u957f\u5e8f\u5217\uff08\u4e0d\u8981\u6c42\u5e8f\u5217\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u8fde\u7eed\uff09\u7684\u957f\u5ea6\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [100,4,200,1,3,2] >\u8f93\u51fa\uff1a4 >\u89e3\u91ca\uff1a\u6700\u957f\u6570\u5b57\u8fde\u7eed\u5e8f\u5217\u662f [1, 2, 3, 4]\u3002\u5b83\u7684\u957f\u5ea6\u4e3a 4\u3002 \u601d\u8def \u5e76\u67e5\u96c6 \u5bf9\u4e8e\u5f53\u524d\u5143\u7d20 currentNum \u5982\u679c currentNum - 1 \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u641c\u7d22\u67e5\u770b\u5f53\u524d\u5e8f\u5217\u6709\u591a\u957f \u5426\u5219\uff0c\u8df3\u8fc7\u5f53\u524d\u7684\u5143\u7d20\uff0c\u5f53\u51fa\u73b0 \u5143\u7d20 <= currentNum - 1 \u65f6\u518d\u8fdb\u884c\u641c\u7d22 \u6807\u51c6\u7b54\u6848 class Solution { public: int longestConsecutive(vector<int>& nums) { //hash \u8868,\u4f7f\u7528\u7684\u662f unordered_set \u800c\u4e0d\u662f set unordered_set<int> num_set; for(int num : nums) { num_set.insert(num); } int res = 0; //\u6700\u957f\u7684\u957f\u5ea6 for(int num: num_set) { if(num_set.find(num - 1) == num_set.end()) { // x - 1 \u4e0d\u5b58\u5728 int curentNum = num; // \u5f53\u524d\u5143\u7d20 int current_len = 1; //\u5f53\u524d\u7684\u957f\u5ea6 while(num_set.find(curentNum + 1) != num_set.end()){ curentNum ++; current_len ++; //\u957f\u5ea6\u52a0\u4e00 } res = max(res, current_len); } } return res; } };","title":"128.\u6700\u957f\u8fde\u7eed\u5e8f\u5217"},{"location":"128.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u51fa\u6570\u5b57\u8fde\u7eed\u7684\u6700\u957f\u5e8f\u5217\uff08\u4e0d\u8981\u6c42\u5e8f\u5217\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u8fde\u7eed\uff09\u7684\u957f\u5ea6\u3002","title":"\u9898\u76ee:"},{"location":"128.html#_2","text":">\u8f93\u5165\uff1anums = [100,4,200,1,3,2] >\u8f93\u51fa\uff1a4 >\u89e3\u91ca\uff1a\u6700\u957f\u6570\u5b57\u8fde\u7eed\u5e8f\u5217\u662f [1, 2, 3, 4]\u3002\u5b83\u7684\u957f\u5ea6\u4e3a 4\u3002","title":"\u793a\u4f8b:"},{"location":"128.html#_3","text":"\u5e76\u67e5\u96c6 \u5bf9\u4e8e\u5f53\u524d\u5143\u7d20 currentNum \u5982\u679c currentNum - 1 \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u641c\u7d22\u67e5\u770b\u5f53\u524d\u5e8f\u5217\u6709\u591a\u957f \u5426\u5219\uff0c\u8df3\u8fc7\u5f53\u524d\u7684\u5143\u7d20\uff0c\u5f53\u51fa\u73b0 \u5143\u7d20 <= currentNum - 1 \u65f6\u518d\u8fdb\u884c\u641c\u7d22","title":"\u601d\u8def"},{"location":"128.html#_4","text":"class Solution { public: int longestConsecutive(vector<int>& nums) { //hash \u8868,\u4f7f\u7528\u7684\u662f unordered_set \u800c\u4e0d\u662f set unordered_set<int> num_set; for(int num : nums) { num_set.insert(num); } int res = 0; //\u6700\u957f\u7684\u957f\u5ea6 for(int num: num_set) { if(num_set.find(num - 1) == num_set.end()) { // x - 1 \u4e0d\u5b58\u5728 int curentNum = num; // \u5f53\u524d\u5143\u7d20 int current_len = 1; //\u5f53\u524d\u7684\u957f\u5ea6 while(num_set.find(curentNum + 1) != num_set.end()){ curentNum ++; current_len ++; //\u957f\u5ea6\u52a0\u4e00 } res = max(res, current_len); } } return res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1288.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u533a\u95f4\u5217\u8868\uff0c\u8bf7\u4f60\u5220\u9664\u5217\u8868\u4e2d\u88ab\u5176\u4ed6\u533a\u95f4\u6240\u8986\u76d6\u7684\u533a\u95f4\u3002 \u53ea\u6709\u5f53 c <= a \u4e14 b <= d \u65f6\uff0c\u6211\u4eec\u624d\u8ba4\u4e3a\u533a\u95f4 [a,b) \u88ab\u533a\u95f4 [c,d) \u8986\u76d6\u3002 \u5728\u5b8c\u6210\u6240\u6709\u5220\u9664\u64cd\u4f5c\u540e\uff0c\u8bf7\u4f60\u8fd4\u56de\u5217\u8868\u4e2d\u5269\u4f59\u533a\u95f4\u7684\u6570\u76ee \u793a\u4f8b: >\u8f93\u5165\uff1aintervals = [[1,4],[3,6],[2,8]] >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u533a\u95f4 [3,6] \u88ab\u533a\u95f4 [2,8] \u8986\u76d6\uff0c\u6240\u4ee5\u5b83\u88ab\u5220\u9664\u4e86\u3002 \u601d\u8def \u8d2a\u5fc3\u7b97\u6cd5 \u6807\u51c6\u7b54\u6848 class Solution { public: int removeCoveredIntervals(vector<vector<int>>& intervals) { vector<vector<int>> merged; sort(intervals.begin(), intervals.end()); //\u6392\u5e8f merged.push_back({intervals[0][0],intervals[0][1]}); for(size_t i =1; i<intervals.size(); ++i) { int L = intervals[i][0]; int R = intervals[i][1]; if(merged.back()[0]<=L && R<=merged.back()[1] ) { continue; }else if(L<=merged.back()[0] && merged.back()[1]<=R){ merged.back()[0] = L; merged.back()[1] = R; } else { //\u4e0d\u80fd\u88ab\u8986\u76d6 merged.push_back({L,R}); } } return merged.size(); } }; \u603b\u7ed3","title":1288},{"location":"1288.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u533a\u95f4\u5217\u8868\uff0c\u8bf7\u4f60\u5220\u9664\u5217\u8868\u4e2d\u88ab\u5176\u4ed6\u533a\u95f4\u6240\u8986\u76d6\u7684\u533a\u95f4\u3002 \u53ea\u6709\u5f53 c <= a \u4e14 b <= d \u65f6\uff0c\u6211\u4eec\u624d\u8ba4\u4e3a\u533a\u95f4 [a,b) \u88ab\u533a\u95f4 [c,d) \u8986\u76d6\u3002 \u5728\u5b8c\u6210\u6240\u6709\u5220\u9664\u64cd\u4f5c\u540e\uff0c\u8bf7\u4f60\u8fd4\u56de\u5217\u8868\u4e2d\u5269\u4f59\u533a\u95f4\u7684\u6570\u76ee","title":"\u9898\u76ee:"},{"location":"1288.html#_2","text":">\u8f93\u5165\uff1aintervals = [[1,4],[3,6],[2,8]] >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u533a\u95f4 [3,6] \u88ab\u533a\u95f4 [2,8] \u8986\u76d6\uff0c\u6240\u4ee5\u5b83\u88ab\u5220\u9664\u4e86\u3002","title":"\u793a\u4f8b:"},{"location":"1288.html#_3","text":"\u8d2a\u5fc3\u7b97\u6cd5","title":"\u601d\u8def"},{"location":"1288.html#_4","text":"class Solution { public: int removeCoveredIntervals(vector<vector<int>>& intervals) { vector<vector<int>> merged; sort(intervals.begin(), intervals.end()); //\u6392\u5e8f merged.push_back({intervals[0][0],intervals[0][1]}); for(size_t i =1; i<intervals.size(); ++i) { int L = intervals[i][0]; int R = intervals[i][1]; if(merged.back()[0]<=L && R<=merged.back()[1] ) { continue; }else if(L<=merged.back()[0] && merged.back()[1]<=R){ merged.back()[0] = L; merged.back()[1] = R; } else { //\u4e0d\u80fd\u88ab\u8986\u76d6 merged.push_back({L,R}); } } return merged.size(); } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1288.html#_5","text":"","title":"\u603b\u7ed3"},{"location":"1305.html","text":"\u9898\u76ee: \u7ed9\u4f60 root1 \u548c root2 \u8fd9\u4e24\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b \u4e24\u68f5\u6811 \u4e2d\u7684\u6240\u6709\u6574\u6570\u5e76\u6309 \u5347\u5e8f \u6392\u5e8f\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1aroot1 = [2,1,4], root2 = [1,0,3] >\u8f93\u51fa\uff1a[0,1,1,2,3,4] \u601d\u8def 1. \u901a\u8fc7vector\u7684sort\u5b8c\u6210 2. 1)\u6ca1\u6709\u5229\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u5e8f\u8fd9\u4e00\u6761\u4ef6\uff0c\u4e14Gettree\u662f\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u5b9e\u73b0\u7684. \u89e3\u7b541: /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ void GetTree(const TreeNode* root, vector<int>& res) { if(root == NULL) return ; if(root->left !=NULL) GetTree(root->left, res); res.push_back(root->val); if(root->right!=NULL) GetTree(root->right, res); } class Solution { public: vector<int> getAllElements(TreeNode* root1, TreeNode* root2) { vector<int> res; GetTree(root1, res); GetTree(root2, res); sort(res.begin(), res.end()); return res; } }; \u89e3\u7b54\u4e8c //\u66f4\u6539\u4e3a\u4f7f\u7528\u6808\u6765\u5b9e\u73b0 class Solution { public: vector<int> getAllElements(TreeNode* root1, TreeNode* root2) { vector<int> res; stack<TreeNode*> s; TreeNode* p = root1; while (!s.empty() || p!=NULL) { while(p!=NULL){ s.push(p); p = p->left; } p = s.top(); s.pop(); res.push_back(p->val); p = p->right; } p =root2; while (!s.empty() || p!=NULL) { while(p!=NULL){ s.push(p); p = p->left; } p = s.top(); s.pop(); res.push_back(p->val); p = p->right; } sort(res.begin(), res.end()); return res; } }; \u89e3\u7b543 // \u89e3\u7b543 \u4e2d\u5e8f\u904d\u5386 + \u5f52\u5e76\u6392\u5e8f class Solution { public: void GetTree(TreeNode* node, vector<int>& v) { if (!node) { return; } GetTree(node->left, v); v.push_back(node->val); GetTree(node->right, v); } vector<int> getAllElements(TreeNode* root1, TreeNode* root2) { vector<int> v1, v2; GetTree(root1, v1); GetTree(root2, v2); vector<int> ans; int i = 0, j = 0; while(i<v1.size() || j<v2.size()) { if(i<v1.size() && (j==v2.size() ||v1[i]<v2[j])){ ans.push_back(v1[i++]); } else { ans.push_back(v2[j++]); } } return ans; } }; \u603b\u7ed3 - \u5bf9\u4e8e\u4e8c\u53c9\u6811\u7684\u975e\u9012\u5f52\u5b9e\u73b0\uff0c\u4e0d\u719f\u6089 - \u65b9\u6cd5\u5bf9\u4e8e\u4e24\u4e2a\u6709\u5e8fvector\u7684\u5408\u5e76","title":1305},{"location":"1305.html#_1","text":"\u7ed9\u4f60 root1 \u548c root2 \u8fd9\u4e24\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b \u4e24\u68f5\u6811 \u4e2d\u7684\u6240\u6709\u6574\u6570\u5e76\u6309 \u5347\u5e8f \u6392\u5e8f\u3002","title":"\u9898\u76ee:"},{"location":"1305.html#_2","text":">\u8f93\u5165\uff1aroot1 = [2,1,4], root2 = [1,0,3] >\u8f93\u51fa\uff1a[0,1,1,2,3,4]","title":"\u793a\u4f8b:"},{"location":"1305.html#_3","text":"1. \u901a\u8fc7vector\u7684sort\u5b8c\u6210 2. 1)\u6ca1\u6709\u5229\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u5e8f\u8fd9\u4e00\u6761\u4ef6\uff0c\u4e14Gettree\u662f\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u5b9e\u73b0\u7684.","title":"\u601d\u8def"},{"location":"1305.html#1","text":"/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ void GetTree(const TreeNode* root, vector<int>& res) { if(root == NULL) return ; if(root->left !=NULL) GetTree(root->left, res); res.push_back(root->val); if(root->right!=NULL) GetTree(root->right, res); } class Solution { public: vector<int> getAllElements(TreeNode* root1, TreeNode* root2) { vector<int> res; GetTree(root1, res); GetTree(root2, res); sort(res.begin(), res.end()); return res; } };","title":"\u89e3\u7b541:"},{"location":"1305.html#_4","text":"//\u66f4\u6539\u4e3a\u4f7f\u7528\u6808\u6765\u5b9e\u73b0 class Solution { public: vector<int> getAllElements(TreeNode* root1, TreeNode* root2) { vector<int> res; stack<TreeNode*> s; TreeNode* p = root1; while (!s.empty() || p!=NULL) { while(p!=NULL){ s.push(p); p = p->left; } p = s.top(); s.pop(); res.push_back(p->val); p = p->right; } p =root2; while (!s.empty() || p!=NULL) { while(p!=NULL){ s.push(p); p = p->left; } p = s.top(); s.pop(); res.push_back(p->val); p = p->right; } sort(res.begin(), res.end()); return res; } };","title":"\u89e3\u7b54\u4e8c"},{"location":"1305.html#3","text":"// \u89e3\u7b543 \u4e2d\u5e8f\u904d\u5386 + \u5f52\u5e76\u6392\u5e8f class Solution { public: void GetTree(TreeNode* node, vector<int>& v) { if (!node) { return; } GetTree(node->left, v); v.push_back(node->val); GetTree(node->right, v); } vector<int> getAllElements(TreeNode* root1, TreeNode* root2) { vector<int> v1, v2; GetTree(root1, v1); GetTree(root2, v2); vector<int> ans; int i = 0, j = 0; while(i<v1.size() || j<v2.size()) { if(i<v1.size() && (j==v2.size() ||v1[i]<v2[j])){ ans.push_back(v1[i++]); } else { ans.push_back(v2[j++]); } } return ans; } };","title":"\u89e3\u7b543"},{"location":"1305.html#_5","text":"- \u5bf9\u4e8e\u4e8c\u53c9\u6811\u7684\u975e\u9012\u5f52\u5b9e\u73b0\uff0c\u4e0d\u719f\u6089 - \u65b9\u6cd5\u5bf9\u4e8e\u4e24\u4e2a\u6709\u5e8fvector\u7684\u5408\u5e76","title":"\u603b\u7ed3"},{"location":"133.html","text":"\u9898\u76ee: \u7ed9\u4f60\u65e0\u5411 \u8fde\u901a \u56fe\u4e2d\u4e00\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8bf7\u4f60\u8fd4\u56de\u8be5\u56fe\u7684 \u6df1\u62f7\u8d1d\uff08\u514b\u9686\uff09\u3002 \u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u5b83\u7684\u503c val\uff08int\uff09 \u548c\u5176\u90bb\u5c45\u7684\u5217\u8868 \u601d\u8def \u5bf9\u4e8e\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u6539\u8fdb \u6807\u51c6\u7b54\u6848 /* // Definition for a Node. class Node { public: int val; vector<Node*> neighbors; Node() { val = 0; neighbors = vector<Node*>(); } Node(int _val) { val = _val; neighbors = vector<Node*>(); } Node(int _val, vector<Node*> _neighbors) { val = _val; neighbors = _neighbors; } }; */ class Solution { private: Node* seen[101]= {nullptr}; //\u6807\u8bb0\u662f\u5426\u8bbf\u95ee\u8fc7 public: Node* cloneGraph(Node* node) { if(node == nullptr ) return nullptr; if(seen[node->val] != nullptr) return seen[node->val]; Node* res = new Node(node ->val);//\u590d\u5236\u5f53\u524d\u8282\u70b9 seen[node->val] = res; //\u4fdd\u5b58\u81ea\u5df1 for(Node* i : node->neighbors) { //if(seen[i->val] == nullptr) { res->neighbors.push_back( cloneGraph(i) ); //} } return res; } }; \u603b\u7ed3","title":"\u9898\u76ee:"},{"location":"133.html#_1","text":"\u7ed9\u4f60\u65e0\u5411 \u8fde\u901a \u56fe\u4e2d\u4e00\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8bf7\u4f60\u8fd4\u56de\u8be5\u56fe\u7684 \u6df1\u62f7\u8d1d\uff08\u514b\u9686\uff09\u3002 \u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u5b83\u7684\u503c val\uff08int\uff09 \u548c\u5176\u90bb\u5c45\u7684\u5217\u8868","title":"\u9898\u76ee:"},{"location":"133.html#_2","text":"\u5bf9\u4e8e\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u6539\u8fdb","title":"\u601d\u8def"},{"location":"133.html#_3","text":"/* // Definition for a Node. class Node { public: int val; vector<Node*> neighbors; Node() { val = 0; neighbors = vector<Node*>(); } Node(int _val) { val = _val; neighbors = vector<Node*>(); } Node(int _val, vector<Node*> _neighbors) { val = _val; neighbors = _neighbors; } }; */ class Solution { private: Node* seen[101]= {nullptr}; //\u6807\u8bb0\u662f\u5426\u8bbf\u95ee\u8fc7 public: Node* cloneGraph(Node* node) { if(node == nullptr ) return nullptr; if(seen[node->val] != nullptr) return seen[node->val]; Node* res = new Node(node ->val);//\u590d\u5236\u5f53\u524d\u8282\u70b9 seen[node->val] = res; //\u4fdd\u5b58\u81ea\u5df1 for(Node* i : node->neighbors) { //if(seen[i->val] == nullptr) { res->neighbors.push_back( cloneGraph(i) ); //} } return res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"133.html#_4","text":"","title":"\u603b\u7ed3"},{"location":"1353.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 events\uff0c\u5176\u4e2d events[i] = [startDayi, endDayi] \uff0c\u8868\u793a\u4f1a\u8bae i \u5f00\u59cb\u4e8e startDayi \uff0c\u7ed3\u675f\u4e8e endDayi \u3002 \u4f60\u53ef\u4ee5\u5728\u6ee1\u8db3 startDayi <= d <= endDayi \u4e2d\u7684\u4efb\u610f\u4e00\u5929 d \u53c2\u52a0\u4f1a\u8bae i \u3002\u6ce8\u610f\uff0c\u4e00\u5929\u53ea\u80fd\u53c2\u52a0\u4e00\u4e2a\u4f1a\u8bae\u3002 \u8bf7\u4f60\u8fd4\u56de\u4f60\u53ef\u4ee5\u53c2\u52a0\u7684 \u6700\u5927 \u4f1a\u8bae\u6570\u76ee\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1aevents= [[1,2],[2,3],[3,4],[1,2]] >\u8f93\u51fa\uff1a4 \u601d\u8def \u8d2a\u5fc3\u7b97\u6cd5,\u4f18\u5148\u9009\u62e9 \u5148\u7ed3\u675f\u7684(\u7ed3\u675f\u5929\u6570\u6700\u5c0f)\u7684\u5143\u7d20 \u96be\u70b9\u5728\u4e8e\u5bf9\u4e8e\u8d2a\u5fc3\u7b97\u6cd5\u7684\u4f18\u5316\u95ee\u9898. \u89e3\u7b54: //\u8d85\u65f6 class Solution { public: int maxEvents(vector<vector<int>>& nums) { sort(nums.begin(), nums.end(), [](vector<int>& a, vector<int>& b){ return a[1] < b[1]; }); int res = 0; char seen[100001] = {0}; //\u8bb0\u5f55\u5f53\u5929\u662f\u5426\u53c2\u52a0\u4f1a\u8bae for(const auto& e : nums) { // \u904d\u5386 nums // \u4ece\u5f00\u59cb\u5929\u6570\u904d\u5386\u5230\u7ed3\u675f\u5929\u6570,\u67e5\u770b\u662f\u5426\u8fd8\u6709\u6ca1\u6709\u7a7a\u95f2\u5929 for(int i = e[0], i <= e[1]; ++i) { if(seen[i]) continue; // ++seen[i]; ++ res; break; } } return res; } }; \u6807\u51c6\u7b54\u6848 //\u4e0d\u96be\u5206\u6790\u51fa,\u5bfc\u81f4\u4e0a\u9762\u7b97\u6cd5\u7f13\u6162\u7684\u56e0\u7d20\u662f, \u53cc\u91cd\u7684for \u5faa\u73af,\u66f4\u8fd1\u4e00\u6b65\u7684\u6765\u8bf4,\u662f\u5185\u5c42\u5faa\u73af(\u8fd9\u4e00\u6b65\u5faa\u73af\u5728\u4e8e\u627e\u51fa\u6700\u65e9\u7684\u7a7a\u95f2\u5929\u6570) // \u6211\u4eec\u4f7f\u7528 \u4e8c\u5206\u67e5\u627e\u6811\u6765\u52a0\u901f\u8fd9\u4e2a\u8fc7\u7a0b() //\u8fd8\u662f\u6162 class Solution { public: int maxEvents(vector<vector<int>>& nums) { sort(nums.begin(), nums.end(), [](vector<int>& a, vector<int>& b){ return a[1] < b[1]; }); int res = 0; int min_d = INT32_MAX; int max_d = INT32_MIN; // \u627e\u5230\u80fd\u591f\u5f00\u4f1a\u7684\u6574\u4e2a\u533a\u95f4 for(const vector<int>& e : nums) { max_d = max_d > e[1] ? max_d : e[1]; min_d = min_d < e[0] ? min_d : e[0]; } // \u5bf9\u4e8e BST \u8fdb\u884c \u586b\u5145 vector<int> tmp(max_d - min_d +1); // \u7528 min_d , min_d +1 ,min_d +2 std::iota(tmp.begin(), tmp.end(), min_d); set<int> s(tmp.begin(), tmp.end()); for(const vector<int>& e : nums) { // \u904d\u5386 nums //\u67e5\u627e beginday auto it = s.lower_bound(e[0]); if(it == s.end() || *it > e[1]) continue; s.erase(it); //\u53c2\u52a0\u8fd9\u5929\u7684\u4f1a\u8bae ++ res; } return res; } }; \u82b1\u82b1\u9171 LeetCode 1353 \u603b\u7ed3 - std::iota \u7b97\u6cd5\u7684\u4f7f\u7528 - \u7528 BST \u6765\u52a0\u901f\u67e5\u627e\u8fc7\u7a0b","title":1353},{"location":"1353.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 events\uff0c\u5176\u4e2d events[i] = [startDayi, endDayi] \uff0c\u8868\u793a\u4f1a\u8bae i \u5f00\u59cb\u4e8e startDayi \uff0c\u7ed3\u675f\u4e8e endDayi \u3002 \u4f60\u53ef\u4ee5\u5728\u6ee1\u8db3 startDayi <= d <= endDayi \u4e2d\u7684\u4efb\u610f\u4e00\u5929 d \u53c2\u52a0\u4f1a\u8bae i \u3002\u6ce8\u610f\uff0c\u4e00\u5929\u53ea\u80fd\u53c2\u52a0\u4e00\u4e2a\u4f1a\u8bae\u3002 \u8bf7\u4f60\u8fd4\u56de\u4f60\u53ef\u4ee5\u53c2\u52a0\u7684 \u6700\u5927 \u4f1a\u8bae\u6570\u76ee\u3002","title":"\u9898\u76ee:"},{"location":"1353.html#_2","text":">\u8f93\u5165\uff1aevents= [[1,2],[2,3],[3,4],[1,2]] >\u8f93\u51fa\uff1a4","title":"\u793a\u4f8b:"},{"location":"1353.html#_3","text":"\u8d2a\u5fc3\u7b97\u6cd5,\u4f18\u5148\u9009\u62e9 \u5148\u7ed3\u675f\u7684(\u7ed3\u675f\u5929\u6570\u6700\u5c0f)\u7684\u5143\u7d20 \u96be\u70b9\u5728\u4e8e\u5bf9\u4e8e\u8d2a\u5fc3\u7b97\u6cd5\u7684\u4f18\u5316\u95ee\u9898.","title":"\u601d\u8def"},{"location":"1353.html#_4","text":"//\u8d85\u65f6 class Solution { public: int maxEvents(vector<vector<int>>& nums) { sort(nums.begin(), nums.end(), [](vector<int>& a, vector<int>& b){ return a[1] < b[1]; }); int res = 0; char seen[100001] = {0}; //\u8bb0\u5f55\u5f53\u5929\u662f\u5426\u53c2\u52a0\u4f1a\u8bae for(const auto& e : nums) { // \u904d\u5386 nums // \u4ece\u5f00\u59cb\u5929\u6570\u904d\u5386\u5230\u7ed3\u675f\u5929\u6570,\u67e5\u770b\u662f\u5426\u8fd8\u6709\u6ca1\u6709\u7a7a\u95f2\u5929 for(int i = e[0], i <= e[1]; ++i) { if(seen[i]) continue; // ++seen[i]; ++ res; break; } } return res; } };","title":"\u89e3\u7b54:"},{"location":"1353.html#_5","text":"//\u4e0d\u96be\u5206\u6790\u51fa,\u5bfc\u81f4\u4e0a\u9762\u7b97\u6cd5\u7f13\u6162\u7684\u56e0\u7d20\u662f, \u53cc\u91cd\u7684for \u5faa\u73af,\u66f4\u8fd1\u4e00\u6b65\u7684\u6765\u8bf4,\u662f\u5185\u5c42\u5faa\u73af(\u8fd9\u4e00\u6b65\u5faa\u73af\u5728\u4e8e\u627e\u51fa\u6700\u65e9\u7684\u7a7a\u95f2\u5929\u6570) // \u6211\u4eec\u4f7f\u7528 \u4e8c\u5206\u67e5\u627e\u6811\u6765\u52a0\u901f\u8fd9\u4e2a\u8fc7\u7a0b() //\u8fd8\u662f\u6162 class Solution { public: int maxEvents(vector<vector<int>>& nums) { sort(nums.begin(), nums.end(), [](vector<int>& a, vector<int>& b){ return a[1] < b[1]; }); int res = 0; int min_d = INT32_MAX; int max_d = INT32_MIN; // \u627e\u5230\u80fd\u591f\u5f00\u4f1a\u7684\u6574\u4e2a\u533a\u95f4 for(const vector<int>& e : nums) { max_d = max_d > e[1] ? max_d : e[1]; min_d = min_d < e[0] ? min_d : e[0]; } // \u5bf9\u4e8e BST \u8fdb\u884c \u586b\u5145 vector<int> tmp(max_d - min_d +1); // \u7528 min_d , min_d +1 ,min_d +2 std::iota(tmp.begin(), tmp.end(), min_d); set<int> s(tmp.begin(), tmp.end()); for(const vector<int>& e : nums) { // \u904d\u5386 nums //\u67e5\u627e beginday auto it = s.lower_bound(e[0]); if(it == s.end() || *it > e[1]) continue; s.erase(it); //\u53c2\u52a0\u8fd9\u5929\u7684\u4f1a\u8bae ++ res; } return res; } }; \u82b1\u82b1\u9171 LeetCode 1353","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1353.html#_6","text":"- std::iota \u7b97\u6cd5\u7684\u4f7f\u7528 - \u7528 BST \u6765\u52a0\u901f\u67e5\u627e\u8fc7\u7a0b","title":"\u603b\u7ed3"},{"location":"1367.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u68f5\u4ee5 root \u4e3a\u6839\u7684\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a head \u4e3a\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u94fe\u8868\u3002 \u5982\u679c\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u5b58\u5728\u4e00\u6761\u4e00\u76f4\u5411\u4e0b\u7684\u8def\u5f84\uff0c\u4e14\u6bcf\u4e2a\u70b9\u7684\u6570\u503c\u6070\u597d\u4e00\u4e00\u5bf9\u5e94\u4ee5 head \u4e3a\u9996\u7684\u94fe\u8868\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u90a3\u4e48\u8bf7\u4f60\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002 \u4e00\u76f4\u5411\u4e0b\u7684\u8def\u5f84\u7684\u610f\u601d\u662f\uff1a\u4ece\u6811\u4e2d\u67d0\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u4e00\u76f4\u8fde\u7eed\u5411\u4e0b\u7684\u8def\u5f84\u3002 \u793a\u4f8b: \u8f93\u5165\uff1ahead = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u6811\u4e2d\u84dd\u8272\u7684\u8282\u70b9\u6784\u6210\u4e86\u4e0e\u94fe\u8868\u5bf9\u5e94\u7684\u5b50\u8def\u5f84\u3002 \u601d\u8def \u5b50\u6811\u7684\u904d\u5386\uff0c\u5c06\u5de6\u53f3\u7684\u8282\u70b9\u5f53\u505a\u540c\u6837\u7684\u5b50\u95ee\u9898 \u89e3\u7b54: class Solution { private: bool dfs(ListNode* head, TreeNode* root) { if(head == NULL) return true; // if(!root || head->val != root->val) return false; if (root == NULL) return false; // \u5f53\u524d\u5339\u914d\u7684\u4e8c\u53c9\u6811\u4e0a\u8282\u70b9\u7684\u503c\u4e0e\u94fe\u8868\u8282\u70b9\u7684\u503c\u4e0d\u76f8\u7b49\uff0c\u5339\u914d\u5931\u8d25 if (root->val != head->val) return false; return dfs(head->next, root->left) || dfs(head->next, root->right); } public: bool isSubPath(ListNode* head, TreeNode* root) { if(root == NULL) return false; //\u67e5\u627e\u5f53\u524d\u6811\u6216\u8005\u5c06\u5b50\u6811\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u6811\u67e5\u627e return dfs(head, root) || isSubPath(head, root->left) || isSubPath(head, root->right); } };","title":1367},{"location":"1367.html#_1","text":"\u7ed9\u4f60\u4e00\u68f5\u4ee5 root \u4e3a\u6839\u7684\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a head \u4e3a\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u94fe\u8868\u3002 \u5982\u679c\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u5b58\u5728\u4e00\u6761\u4e00\u76f4\u5411\u4e0b\u7684\u8def\u5f84\uff0c\u4e14\u6bcf\u4e2a\u70b9\u7684\u6570\u503c\u6070\u597d\u4e00\u4e00\u5bf9\u5e94\u4ee5 head \u4e3a\u9996\u7684\u94fe\u8868\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u90a3\u4e48\u8bf7\u4f60\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002 \u4e00\u76f4\u5411\u4e0b\u7684\u8def\u5f84\u7684\u610f\u601d\u662f\uff1a\u4ece\u6811\u4e2d\u67d0\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u4e00\u76f4\u8fde\u7eed\u5411\u4e0b\u7684\u8def\u5f84\u3002","title":"\u9898\u76ee:"},{"location":"1367.html#_2","text":"\u8f93\u5165\uff1ahead = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u6811\u4e2d\u84dd\u8272\u7684\u8282\u70b9\u6784\u6210\u4e86\u4e0e\u94fe\u8868\u5bf9\u5e94\u7684\u5b50\u8def\u5f84\u3002","title":"\u793a\u4f8b:"},{"location":"1367.html#_3","text":"\u5b50\u6811\u7684\u904d\u5386\uff0c\u5c06\u5de6\u53f3\u7684\u8282\u70b9\u5f53\u505a\u540c\u6837\u7684\u5b50\u95ee\u9898","title":"\u601d\u8def"},{"location":"1367.html#_4","text":"class Solution { private: bool dfs(ListNode* head, TreeNode* root) { if(head == NULL) return true; // if(!root || head->val != root->val) return false; if (root == NULL) return false; // \u5f53\u524d\u5339\u914d\u7684\u4e8c\u53c9\u6811\u4e0a\u8282\u70b9\u7684\u503c\u4e0e\u94fe\u8868\u8282\u70b9\u7684\u503c\u4e0d\u76f8\u7b49\uff0c\u5339\u914d\u5931\u8d25 if (root->val != head->val) return false; return dfs(head->next, root->left) || dfs(head->next, root->right); } public: bool isSubPath(ListNode* head, TreeNode* root) { if(root == NULL) return false; //\u67e5\u627e\u5f53\u524d\u6811\u6216\u8005\u5c06\u5b50\u6811\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u6811\u67e5\u627e return dfs(head, root) || isSubPath(head, root->left) || isSubPath(head, root->right); } };","title":"\u89e3\u7b54:"},{"location":"1423.html","text":"\u9898\u76ee: \u51e0\u5f20\u5361\u724c \u6392\u6210\u4e00\u884c\uff0c\u6bcf\u5f20\u5361\u724c\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u70b9\u6570\u3002\u70b9\u6570\u7531\u6574\u6570\u6570\u7ec4 cardPoints \u7ed9\u51fa\u3002 \u6bcf\u6b21\u884c\u52a8\uff0c\u4f60\u53ef\u4ee5\u4ece\u884c\u7684\u5f00\u5934\u6216\u8005\u672b\u5c3e\u62ff\u4e00\u5f20\u5361\u724c\uff0c\u6700\u7ec8\u4f60\u5fc5\u987b\u6b63\u597d\u62ff k \u5f20\u5361\u724c\u3002 \u4f60\u7684\u70b9\u6570\u5c31\u662f\u4f60\u62ff\u5230\u624b\u4e2d\u7684\u6240\u6709\u5361\u724c\u7684\u70b9\u6570\u4e4b\u548c\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 cardPoints \u548c\u6574\u6570 k\uff0c\u8bf7\u4f60\u8fd4\u56de\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1acardPoints = [1,2,3,4,5,6,1], k = 3 >\u8f93\u51fa\uff1a12 >\u89e3\u91ca\uff1a\u7b2c\u4e00\u6b21\u884c\u52a8\uff0c\u4e0d\u7ba1\u62ff\u54ea\u5f20\u724c\uff0c\u4f60\u7684\u70b9\u6570\u603b\u662f 1 \u3002\u4f46\u662f\uff0c\u5148\u62ff\u6700\u53f3\u8fb9\u7684\u5361\u724c\u5c06\u4f1a\u6700\u5927\u5316\u4f60\u7684\u53ef\u83b7\u5f97\u70b9\u6570\u3002\u6700\u4f18\u7b56\u7565\u662f\u62ff\u53f3\u8fb9\u7684\u4e09\u5f20\u724c\uff0c\u6700\u7ec8\u70b9\u6570\u4e3a 1 + 6 + 5 = 12 \u3002 \u601d\u8def 1. \u540c 1658 \u89e3\u7b54: class Solution { public: int maxScore(vector<int>& nums, int k) { int total = accumulate(nums.begin(), nums.end(), 0); int n = nums.size(); int len = n -k; // \u5f53\u524d\u533a\u95f4\u7684\u957f\u5ea6 if( len <= 0) return total; // \u5f53\u524d\u533a\u95f4\u7684\u603b\u548c int sum = accumulate(nums.begin(), nums.begin()+len, 0); int min_sum = sum; int left = 0; for(int i = len; i < n; ++i, left ++) { sum += nums[i] - nums[left]; min_sum = min(min_sum, sum); } return total - min_sum; } };","title":1423},{"location":"1423.html#_1","text":"\u51e0\u5f20\u5361\u724c \u6392\u6210\u4e00\u884c\uff0c\u6bcf\u5f20\u5361\u724c\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u70b9\u6570\u3002\u70b9\u6570\u7531\u6574\u6570\u6570\u7ec4 cardPoints \u7ed9\u51fa\u3002 \u6bcf\u6b21\u884c\u52a8\uff0c\u4f60\u53ef\u4ee5\u4ece\u884c\u7684\u5f00\u5934\u6216\u8005\u672b\u5c3e\u62ff\u4e00\u5f20\u5361\u724c\uff0c\u6700\u7ec8\u4f60\u5fc5\u987b\u6b63\u597d\u62ff k \u5f20\u5361\u724c\u3002 \u4f60\u7684\u70b9\u6570\u5c31\u662f\u4f60\u62ff\u5230\u624b\u4e2d\u7684\u6240\u6709\u5361\u724c\u7684\u70b9\u6570\u4e4b\u548c\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 cardPoints \u548c\u6574\u6570 k\uff0c\u8bf7\u4f60\u8fd4\u56de\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u3002","title":"\u9898\u76ee:"},{"location":"1423.html#_2","text":">\u8f93\u5165\uff1acardPoints = [1,2,3,4,5,6,1], k = 3 >\u8f93\u51fa\uff1a12 >\u89e3\u91ca\uff1a\u7b2c\u4e00\u6b21\u884c\u52a8\uff0c\u4e0d\u7ba1\u62ff\u54ea\u5f20\u724c\uff0c\u4f60\u7684\u70b9\u6570\u603b\u662f 1 \u3002\u4f46\u662f\uff0c\u5148\u62ff\u6700\u53f3\u8fb9\u7684\u5361\u724c\u5c06\u4f1a\u6700\u5927\u5316\u4f60\u7684\u53ef\u83b7\u5f97\u70b9\u6570\u3002\u6700\u4f18\u7b56\u7565\u662f\u62ff\u53f3\u8fb9\u7684\u4e09\u5f20\u724c\uff0c\u6700\u7ec8\u70b9\u6570\u4e3a 1 + 6 + 5 = 12 \u3002","title":"\u793a\u4f8b:"},{"location":"1423.html#_3","text":"1. \u540c 1658","title":"\u601d\u8def"},{"location":"1423.html#_4","text":"class Solution { public: int maxScore(vector<int>& nums, int k) { int total = accumulate(nums.begin(), nums.end(), 0); int n = nums.size(); int len = n -k; // \u5f53\u524d\u533a\u95f4\u7684\u957f\u5ea6 if( len <= 0) return total; // \u5f53\u524d\u533a\u95f4\u7684\u603b\u548c int sum = accumulate(nums.begin(), nums.begin()+len, 0); int min_sum = sum; int left = 0; for(int i = len; i < n; ++i, left ++) { sum += nums[i] - nums[left]; min_sum = min(min_sum, sum); } return total - min_sum; } };","title":"\u89e3\u7b54:"},{"location":"1438.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u548c\u4e00\u4e2a\u8868\u793a\u9650\u5236\u7684\u6574\u6570 limit\uff0c\u8bf7\u4f60\u8fd4\u56de\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u8be5\u5b50\u6570\u7ec4\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u7edd\u5bf9\u5dee\u5fc5\u987b\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e limit \u3002 \u5982\u679c\u4e0d\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u5219\u8fd4\u56de 0 \u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [8,2,4,7], limit = 4 >\u8f93\u51fa\uff1a2 \u601d\u8def \u6ed1\u52a8\u7a97\u53e3,\u5e76\u501f\u52a9\u6570\u636e\u7ed3\u6784\u7ef4\u62a4 \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u89e3\u7b54: class Solution { public: int longestSubarray(vector<int>& nums, int limit) { int n = nums.size(); int res = 0; int left = 0; multiset<int> s(n); //\u501f\u52a9s\u5728\u4efb\u610f\u65f6\u523b\u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c for(int i = 1; i < n; ++i) { while(*s.rbegin() - *s.begin() > limit) { s.erase(s.find(nums[left++])); } res = max(res, i - left + 1); } return res; } };","title":1438},{"location":"1438.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u548c\u4e00\u4e2a\u8868\u793a\u9650\u5236\u7684\u6574\u6570 limit\uff0c\u8bf7\u4f60\u8fd4\u56de\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u8be5\u5b50\u6570\u7ec4\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u7edd\u5bf9\u5dee\u5fc5\u987b\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e limit \u3002 \u5982\u679c\u4e0d\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u5219\u8fd4\u56de 0 \u3002","title":"\u9898\u76ee:"},{"location":"1438.html#_2","text":">\u8f93\u5165\uff1anums = [8,2,4,7], limit = 4 >\u8f93\u51fa\uff1a2","title":"\u793a\u4f8b:"},{"location":"1438.html#_3","text":"\u6ed1\u52a8\u7a97\u53e3,\u5e76\u501f\u52a9\u6570\u636e\u7ed3\u6784\u7ef4\u62a4 \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c","title":"\u601d\u8def"},{"location":"1438.html#_4","text":"class Solution { public: int longestSubarray(vector<int>& nums, int limit) { int n = nums.size(); int res = 0; int left = 0; multiset<int> s(n); //\u501f\u52a9s\u5728\u4efb\u610f\u65f6\u523b\u627e\u5230\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c for(int i = 1; i < n; ++i) { while(*s.rbegin() - *s.begin() > limit) { s.erase(s.find(nums[left++])); } res = max(res, i - left + 1); } return res; } };","title":"\u89e3\u7b54:"},{"location":"1452.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 favoriteCompanies \uff0c\u5176\u4e2d favoriteCompanies[i] \u662f\u7b2c i \u540d\u7528\u6237\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\u3002 \u8bf7\u627e\u51fa\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4eba\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u7684\u5b50\u96c6\u7684\u6536\u85cf\u6e05\u5355\uff0c\u5e76\u8fd4\u56de\u8be5\u6e05\u5355\u4e0b\u6807\u3002\u4e0b\u6807\u9700\u8981\u6309\u5347\u5e8f\u6392\u5217\u3002 \u793a\u4f8b: > \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]] > \u8f93\u51fa\uff1a[0,1,4] > \u89e3\u91ca\uff1a favoriteCompanies[2]=[\"google\",\"facebook\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u7684\u5b50\u96c6\u3002 favoriteCompanies[3]=[\"google\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u548c favoriteCompanies[1]=[\"google\",\"microsoft\"] \u7684\u5b50\u96c6\u3002 \u5176\u4f59\u7684\u6536\u85cf\u6e05\u5355\u5747\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4eba\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u7684\u5b50\u96c6\uff0c\u56e0\u6b64\uff0c\u7b54\u6848\u4e3a [0,1,4] \u3002 \u601d\u8def \u53ef\u4ee5\u5f52\u7c7b\u4e8e\u533a\u95f4\u5408\u5e76\u95ee\u9898 \u89e3\u7b54: // \u9519\u8bef\u4ee3\u7801 class Solution { public: void Print( const vector<vector<string>>& favors ) { for(auto favor : favors) { for(auto s : favor) { std::cout<< s <<std::endl; } } } // \u6bd4\u8f83\u4e24\u4e2a vector<string> \u662f\u5426\u662f\u5305\u542b\u5173\u7cfb bool ve_cmp( const vector<string>& f1, const vector<string>& f2 ) { set<string> Set(f1.begin(), f1.end()); for(int i = 0; i < f2.size(); ++i) { if( Set.find(f2[i]) == Set.end() ) // mei\u627e\u5230 return false; } std::cout << \"\u771f\"<<std::endl; return true; // \u9ed8\u8ba4\u662f\u5305\u542b\u5173\u7cfb } // \u5bf9 favors[i] \u6392\u5e8f void Sort( vector<vector<string>>& favors ) { for(vector<string>& favor : favors) { // STL \u6392\u5e8f\u51fd\u6570 sort(favor.begin(), favor.end(), [&](string& a, string& b){ return a.compare(b); }); } } vector<int> peopleIndexes(vector<vector<string>>& favors) { Sort(favors); vector<int> res; res.push_back(0); // for(int i = 1; i < favors.size(); ++i) { for(int j = 0;j < res.size(); ++j) { int index = res[j]; if(ve_cmp(favors[i], favors[index])) { if( favors[i].size() > favors[index].size() ) { res[j] = i; } else { continue; } } else { res.push_back(i); // \u538b\u5165\u540e\u4f1a\u6539\u53d8 res.size \u7684\u503c,\u5bfc\u81f4\u5faa\u73af\u6761\u4ef6\u9519\u8bef } } } return res; } }; \u6807\u51c6\u7b54\u6848 class Solution { public: vector<int> peopleIndexes(vector<vector<string>>& favors) { vector<int> res; // \u5bf9\u6bcf\u4e00\u4e2a favor[i] \u6392\u5e8f for_each(favors.begin(), favors.end(), [&](vector<string>& fa){ sort(fa.begin(), fa.end()); }); res.push_back(0); int n = favors.size(); for(int i = 1; i < n; ++i) { int m = res.size(); int flag = false; // \u5728\u5df2\u7ecf \"\u5408\u5e76\u7684\u533a\u95f4\"\u5185\u67e5\u627e\u662f\u5426\u6709\u5305\u542b\u5173\u7cfb for(int j = 0; j < m; ++j) { int k = res[j]; // \"\u5408\u5e76\u7684\u533a\u95f4\"\u7684\u5143\u7d20 \u5305\u542b\u5f53\u524d\u533a\u95f4 if( favors[k].size() > favors[i].size() ) { if( includes(favors[k].begin(), favors[k].end(), favors[i].begin(),favors[i].end())){ flag = true; break; } } else { // \u5f53\u524d\u533a\u95f4\u5305\u542b\"\u5408\u5e76\u7684\u533a\u95f4\"\u4e2d\u7684\u5143\u7d20 if( includes(favors[i].begin(), favors[i].end(), favors[k].begin(),favors[k].end())){ if(flag) res[j] = -1; flag = true; res[j] = i; continue; } } } if(!flag) res.push_back(i); } sort(res.begin(), res.end()); auto pos = unique(res.begin(), res.end()); res.erase(pos, res.end()); return res; } }; \u603b\u7ed3 - STL \u63d0\u4f9b\u7684\u6709 \u662f\u5426\u662f\u5b50\u96c6\u7684\u51fd\u6570 includes ,\u4e8f\u4f60\u8fd8\u8bfb\u8fc7STL \u6e90\u7801\u89e3\u6790 -","title":1452},{"location":"1452.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 favoriteCompanies \uff0c\u5176\u4e2d favoriteCompanies[i] \u662f\u7b2c i \u540d\u7528\u6237\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\u3002 \u8bf7\u627e\u51fa\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4eba\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u7684\u5b50\u96c6\u7684\u6536\u85cf\u6e05\u5355\uff0c\u5e76\u8fd4\u56de\u8be5\u6e05\u5355\u4e0b\u6807\u3002\u4e0b\u6807\u9700\u8981\u6309\u5347\u5e8f\u6392\u5217\u3002","title":"\u9898\u76ee:"},{"location":"1452.html#_2","text":"> \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]] > \u8f93\u51fa\uff1a[0,1,4] > \u89e3\u91ca\uff1a favoriteCompanies[2]=[\"google\",\"facebook\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u7684\u5b50\u96c6\u3002 favoriteCompanies[3]=[\"google\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u548c favoriteCompanies[1]=[\"google\",\"microsoft\"] \u7684\u5b50\u96c6\u3002 \u5176\u4f59\u7684\u6536\u85cf\u6e05\u5355\u5747\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4eba\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u7684\u5b50\u96c6\uff0c\u56e0\u6b64\uff0c\u7b54\u6848\u4e3a [0,1,4] \u3002","title":"\u793a\u4f8b:"},{"location":"1452.html#_3","text":"\u53ef\u4ee5\u5f52\u7c7b\u4e8e\u533a\u95f4\u5408\u5e76\u95ee\u9898","title":"\u601d\u8def"},{"location":"1452.html#_4","text":"// \u9519\u8bef\u4ee3\u7801 class Solution { public: void Print( const vector<vector<string>>& favors ) { for(auto favor : favors) { for(auto s : favor) { std::cout<< s <<std::endl; } } } // \u6bd4\u8f83\u4e24\u4e2a vector<string> \u662f\u5426\u662f\u5305\u542b\u5173\u7cfb bool ve_cmp( const vector<string>& f1, const vector<string>& f2 ) { set<string> Set(f1.begin(), f1.end()); for(int i = 0; i < f2.size(); ++i) { if( Set.find(f2[i]) == Set.end() ) // mei\u627e\u5230 return false; } std::cout << \"\u771f\"<<std::endl; return true; // \u9ed8\u8ba4\u662f\u5305\u542b\u5173\u7cfb } // \u5bf9 favors[i] \u6392\u5e8f void Sort( vector<vector<string>>& favors ) { for(vector<string>& favor : favors) { // STL \u6392\u5e8f\u51fd\u6570 sort(favor.begin(), favor.end(), [&](string& a, string& b){ return a.compare(b); }); } } vector<int> peopleIndexes(vector<vector<string>>& favors) { Sort(favors); vector<int> res; res.push_back(0); // for(int i = 1; i < favors.size(); ++i) { for(int j = 0;j < res.size(); ++j) { int index = res[j]; if(ve_cmp(favors[i], favors[index])) { if( favors[i].size() > favors[index].size() ) { res[j] = i; } else { continue; } } else { res.push_back(i); // \u538b\u5165\u540e\u4f1a\u6539\u53d8 res.size \u7684\u503c,\u5bfc\u81f4\u5faa\u73af\u6761\u4ef6\u9519\u8bef } } } return res; } };","title":"\u89e3\u7b54:"},{"location":"1452.html#_5","text":"class Solution { public: vector<int> peopleIndexes(vector<vector<string>>& favors) { vector<int> res; // \u5bf9\u6bcf\u4e00\u4e2a favor[i] \u6392\u5e8f for_each(favors.begin(), favors.end(), [&](vector<string>& fa){ sort(fa.begin(), fa.end()); }); res.push_back(0); int n = favors.size(); for(int i = 1; i < n; ++i) { int m = res.size(); int flag = false; // \u5728\u5df2\u7ecf \"\u5408\u5e76\u7684\u533a\u95f4\"\u5185\u67e5\u627e\u662f\u5426\u6709\u5305\u542b\u5173\u7cfb for(int j = 0; j < m; ++j) { int k = res[j]; // \"\u5408\u5e76\u7684\u533a\u95f4\"\u7684\u5143\u7d20 \u5305\u542b\u5f53\u524d\u533a\u95f4 if( favors[k].size() > favors[i].size() ) { if( includes(favors[k].begin(), favors[k].end(), favors[i].begin(),favors[i].end())){ flag = true; break; } } else { // \u5f53\u524d\u533a\u95f4\u5305\u542b\"\u5408\u5e76\u7684\u533a\u95f4\"\u4e2d\u7684\u5143\u7d20 if( includes(favors[i].begin(), favors[i].end(), favors[k].begin(),favors[k].end())){ if(flag) res[j] = -1; flag = true; res[j] = i; continue; } } } if(!flag) res.push_back(i); } sort(res.begin(), res.end()); auto pos = unique(res.begin(), res.end()); res.erase(pos, res.end()); return res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1452.html#_6","text":"- STL \u63d0\u4f9b\u7684\u6709 \u662f\u5426\u662f\u5b50\u96c6\u7684\u51fd\u6570 includes ,\u4e8f\u4f60\u8fd8\u8bfb\u8fc7STL \u6e90\u7801\u89e3\u6790 -","title":"\u603b\u7ed3"},{"location":"147.html","text":"\u9898\u76ee \u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f \u89e3\u7b54 class Solution { public: ListNode* insertionSortList(ListNode* head) { if (head == nullptr) { return head; } // \u63d2\u5165\u5934\u8282\u70b9 ListNode* fakehead = new ListNode(0); fakehead->next = head; ListNode* q = head; ListNode* p = head->next; while (p != nullptr) { if (q->val <= p->val) { q = q->next; //\u4f18\u5316 } else { ListNode *prev = fakehead; while (prev->next->val <= p->val) { prev = prev->next; } q->next = p->next; p->next = prev->next; prev->next = p; } p = q->next; } return fakehead->next; } }; \u6807\u51c6\u7b54\u6848 class Solution { public: ListNode* insertionSortList(ListNode* head) { if (head == nullptr) { return head; } ListNode* fakehead = new ListNode(0); fakehead->next = head; ListNode* q = head; //\u5f53\u524d\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u8282\u70b9 ListNode* p = head->next; while (p != nullptr) { if (q->val <= p->val) { q = q->next; } else { ListNode *prev = fakehead; while (prev->next->val <= p->val) { // \u6ce8\u610f\u7b49\u4e8e\u6210\u7acb prev = prev->next; } q->next = p->next; p->next = prev->next; prev->next = p; } p = q->next; } return fakehead->next; } }; \u603b\u7ed3 - \u5bf9\u4e8e\u94fe\u8868\u64cd\u4f5c\u4e0d\u719f\u6089 - \u5bf9\u4e8e\u67e5\u627e\u6392\u5e8f\u7684\u7406\u89e3\u4e0d\u591f\u6df1\u523b\uff0c\u5bf9\u4e8e\u4f18\u5316\u90e8\u5206\u7406\u89e3\u7a0b\u5ea6\u4e0d\u591f - \u5bf9\u4e8e\u94fe\u8868\u63d2\u5165\u64cd\u4f5c\u4e0d\u719f\u6089","title":147},{"location":"147.html#_1","text":"\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f","title":"\u9898\u76ee"},{"location":"147.html#_2","text":"class Solution { public: ListNode* insertionSortList(ListNode* head) { if (head == nullptr) { return head; } // \u63d2\u5165\u5934\u8282\u70b9 ListNode* fakehead = new ListNode(0); fakehead->next = head; ListNode* q = head; ListNode* p = head->next; while (p != nullptr) { if (q->val <= p->val) { q = q->next; //\u4f18\u5316 } else { ListNode *prev = fakehead; while (prev->next->val <= p->val) { prev = prev->next; } q->next = p->next; p->next = prev->next; prev->next = p; } p = q->next; } return fakehead->next; } };","title":"\u89e3\u7b54"},{"location":"147.html#_3","text":"class Solution { public: ListNode* insertionSortList(ListNode* head) { if (head == nullptr) { return head; } ListNode* fakehead = new ListNode(0); fakehead->next = head; ListNode* q = head; //\u5f53\u524d\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u8282\u70b9 ListNode* p = head->next; while (p != nullptr) { if (q->val <= p->val) { q = q->next; } else { ListNode *prev = fakehead; while (prev->next->val <= p->val) { // \u6ce8\u610f\u7b49\u4e8e\u6210\u7acb prev = prev->next; } q->next = p->next; p->next = prev->next; prev->next = p; } p = q->next; } return fakehead->next; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"147.html#_4","text":"- \u5bf9\u4e8e\u94fe\u8868\u64cd\u4f5c\u4e0d\u719f\u6089 - \u5bf9\u4e8e\u67e5\u627e\u6392\u5e8f\u7684\u7406\u89e3\u4e0d\u591f\u6df1\u523b\uff0c\u5bf9\u4e8e\u4f18\u5316\u90e8\u5206\u7406\u89e3\u7a0b\u5ea6\u4e0d\u591f - \u5bf9\u4e8e\u94fe\u8868\u63d2\u5165\u64cd\u4f5c\u4e0d\u719f\u6089","title":"\u603b\u7ed3"},{"location":"1481.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 arr \u548c\u4e00\u4e2a\u6574\u6570 k \u3002\u73b0\u9700\u8981\u4ece\u6570\u7ec4\u4e2d\u6070\u597d\u79fb\u9664 k \u4e2a\u5143\u7d20\uff0c\u8bf7\u627e\u51fa\u79fb\u9664\u540e\u6570\u7ec4\u4e2d\u4e0d\u540c\u6574\u6570\u7684\u6700\u5c11\u6570\u76ee\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1aarr = [5,5,4], k = 1 >\u8f93\u51fa\uff1a1 >\u89e3\u91ca\uff1a\u79fb\u9664 1 \u4e2a 4 \uff0c\u6570\u7ec4\u4e2d\u53ea\u5269\u4e0b 5 \u4e00\u79cd\u6574\u6570\u3002 >\u8f93\u5165\uff1aarr = [4,3,1,1,3,3,2], k = 3 >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u5148\u79fb\u9664 4\u30012 \uff0c\u7136\u540e\u518d\u79fb\u9664\u4e24\u4e2a 1 \u4e2d\u7684\u4efb\u610f 1 \u4e2a\u6216\u8005\u4e09\u4e2a 3 \u4e2d\u7684\u4efb\u610f 1 \u4e2a\uff0c\u6700\u540e\u5269\u4e0b 1 \u548c 3 \u4e24\u79cd\u6574\u6570\u3002 \u601d\u8def hash\u8bb0\u5f55\u4e0d\u540c\u5143\u7d20\u7684\u4e2a\u6570,\u7136\u540e\u6392\u5e8f,\u4f18\u5148\u5220\u9664\u4e2a\u6570\u4e3a1\uff0c\u4e2a\u6570\u4e3a2,\u4e2a\u6570\u4e3a.....\uff0c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6 \u89e3\u7b54: // \u4e0d\u63a5\u53d7 - \u4f7f\u7528map,\u4f9d\u6b21\u5220\u9664\u4e2a\u6570\u6700\u5c11\u7684\u5143\u7d20 //\u4f46\u8d85\u65f6 class Solution { public: int findLeastNumOfUniqueInts(vector<int>& arr, int k) { map<int/*value*/ , int/*count*/> Map_int; for(int a:arr) { Map_int[a]++; } std::cout<<k; while (k!=0) { auto min = Map_int.begin(); std::cout<<min->first; for(auto p = Map_int.begin();p!=Map_int.end();++p){ //\u5bfb\u627e\u4e2a\u6570\u6700\u5c11\u7684\u5143\u7d20 if(p->second < min->second) min = p; } if(k >= min->second) { k -= min->second; Map_int.erase(min->first); } else k = 0; } return Map_int.size(); } }; \u6807\u51c6\u7b54\u6848 //\u501f\u52a9\u7684\u4f18\u5148\u961f\u5217\u5b9e\u73b0\u7684(\u4e5f\u53ef\u4ee5\u501f\u52a9vector,sort) //\u4ece\u5927\u5230\u5c0f\u5220\u9664<=k\u7684\u5143\u7d20 class Solution { public: int findLeastNumOfUniqueInts(vector<int>& arr, int k) { int n = arr.size(); unordered_map<int, int> m; for (int i = 0; i < n; i ++) { m[arr[i]] ++; } priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; for (auto x : m) { pq.push({x.second, x.first}); } while (k && pq.size()) { auto t = pq.top(); if (k >= t.first) { k -= t.first; } else { break; } pq.pop(); } return pq.size(); } }; \u603b\u7ed3 - C++\u4e2dmap,multimap\u662f\u901a\u8fc7\u5e73\u8861\u4e8c\u53c9\u6811\u5b9e\u73b0\u7684. - \u6807\u5fd7\u4ee3\u7801\u4f7f\u7528\u4e86unordered_map,\u5176\u4f7f\u7528\u7684hash table \u5b9e\u73b0\u7684. - \u5bf9\u4e8e\u7279\u6b8a\u7684\u5bb9\u5668\u8fd8\u6ca1\u6709\u638c\u63e1 - \u4f7f\u7528pair\u4ee3\u66ff\u7ed3\u6784\u4f53","title":1481},{"location":"1481.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 arr \u548c\u4e00\u4e2a\u6574\u6570 k \u3002\u73b0\u9700\u8981\u4ece\u6570\u7ec4\u4e2d\u6070\u597d\u79fb\u9664 k \u4e2a\u5143\u7d20\uff0c\u8bf7\u627e\u51fa\u79fb\u9664\u540e\u6570\u7ec4\u4e2d\u4e0d\u540c\u6574\u6570\u7684\u6700\u5c11\u6570\u76ee\u3002","title":"\u9898\u76ee:"},{"location":"1481.html#_2","text":">\u8f93\u5165\uff1aarr = [5,5,4], k = 1 >\u8f93\u51fa\uff1a1 >\u89e3\u91ca\uff1a\u79fb\u9664 1 \u4e2a 4 \uff0c\u6570\u7ec4\u4e2d\u53ea\u5269\u4e0b 5 \u4e00\u79cd\u6574\u6570\u3002 >\u8f93\u5165\uff1aarr = [4,3,1,1,3,3,2], k = 3 >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u5148\u79fb\u9664 4\u30012 \uff0c\u7136\u540e\u518d\u79fb\u9664\u4e24\u4e2a 1 \u4e2d\u7684\u4efb\u610f 1 \u4e2a\u6216\u8005\u4e09\u4e2a 3 \u4e2d\u7684\u4efb\u610f 1 \u4e2a\uff0c\u6700\u540e\u5269\u4e0b 1 \u548c 3 \u4e24\u79cd\u6574\u6570\u3002","title":"\u793a\u4f8b:"},{"location":"1481.html#_3","text":"hash\u8bb0\u5f55\u4e0d\u540c\u5143\u7d20\u7684\u4e2a\u6570,\u7136\u540e\u6392\u5e8f,\u4f18\u5148\u5220\u9664\u4e2a\u6570\u4e3a1\uff0c\u4e2a\u6570\u4e3a2,\u4e2a\u6570\u4e3a.....\uff0c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6","title":"\u601d\u8def"},{"location":"1481.html#_4","text":"// \u4e0d\u63a5\u53d7 - \u4f7f\u7528map,\u4f9d\u6b21\u5220\u9664\u4e2a\u6570\u6700\u5c11\u7684\u5143\u7d20 //\u4f46\u8d85\u65f6 class Solution { public: int findLeastNumOfUniqueInts(vector<int>& arr, int k) { map<int/*value*/ , int/*count*/> Map_int; for(int a:arr) { Map_int[a]++; } std::cout<<k; while (k!=0) { auto min = Map_int.begin(); std::cout<<min->first; for(auto p = Map_int.begin();p!=Map_int.end();++p){ //\u5bfb\u627e\u4e2a\u6570\u6700\u5c11\u7684\u5143\u7d20 if(p->second < min->second) min = p; } if(k >= min->second) { k -= min->second; Map_int.erase(min->first); } else k = 0; } return Map_int.size(); } };","title":"\u89e3\u7b54:"},{"location":"1481.html#_5","text":"//\u501f\u52a9\u7684\u4f18\u5148\u961f\u5217\u5b9e\u73b0\u7684(\u4e5f\u53ef\u4ee5\u501f\u52a9vector,sort) //\u4ece\u5927\u5230\u5c0f\u5220\u9664<=k\u7684\u5143\u7d20 class Solution { public: int findLeastNumOfUniqueInts(vector<int>& arr, int k) { int n = arr.size(); unordered_map<int, int> m; for (int i = 0; i < n; i ++) { m[arr[i]] ++; } priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; for (auto x : m) { pq.push({x.second, x.first}); } while (k && pq.size()) { auto t = pq.top(); if (k >= t.first) { k -= t.first; } else { break; } pq.pop(); } return pq.size(); } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1481.html#_6","text":"- C++\u4e2dmap,multimap\u662f\u901a\u8fc7\u5e73\u8861\u4e8c\u53c9\u6811\u5b9e\u73b0\u7684. - \u6807\u5fd7\u4ee3\u7801\u4f7f\u7528\u4e86unordered_map,\u5176\u4f7f\u7528\u7684hash table \u5b9e\u73b0\u7684. - \u5bf9\u4e8e\u7279\u6b8a\u7684\u5bb9\u5668\u8fd8\u6ca1\u6709\u638c\u63e1 - \u4f7f\u7528pair\u4ee3\u66ff\u7ed3\u6784\u4f53","title":"\u603b\u7ed3"},{"location":"15.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \uff0c\u4f7f\u5f97 a + b + c = 0 \uff1f\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [-1, 0, 1, 2, -1, -4] >\u8f93\u51fa\uff1a[ [-1, 0, 1], [-1, -1, 2] ] \u601d\u8def - \u6392\u5e8f \u2190 \u8fd9\u662f\u5fc5\u505a\u7684\u4e00\u6b65 - \u6574\u6570\u6570\u7ec4\uff0c\u53ef\u80fd\u4e3a\u8d1f\u6570 - \u662f\u4e09\u4e2a\u6570\uff0c\u800c\u4e0d\u662f\u4e24\u4e2a\u6570\uff0c\u4e24\u4e2a\u6570\u53ef\u4ee5\u501f\u52a9\u4e8c\u5206\u67e5\u627e(n*lg n) - 1. \u66b4\u529b\u6cd5\u53ef\u505a n^3. 2. \u786e\u5b9a\u4e24\u4e2a\u6570\uff0c\u518d\u4e8c\u5206\u67e5\u627e\u5269\u4e0b\u7684\u90a3\u4e2a\u6570(n^2*lg n). 3. \u53cc\u6307\u9488\uff0c\u5148\u786e\u5b9a\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u7528\u53cc\u6307\u9488\uff0c\u4e0d\u65ad\u6839\u636e\u5927\u4e8e\u6216\u8005\u5c0f\u4e8e\u8fdb\u884c\u67e5\u627eO(n^2). \u89e3\u7b54: //\u7248\u672c\u4e00 ERROR \u8df3\u8fc7\u5f53\u524d\u5143\u7d20\uff0c\u6709\u91cd\u590d\u5143\u7d20 class Solution { public: vector<vector<int>> threeSum(vector<int>& nums) { vector<vector<int>> ret; sort(nums.begin(), nums.end()); for(size_t i = 0; i<nums.size(); ++i) { vector<int> temp(3); int lo = i+1; int hi = nums.size()-1; // \u907f\u5f00\u5f53\u524d\u5143\u7d20 while(lo<hi){ if(lo == i) {lo ++;continue;} else if(hi == i) {hi --;continue;} if(nums[lo] + nums[hi]<-nums[i]) lo ++; else if(nums[lo] + nums[hi]>-nums[i]) hi --; else{ res.push_back({nums[lo],nums[i],nums[hi]}); printf(\"%d %d %d\\n\",nums[lo],nums[i],nums[hi]); break; } } } return ret; } }; //\u7248\u672c\u4e8c accept class Solution { public: vector<vector<int>> threeSum(vector<int>& nums) { vector<vector<int>> res; sort(nums.begin(), nums.end()); for(size_t i = 0; i<nums.size(); ++i) { if (nums[i] > 0) { // smaller already > 0, a + b + c cannot be 0 return res; } if (i != 0 && nums[i] == nums[i - 1]) { continue; // shiip dup } vector<int> temp(3); int lo = i+1; int hi = nums.size()-1; while(lo<hi){ long sum = nums[lo] + nums[hi]; if(sum <-nums[i]) lo ++; else if(sum>-nums[i]) hi --; else{ res.push_back({nums[lo],nums[i],nums[hi]}); //\u4fdd\u8bc1\u4e0d\u91cd\u590d\uff0c\u8df3\u8fc7\u76f8\u540c\u7684\u5143\u7d20 int m = lo; while (m < hi && nums[m] == nums[lo]) { m++; } lo = m; int n = hi; while (n > lo && nums[n] == nums[hi]) { n--; } hi = n; } } } return res; } }; \u6807\u51c6\u7b54\u6848 class Solution { public: vector<vector<int>> threeSum(vector<int>& nums) { sort(nums.begin(), nums.end()); int N = nums.size(); vector<vector<int>> res; for (int i = 0; i < N - 2; i++) { // prune if (nums[i] > 0) { // smaller already > 0, a + b + c cannot be 0 return res; } int target = -nums[i]; if (i != 0 && nums[i] == nums[i - 1]) { continue; // shiip dup } int lo = i + 1; int hi = N - 1; while (lo < hi) { int sum = nums[lo] + nums[hi]; if (sum == target) { res.push_back({nums[i], nums[lo], nums[hi]}); int m = lo; while (m < hi && nums[m] == nums[lo]) { m++; } lo = m; int n = hi; while (n > lo && nums[n] == nums[hi]) { n--; } hi = n; } else if (sum < target) { lo++; } else { hi--; } } } return res; } }; \u603b\u7ed3 - \u95ee\u9898\u7684\u96be\u70b9\u5728\u4e8e\u53bb\u91cd - lo \u4ecei+1\u5f00\u59cb,\u800c\u4e0d\u662f\u8df3\u8fc7\u5f53\u524d\u5143\u7d20\u3002 - **\u5f53nums[i]>0\u65f6\uff0c\u7acb\u9a6c\u8fd4\u56de**,\u8fd9\u662f\u56e0\u4e3a\u5f53lo\u4ece\u662f\u4ecei+1\u8fd0\u884c\u7684 (\u5f53\u627e\u5230\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u4e24\u4e2a\u503c\u65f6\uff0c\u6b64\u65f6\u5185\u5c42\u5faa\u73af\u4f1a\u7ee7\u7eed\uff0c\u800c\u4e0d\u662f\u9009\u62e9break),\u5b83\u4f1a\u7ee7\u7eed\u641c\u7d22\u662f\u5426\u8fd8\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u4e24\u4e2a\u503c\uff0c\u4fdd\u8bc1\u4e0d\u4f1a\u6709\u9057\u6f0f.","title":15},{"location":"15.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \uff0c\u4f7f\u5f97 a + b + c = 0 \uff1f\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002","title":"\u9898\u76ee:"},{"location":"15.html#_2","text":">\u8f93\u5165\uff1anums = [-1, 0, 1, 2, -1, -4] >\u8f93\u51fa\uff1a[ [-1, 0, 1], [-1, -1, 2] ]","title":"\u793a\u4f8b:"},{"location":"15.html#_3","text":"- \u6392\u5e8f \u2190 \u8fd9\u662f\u5fc5\u505a\u7684\u4e00\u6b65 - \u6574\u6570\u6570\u7ec4\uff0c\u53ef\u80fd\u4e3a\u8d1f\u6570 - \u662f\u4e09\u4e2a\u6570\uff0c\u800c\u4e0d\u662f\u4e24\u4e2a\u6570\uff0c\u4e24\u4e2a\u6570\u53ef\u4ee5\u501f\u52a9\u4e8c\u5206\u67e5\u627e(n*lg n) - 1. \u66b4\u529b\u6cd5\u53ef\u505a n^3. 2. \u786e\u5b9a\u4e24\u4e2a\u6570\uff0c\u518d\u4e8c\u5206\u67e5\u627e\u5269\u4e0b\u7684\u90a3\u4e2a\u6570(n^2*lg n). 3. \u53cc\u6307\u9488\uff0c\u5148\u786e\u5b9a\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u7528\u53cc\u6307\u9488\uff0c\u4e0d\u65ad\u6839\u636e\u5927\u4e8e\u6216\u8005\u5c0f\u4e8e\u8fdb\u884c\u67e5\u627eO(n^2).","title":"\u601d\u8def"},{"location":"15.html#_4","text":"//\u7248\u672c\u4e00 ERROR \u8df3\u8fc7\u5f53\u524d\u5143\u7d20\uff0c\u6709\u91cd\u590d\u5143\u7d20 class Solution { public: vector<vector<int>> threeSum(vector<int>& nums) { vector<vector<int>> ret; sort(nums.begin(), nums.end()); for(size_t i = 0; i<nums.size(); ++i) { vector<int> temp(3); int lo = i+1; int hi = nums.size()-1; // \u907f\u5f00\u5f53\u524d\u5143\u7d20 while(lo<hi){ if(lo == i) {lo ++;continue;} else if(hi == i) {hi --;continue;} if(nums[lo] + nums[hi]<-nums[i]) lo ++; else if(nums[lo] + nums[hi]>-nums[i]) hi --; else{ res.push_back({nums[lo],nums[i],nums[hi]}); printf(\"%d %d %d\\n\",nums[lo],nums[i],nums[hi]); break; } } } return ret; } }; //\u7248\u672c\u4e8c accept class Solution { public: vector<vector<int>> threeSum(vector<int>& nums) { vector<vector<int>> res; sort(nums.begin(), nums.end()); for(size_t i = 0; i<nums.size(); ++i) { if (nums[i] > 0) { // smaller already > 0, a + b + c cannot be 0 return res; } if (i != 0 && nums[i] == nums[i - 1]) { continue; // shiip dup } vector<int> temp(3); int lo = i+1; int hi = nums.size()-1; while(lo<hi){ long sum = nums[lo] + nums[hi]; if(sum <-nums[i]) lo ++; else if(sum>-nums[i]) hi --; else{ res.push_back({nums[lo],nums[i],nums[hi]}); //\u4fdd\u8bc1\u4e0d\u91cd\u590d\uff0c\u8df3\u8fc7\u76f8\u540c\u7684\u5143\u7d20 int m = lo; while (m < hi && nums[m] == nums[lo]) { m++; } lo = m; int n = hi; while (n > lo && nums[n] == nums[hi]) { n--; } hi = n; } } } return res; } };","title":"\u89e3\u7b54:"},{"location":"15.html#_5","text":"class Solution { public: vector<vector<int>> threeSum(vector<int>& nums) { sort(nums.begin(), nums.end()); int N = nums.size(); vector<vector<int>> res; for (int i = 0; i < N - 2; i++) { // prune if (nums[i] > 0) { // smaller already > 0, a + b + c cannot be 0 return res; } int target = -nums[i]; if (i != 0 && nums[i] == nums[i - 1]) { continue; // shiip dup } int lo = i + 1; int hi = N - 1; while (lo < hi) { int sum = nums[lo] + nums[hi]; if (sum == target) { res.push_back({nums[i], nums[lo], nums[hi]}); int m = lo; while (m < hi && nums[m] == nums[lo]) { m++; } lo = m; int n = hi; while (n > lo && nums[n] == nums[hi]) { n--; } hi = n; } else if (sum < target) { lo++; } else { hi--; } } } return res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"15.html#_6","text":"- \u95ee\u9898\u7684\u96be\u70b9\u5728\u4e8e\u53bb\u91cd - lo \u4ecei+1\u5f00\u59cb,\u800c\u4e0d\u662f\u8df3\u8fc7\u5f53\u524d\u5143\u7d20\u3002 - **\u5f53nums[i]>0\u65f6\uff0c\u7acb\u9a6c\u8fd4\u56de**,\u8fd9\u662f\u56e0\u4e3a\u5f53lo\u4ece\u662f\u4ecei+1\u8fd0\u884c\u7684 (\u5f53\u627e\u5230\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u4e24\u4e2a\u503c\u65f6\uff0c\u6b64\u65f6\u5185\u5c42\u5faa\u73af\u4f1a\u7ee7\u7eed\uff0c\u800c\u4e0d\u662f\u9009\u62e9break),\u5b83\u4f1a\u7ee7\u7eed\u641c\u7d22\u662f\u5426\u8fd8\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u4e24\u4e2a\u503c\uff0c\u4fdd\u8bc1\u4e0d\u4f1a\u6709\u9057\u6f0f.","title":"\u603b\u7ed3"},{"location":"1503.html","text":"\u9898\u76ee: \u6709\u4e00\u5757\u6728\u677f\uff0c\u957f\u5ea6\u4e3a n \u4e2a \u5355\u4f4d \u3002\u4e00\u4e9b\u8682\u8681\u5728\u6728\u677f\u4e0a\u79fb\u52a8\uff0c\u6bcf\u53ea\u8682\u8681\u90fd\u4ee5 \u6bcf\u79d2\u4e00\u4e2a\u5355\u4f4d \u7684\u901f\u5ea6\u79fb\u52a8\u3002\u5176\u4e2d\uff0c\u4e00\u90e8\u5206\u8682\u8681\u5411 \u5de6 \u79fb\u52a8\uff0c\u5176\u4ed6\u8682\u8681\u5411 \u53f3 \u79fb\u52a8\u3002 \u5f53\u4e24\u53ea\u5411 \u4e0d\u540c \u65b9\u5411\u79fb\u52a8\u7684\u8682\u8681\u5728\u67d0\u4e2a\u70b9\u76f8\u9047\u65f6\uff0c\u5b83\u4eec\u4f1a\u540c\u65f6\u6539\u53d8\u79fb\u52a8\u65b9\u5411\u5e76\u7ee7\u7eed\u79fb\u52a8\u3002\u5047\u8bbe\u66f4\u6539\u65b9\u5411\u4e0d\u4f1a\u82b1\u8d39\u4efb\u4f55\u989d\u5916\u65f6\u95f4\u3002 \u800c\u5f53\u8682\u8681\u5728\u67d0\u4e00\u65f6\u523b t \u5230\u8fbe\u6728\u677f\u7684\u4e00\u7aef\u65f6\uff0c\u5b83\u7acb\u5373\u4ece\u6728\u677f\u4e0a\u6389\u4e0b\u6765\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \u548c\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 left \u4ee5\u53ca right \u3002\u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u6807\u8bc6\u5411\u5de6\u6216\u8005\u5411\u53f3\u79fb\u52a8\u7684\u8682\u8681\u5728 t = 0 \u65f6\u7684\u4f4d\u7f6e\u3002\u8bf7\u4f60\u8fd4\u56de\u6700\u540e\u4e00\u53ea\u8682\u8681\u4ece\u6728\u677f\u4e0a\u6389\u4e0b\u6765\u7684\u65f6\u523b\u3002 \u793a\u4f8b1: >\u8f93\u5165\uff1an = 4, left = [4,3], right = [0,1] >\u8f93\u51fa\uff1a4 >\u89e3\u91ca\uff1a\u5982\u4e0a\u56fe\u6240\u793a\uff1a -\u4e0b\u6807 0 \u5904\u7684\u8682\u8681\u547d\u540d\u4e3a A \u5e76\u5411\u53f3\u79fb\u52a8\u3002 -\u4e0b\u6807 1 \u5904\u7684\u8682\u8681\u547d\u540d\u4e3a B \u5e76\u5411\u53f3\u79fb\u52a8\u3002 -\u4e0b\u6807 3 \u5904\u7684\u8682\u8681\u547d\u540d\u4e3a C \u5e76\u5411\u5de6\u79fb\u52a8\u3002 -\u4e0b\u6807 4 \u5904\u7684\u8682\u8681\u547d\u540d\u4e3a D \u5e76\u5411\u5de6\u79fb\u52a8\u3002 \u8bf7\u6ce8\u610f\uff0c\u8682\u8681\u5728\u6728\u677f\u4e0a\u7684\u6700\u540e\u65f6\u523b\u662f t = 4 \u79d2\uff0c\u4e4b\u540e\u8682\u8681\u7acb\u5373\u4ece\u6728\u677f\u4e0a\u6389\u4e0b\u6765\u3002\uff08\u4e5f\u5c31\u662f\u8bf4\u5728 t = 4.0000000001 \u65f6\uff0c\u6728\u677f\u4e0a\u6ca1\u6709\u8682\u8681\uff09\u3002 \u793a\u4f8b2: >\u8f93\u5165\uff1an = 7, left = [], right = [0,1,2,3,4,5,6,7] >\u8f93\u51fa\uff1a7 >\u89e3\u91ca\uff1a\u6240\u6709\u8682\u8681\u90fd\u5411\u53f3\u79fb\u52a8\uff0c\u4e0b\u6807\u4e3a 0 \u7684\u8682\u8681\u9700\u8981 7 \u79d2\u624d\u80fd\u4ece\u6728\u677f\u4e0a\u6389\u843d\u3002 \u793a\u4f8b3\uff1a >\u8f93\u5165\uff1an = 7, left = [0,1,2,3,4,5,6,7], right = [] >\u8f93\u51fa\uff1a7 >\u89e3\u91ca\uff1a\u6240\u6709\u8682\u8681\u90fd\u5411\u5de6\u79fb\u52a8\uff0c\u4e0b\u6807\u4e3a 7 \u7684\u8682\u8681\u9700\u8981 7 \u79d2\u624d\u80fd\u4ece\u6728\u677f\u4e0a\u6389\u843d\u3002 \u793a\u4f8b4\uff1a >\u8f93\u5165\uff1an = 9, left = [5], right = [4] >\u8f93\u51fa\uff1a5 >\u89e3\u91ca\uff1at = 1 \u79d2\u65f6\uff0c\u4e24\u53ea\u8682\u8681\u5c06\u56de\u5230\u521d\u59cb\u4f4d\u7f6e\uff0c\u4f46\u79fb\u52a8\u65b9\u5411\u4e0e\u4e4b\u524d\u76f8\u53cd\u3002 \u63d0\u793a 1 <= n <= 10^4 0 <= left.length <= n + 1 0 <= left[i] <= n 0 <= right.length <= n + 1 0 <= right[i] <= n 1 <= left.length + right.length <= n + 1 left \u548c right \u4e2d\u7684\u6240\u6709\u503c\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u503c \u53ea\u80fd\u51fa\u73b0\u5728\u4e8c\u8005\u4e4b\u4e00 \u4e2d\u3002 \u601d\u8def \"\u4e24\u53ea\u76f8\u9047\u7684\u8682\u8681\u540c\u65f6\u6539\u53d8\u79fb\u52a8\u65b9\u5411\u4e4b\u540e\u7684\u60c5\u5f62\u7b49\u4ef7\u4e8e\u4e24\u53ea\u8682\u8681\u90fd\u4e0d\u6539\u53d8\u79fb\u52a8\u65b9\u5411\". \u2014\u2014 \u5584\u7528\u7b49\u4ef7\u601d\u7ef4 \u66b4\u529b\u6cd5(\u6a21\u62df\u7684)\u65b9\u6cd5\u8ba8\u8bba\u5f88\u660e\u663e\u53ef\u505a\uff0c\u4f46\u5f88\u660e\u663e\u4e0d\u662f\u6700\u4f18\u7684\u505a\u6cd5. \u53c2\u8003\u63d0\u793a\u5e76\u5bf9\u60c5\u51b5\u5206\u7c7b\u8ba8\u8bba\uff0c\u5f88\u660e\u663e\u5f97\u5230\u4e24\u4e2a\u5173\u952e\u5f0f\u5b50: n - right ,\u4e0e left\u3002 \u89e3\u7b54: /* * 1. \u66b4\u529b\u6cd5 * 2. \u5e76\u4e0d\u662f\u6240\u6709\u7684\u8682\u8681\u90fd\u662f\u2018\u6709\u7528\u7684\u2019\uff0c\u8981\u627e\u5230\u6bcf\u4e2a\u65f6\u671f\u8d77\u51b3\u5b9a\u7684\u8682\u8681 */ class Solution { public: int getLastMoment(int n, vector<int>& left, vector<int>& right) { int max=INT_MIN; for(int& i:left){ if(i>max) max = i; } int min = INT_MAX; for(int& i:right){ if(i<min) min = i; } return max>n - min?max:n - min; } };","title":1503},{"location":"1503.html#_1","text":"\u6709\u4e00\u5757\u6728\u677f\uff0c\u957f\u5ea6\u4e3a n \u4e2a \u5355\u4f4d \u3002\u4e00\u4e9b\u8682\u8681\u5728\u6728\u677f\u4e0a\u79fb\u52a8\uff0c\u6bcf\u53ea\u8682\u8681\u90fd\u4ee5 \u6bcf\u79d2\u4e00\u4e2a\u5355\u4f4d \u7684\u901f\u5ea6\u79fb\u52a8\u3002\u5176\u4e2d\uff0c\u4e00\u90e8\u5206\u8682\u8681\u5411 \u5de6 \u79fb\u52a8\uff0c\u5176\u4ed6\u8682\u8681\u5411 \u53f3 \u79fb\u52a8\u3002 \u5f53\u4e24\u53ea\u5411 \u4e0d\u540c \u65b9\u5411\u79fb\u52a8\u7684\u8682\u8681\u5728\u67d0\u4e2a\u70b9\u76f8\u9047\u65f6\uff0c\u5b83\u4eec\u4f1a\u540c\u65f6\u6539\u53d8\u79fb\u52a8\u65b9\u5411\u5e76\u7ee7\u7eed\u79fb\u52a8\u3002\u5047\u8bbe\u66f4\u6539\u65b9\u5411\u4e0d\u4f1a\u82b1\u8d39\u4efb\u4f55\u989d\u5916\u65f6\u95f4\u3002 \u800c\u5f53\u8682\u8681\u5728\u67d0\u4e00\u65f6\u523b t \u5230\u8fbe\u6728\u677f\u7684\u4e00\u7aef\u65f6\uff0c\u5b83\u7acb\u5373\u4ece\u6728\u677f\u4e0a\u6389\u4e0b\u6765\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \u548c\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 left \u4ee5\u53ca right \u3002\u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u6807\u8bc6\u5411\u5de6\u6216\u8005\u5411\u53f3\u79fb\u52a8\u7684\u8682\u8681\u5728 t = 0 \u65f6\u7684\u4f4d\u7f6e\u3002\u8bf7\u4f60\u8fd4\u56de\u6700\u540e\u4e00\u53ea\u8682\u8681\u4ece\u6728\u677f\u4e0a\u6389\u4e0b\u6765\u7684\u65f6\u523b\u3002","title":"\u9898\u76ee:"},{"location":"1503.html#1","text":">\u8f93\u5165\uff1an = 4, left = [4,3], right = [0,1] >\u8f93\u51fa\uff1a4 >\u89e3\u91ca\uff1a\u5982\u4e0a\u56fe\u6240\u793a\uff1a -\u4e0b\u6807 0 \u5904\u7684\u8682\u8681\u547d\u540d\u4e3a A \u5e76\u5411\u53f3\u79fb\u52a8\u3002 -\u4e0b\u6807 1 \u5904\u7684\u8682\u8681\u547d\u540d\u4e3a B \u5e76\u5411\u53f3\u79fb\u52a8\u3002 -\u4e0b\u6807 3 \u5904\u7684\u8682\u8681\u547d\u540d\u4e3a C \u5e76\u5411\u5de6\u79fb\u52a8\u3002 -\u4e0b\u6807 4 \u5904\u7684\u8682\u8681\u547d\u540d\u4e3a D \u5e76\u5411\u5de6\u79fb\u52a8\u3002 \u8bf7\u6ce8\u610f\uff0c\u8682\u8681\u5728\u6728\u677f\u4e0a\u7684\u6700\u540e\u65f6\u523b\u662f t = 4 \u79d2\uff0c\u4e4b\u540e\u8682\u8681\u7acb\u5373\u4ece\u6728\u677f\u4e0a\u6389\u4e0b\u6765\u3002\uff08\u4e5f\u5c31\u662f\u8bf4\u5728 t = 4.0000000001 \u65f6\uff0c\u6728\u677f\u4e0a\u6ca1\u6709\u8682\u8681\uff09\u3002","title":"\u793a\u4f8b1:"},{"location":"1503.html#2","text":">\u8f93\u5165\uff1an = 7, left = [], right = [0,1,2,3,4,5,6,7] >\u8f93\u51fa\uff1a7 >\u89e3\u91ca\uff1a\u6240\u6709\u8682\u8681\u90fd\u5411\u53f3\u79fb\u52a8\uff0c\u4e0b\u6807\u4e3a 0 \u7684\u8682\u8681\u9700\u8981 7 \u79d2\u624d\u80fd\u4ece\u6728\u677f\u4e0a\u6389\u843d\u3002","title":"\u793a\u4f8b2:"},{"location":"1503.html#3","text":">\u8f93\u5165\uff1an = 7, left = [0,1,2,3,4,5,6,7], right = [] >\u8f93\u51fa\uff1a7 >\u89e3\u91ca\uff1a\u6240\u6709\u8682\u8681\u90fd\u5411\u5de6\u79fb\u52a8\uff0c\u4e0b\u6807\u4e3a 7 \u7684\u8682\u8681\u9700\u8981 7 \u79d2\u624d\u80fd\u4ece\u6728\u677f\u4e0a\u6389\u843d\u3002","title":"\u793a\u4f8b3\uff1a"},{"location":"1503.html#4","text":">\u8f93\u5165\uff1an = 9, left = [5], right = [4] >\u8f93\u51fa\uff1a5 >\u89e3\u91ca\uff1at = 1 \u79d2\u65f6\uff0c\u4e24\u53ea\u8682\u8681\u5c06\u56de\u5230\u521d\u59cb\u4f4d\u7f6e\uff0c\u4f46\u79fb\u52a8\u65b9\u5411\u4e0e\u4e4b\u524d\u76f8\u53cd\u3002","title":"\u793a\u4f8b4\uff1a"},{"location":"1503.html#_2","text":"1 <= n <= 10^4 0 <= left.length <= n + 1 0 <= left[i] <= n 0 <= right.length <= n + 1 0 <= right[i] <= n 1 <= left.length + right.length <= n + 1 left \u548c right \u4e2d\u7684\u6240\u6709\u503c\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u503c \u53ea\u80fd\u51fa\u73b0\u5728\u4e8c\u8005\u4e4b\u4e00 \u4e2d\u3002","title":"\u63d0\u793a"},{"location":"1503.html#_3","text":"\"\u4e24\u53ea\u76f8\u9047\u7684\u8682\u8681\u540c\u65f6\u6539\u53d8\u79fb\u52a8\u65b9\u5411\u4e4b\u540e\u7684\u60c5\u5f62\u7b49\u4ef7\u4e8e\u4e24\u53ea\u8682\u8681\u90fd\u4e0d\u6539\u53d8\u79fb\u52a8\u65b9\u5411\". \u2014\u2014 \u5584\u7528\u7b49\u4ef7\u601d\u7ef4 \u66b4\u529b\u6cd5(\u6a21\u62df\u7684)\u65b9\u6cd5\u8ba8\u8bba\u5f88\u660e\u663e\u53ef\u505a\uff0c\u4f46\u5f88\u660e\u663e\u4e0d\u662f\u6700\u4f18\u7684\u505a\u6cd5. \u53c2\u8003\u63d0\u793a\u5e76\u5bf9\u60c5\u51b5\u5206\u7c7b\u8ba8\u8bba\uff0c\u5f88\u660e\u663e\u5f97\u5230\u4e24\u4e2a\u5173\u952e\u5f0f\u5b50: n - right ,\u4e0e left\u3002","title":"\u601d\u8def"},{"location":"1503.html#_4","text":"/* * 1. \u66b4\u529b\u6cd5 * 2. \u5e76\u4e0d\u662f\u6240\u6709\u7684\u8682\u8681\u90fd\u662f\u2018\u6709\u7528\u7684\u2019\uff0c\u8981\u627e\u5230\u6bcf\u4e2a\u65f6\u671f\u8d77\u51b3\u5b9a\u7684\u8682\u8681 */ class Solution { public: int getLastMoment(int n, vector<int>& left, vector<int>& right) { int max=INT_MIN; for(int& i:left){ if(i>max) max = i; } int min = INT_MAX; for(int& i:right){ if(i<min) min = i; } return max>n - min?max:n - min; } };","title":"\u89e3\u7b54:"},{"location":"1508.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums \uff0c\u5b83\u5305\u542b n \u4e2a\u6b63\u6574\u6570\u3002\u4f60\u9700\u8981\u8ba1\u7b97\u6240\u6709\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u548c\uff0c\u5e76\u5c06\u5b83\u4eec\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5305\u542b n * (n + 1) / 2 \u4e2a\u6570\u5b57\u7684\u6570\u7ec4\u3002 \u8bf7\u4f60\u8fd4\u56de\u5728\u65b0\u6570\u7ec4\u4e2d\u4e0b\u6807\u4e3a left \u5230 right \uff08\u4e0b\u6807\u4ece 1 \u5f00\u59cb\uff09\u7684\u6240\u6709\u6570\u5b57\u548c\uff08\u5305\u62ec\u5de6\u53f3\u7aef\u70b9\uff09\u3002\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u8bf7\u4f60\u5c06\u5b83\u5bf9 10^9 + 7 \u53d6\u6a21\u540e\u8fd4\u56de\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [1,2,3,4], n = 4, left = 1, right = 5 >\u8f93\u51fa\uff1a13 >\u89e3\u91ca\uff1a\u6240\u6709\u7684\u5b50\u6570\u7ec4\u548c\u4e3a 1, 3, 6, 10, 2, 5, 9, 3, 7, 4 \u3002\u5c06\u5b83\u4eec\u5347\u5e8f\u6392\u5e8f\u540e\uff0c\u6211\u4eec\u5f97\u5230\u65b0\u7684\u6570\u7ec4 [1, 2, 3, 3, 4, 5, 6, 7, 9, 10] \u3002\u4e0b\u6807\u4ece le = 1 \u5230 ri = 5 \u7684\u548c\u4e3a 1 + 2 + 3 + 3 + 4 = 13 \u3002 \u601d\u8def \u6309\u7167\u9898\u610f\u5199\u51fa\u6765\u5c31\u884c\u4e86 \u89e3\u7b54: //\u6309\u7167\u9898\u610f\u5199\u51fa\u7684\u4ee3\u7801 class Solution { public: int rangeSum(vector<int>& nums, int n, int left, int right) { long res = 0; // vector<int> vec(size); vector<int> vec; for(int i = 0; i < n; ++i) { int tmp = nums[i]; vec.push_back(tmp); // \u538b\u5165 nums[i] for(int j = i + 1; j < n; ++j) { tmp += nums[j]; vec.push_back(tmp); } } //\u6392\u5e8f sort(vec.begin(), vec.end()); //\u8ba1\u7b97 [left-1,right -1] \u7684\u548c for(in# \u6807\u51c6\u7b54\u6848 ```c++ ``` i = left; i <= right; ++i) { res += vec[i-1]; res %= (long)(1e9 + 7); } return res ; } }; \u603b\u7ed3 - \u80fd\u4f18\u5316\u5417?","title":1508},{"location":"1508.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums \uff0c\u5b83\u5305\u542b n \u4e2a\u6b63\u6574\u6570\u3002\u4f60\u9700\u8981\u8ba1\u7b97\u6240\u6709\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u548c\uff0c\u5e76\u5c06\u5b83\u4eec\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5305\u542b n * (n + 1) / 2 \u4e2a\u6570\u5b57\u7684\u6570\u7ec4\u3002 \u8bf7\u4f60\u8fd4\u56de\u5728\u65b0\u6570\u7ec4\u4e2d\u4e0b\u6807\u4e3a left \u5230 right \uff08\u4e0b\u6807\u4ece 1 \u5f00\u59cb\uff09\u7684\u6240\u6709\u6570\u5b57\u548c\uff08\u5305\u62ec\u5de6\u53f3\u7aef\u70b9\uff09\u3002\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u8bf7\u4f60\u5c06\u5b83\u5bf9 10^9 + 7 \u53d6\u6a21\u540e\u8fd4\u56de\u3002","title":"\u9898\u76ee:"},{"location":"1508.html#_2","text":">\u8f93\u5165\uff1anums = [1,2,3,4], n = 4, left = 1, right = 5 >\u8f93\u51fa\uff1a13 >\u89e3\u91ca\uff1a\u6240\u6709\u7684\u5b50\u6570\u7ec4\u548c\u4e3a 1, 3, 6, 10, 2, 5, 9, 3, 7, 4 \u3002\u5c06\u5b83\u4eec\u5347\u5e8f\u6392\u5e8f\u540e\uff0c\u6211\u4eec\u5f97\u5230\u65b0\u7684\u6570\u7ec4 [1, 2, 3, 3, 4, 5, 6, 7, 9, 10] \u3002\u4e0b\u6807\u4ece le = 1 \u5230 ri = 5 \u7684\u548c\u4e3a 1 + 2 + 3 + 3 + 4 = 13 \u3002","title":"\u793a\u4f8b:"},{"location":"1508.html#_3","text":"\u6309\u7167\u9898\u610f\u5199\u51fa\u6765\u5c31\u884c\u4e86","title":"\u601d\u8def"},{"location":"1508.html#_4","text":"//\u6309\u7167\u9898\u610f\u5199\u51fa\u7684\u4ee3\u7801 class Solution { public: int rangeSum(vector<int>& nums, int n, int left, int right) { long res = 0; // vector<int> vec(size); vector<int> vec; for(int i = 0; i < n; ++i) { int tmp = nums[i]; vec.push_back(tmp); // \u538b\u5165 nums[i] for(int j = i + 1; j < n; ++j) { tmp += nums[j]; vec.push_back(tmp); } } //\u6392\u5e8f sort(vec.begin(), vec.end()); //\u8ba1\u7b97 [left-1,right -1] \u7684\u548c for(in# \u6807\u51c6\u7b54\u6848 ```c++ ``` i = left; i <= right; ++i) { res += vec[i-1]; res %= (long)(1e9 + 7); } return res ; } };","title":"\u89e3\u7b54:"},{"location":"1508.html#_5","text":"- \u80fd\u4f18\u5316\u5417?","title":"\u603b\u7ed3"},{"location":"1509.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums \uff0c\u6bcf\u6b21\u64cd\u4f5c\u4f60\u53ef\u4ee5\u9009\u62e9 nums \u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u5e76\u5c06\u5b83\u6539\u6210\u4efb\u610f\u503c\u3002 \u8bf7\u4f60\u8fd4\u56de\u4e09\u6b21\u64cd\u4f5c\u540e\uff0c nums \u4e2d\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [5,3,2,4] >\u8f93\u51fa\uff1a0 >\u89e3\u91ca\uff1a\u5c06\u6570\u7ec4 [5,3,2,4] \u53d8\u6210 [2,2,2,2].\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u4e3a 2-2 = 0 \u3002 \u601d\u8def 1. \u76f4\u63a5\u6392\u5e8f\uff0c\u627e\u5230\u6700\u5927\u7684\u56db\u4e2a\u6570\u548c\u6700\u5c0f\u7684\u56db\u4e2a\u6570 2. \u8d2a\u5fc3\u7b97\u6cd5, \u7ef4\u62a48 \u4e2a int \u7c7b\u578b\uff0c\u4fdd\u6301\u56db\u4e2a\u6700\u5927\u7684\u503c\uff0c\u56db\u4e2a\u6700\u5c0f\u7684\u503c \u89e3\u7b54: //\u65b9\u6cd51 class Solution { public: int minDifference(vector<int>& nums) { int res = INT_MAX; sort(nums.begin(), nums.end()); for( int i = 0; i < 4; ++i) { res = min(res, nums[ n - 4 + i ] - nums[i] ); } return res; } }; //\u65b9\u6cd52 class Solution { public: int minDifference(vector<int>& nums) { int res = INT_MAX; if (nums.size() <= 4) { return 0; } vector<int> max(4, INT_MIN); vector<int> min(4, INT_MAX); for( int i = 0; i < nums.size(); ++i) { int add = 0; while( add < 4 && nums[i] < max[add]){ ++add; } if( add < 4) { for(int j = 3;j>add;--j) { max[j] = max[j-1]; } max [add] = nums[i]; } add = 0; while( add < 4 && min[add] < nums[i] ){ ++add; } if( add <4) { for(int j = 3;j>add;--j) { min[j] = min[j-1]; } min [add] = nums[i]; } } for (int i = 0; i < 4; i++) { res = std::min(res, max[i] - min[3 - i]); } return res; } };","title":1509},{"location":"1509.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums \uff0c\u6bcf\u6b21\u64cd\u4f5c\u4f60\u53ef\u4ee5\u9009\u62e9 nums \u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u5e76\u5c06\u5b83\u6539\u6210\u4efb\u610f\u503c\u3002 \u8bf7\u4f60\u8fd4\u56de\u4e09\u6b21\u64cd\u4f5c\u540e\uff0c nums \u4e2d\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002","title":"\u9898\u76ee:"},{"location":"1509.html#_2","text":">\u8f93\u5165\uff1anums = [5,3,2,4] >\u8f93\u51fa\uff1a0 >\u89e3\u91ca\uff1a\u5c06\u6570\u7ec4 [5,3,2,4] \u53d8\u6210 [2,2,2,2].\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u4e3a 2-2 = 0 \u3002","title":"\u793a\u4f8b:"},{"location":"1509.html#_3","text":"1. \u76f4\u63a5\u6392\u5e8f\uff0c\u627e\u5230\u6700\u5927\u7684\u56db\u4e2a\u6570\u548c\u6700\u5c0f\u7684\u56db\u4e2a\u6570 2. \u8d2a\u5fc3\u7b97\u6cd5, \u7ef4\u62a48 \u4e2a int \u7c7b\u578b\uff0c\u4fdd\u6301\u56db\u4e2a\u6700\u5927\u7684\u503c\uff0c\u56db\u4e2a\u6700\u5c0f\u7684\u503c","title":"\u601d\u8def"},{"location":"1509.html#_4","text":"//\u65b9\u6cd51 class Solution { public: int minDifference(vector<int>& nums) { int res = INT_MAX; sort(nums.begin(), nums.end()); for( int i = 0; i < 4; ++i) { res = min(res, nums[ n - 4 + i ] - nums[i] ); } return res; } }; //\u65b9\u6cd52 class Solution { public: int minDifference(vector<int>& nums) { int res = INT_MAX; if (nums.size() <= 4) { return 0; } vector<int> max(4, INT_MIN); vector<int> min(4, INT_MAX); for( int i = 0; i < nums.size(); ++i) { int add = 0; while( add < 4 && nums[i] < max[add]){ ++add; } if( add < 4) { for(int j = 3;j>add;--j) { max[j] = max[j-1]; } max [add] = nums[i]; } add = 0; while( add < 4 && min[add] < nums[i] ){ ++add; } if( add <4) { for(int j = 3;j>add;--j) { min[j] = min[j-1]; } min [add] = nums[i]; } } for (int i = 0; i < 4; i++) { res = std::min(res, max[i] - min[3 - i]); } return res; } };","title":"\u89e3\u7b54:"},{"location":"1535.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u7531 \u4e0d\u540c \u6574\u6570\u7ec4\u6210\u7684\u6574\u6570\u6570\u7ec4 arr \u548c\u4e00\u4e2a\u6574\u6570 k \u3002 \u6bcf\u56de\u5408\u6e38\u620f\u90fd\u5728\u6570\u7ec4\u7684\u524d\u4e24\u4e2a\u5143\u7d20\uff08\u5373 arr[0] \u548c arr[1] \uff09\u4e4b\u95f4\u8fdb\u884c\u3002 \u6bd4\u8f83 arr[0] \u4e0e arr[1] \u7684\u5927\u5c0f\uff0c\u8f83\u5927\u7684\u6574\u6570\u5c06\u4f1a\u53d6\u5f97\u8fd9\u4e00\u56de\u5408\u7684\u80dc\u5229\u5e76\u4fdd\u7559\u5728\u4f4d\u7f6e 0 \uff0c\u8f83\u5c0f\u7684\u6574\u6570\u79fb\u81f3\u6570\u7ec4\u7684\u672b\u5c3e\u3002 \u5f53\u4e00\u4e2a\u6574\u6570\u8d62\u5f97 k \u4e2a\u8fde\u7eed\u56de\u5408\u65f6\uff0c\u6e38\u620f\u7ed3\u675f\uff0c\u8be5\u6574\u6570\u5c31\u662f\u6bd4\u8d5b\u7684 \u8d62\u5bb6 \u3002\u8fd4\u56de\u8d62\u5f97\u6bd4\u8d5b\u7684\u6574\u6570\u3002 \u9898\u76ee\u6570\u636e \u4fdd\u8bc1 \u6e38\u620f\u5b58\u5728\u8d62\u5bb6\u3002 \u793a\u4f8b1: >\u8f93\u5165\uff1aarr = [2,1,3,5,4,6,7], k = 2 >\u8f93\u51fa\uff1a5 \u793a\u4f8b2: >\u8f93\u5165\uff1aarr = [3,2,1], k = 10 >\u8f93\u51fa\uff1a3 \u793a\u4f8b2\uff1a >\u8f93\u5165\uff1aarr = [1,9,8,2,3,7,6,4,5], k = 7 >\u8f93\u51fa\uff1a9 \u793a\u4f8b3\uff1a >\u8f93\u5165\uff1aarr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000 >\u8f93\u51fa\uff1a99 \u63d0\u793a 2 <= arr.length <= 10^5 1 <= arr[i] <= 10^6 arr \u6240\u542b\u7684\u6574\u6570 \u5404\u4e0d\u76f8\u540c \u3002 1 <= k <= 10^9 \u601d\u8def \u901a\u8fc7\u6bd4\u8f83\u5404\u4e2a\u793a\u4f8b\u7684\u6bd4\u8f83\u6b21\u6570\uff0c\u4e0d\u96be\u5f97\u5230\"\u8fd9\u5176\u5b9e\u662f\u4e00\u8d9f\u5192\u6ce1\u6392\u5e8f\"\u7684\u6bd4\u8f83\u6b21\u5e8f.\u56e0\u6b64\u6709\u4ee5\u4e0b\u7684\u89e3\u7b541\uff1a \u89e3\u7b541: int getWinner(int* arr, int arrSize, int k){ int m = 0; // for(int i=0;i<arrSize -1; i++>) // for(int j=0;j<arrSize -1 -i ;j++>) for(int i=0,j=0;j<arrSize-1;j++){ if(arr[j] > arr[j+1]){ swap(arr + j,arr + j +1); // \u4ea4\u6362\u7701\u7565 m++; if(m >= k ){ return arr[j+1]; } //printf(\"%d \\n\",m); }else{ m = 1; } } return arr[arrSize-1]; } \u6539\u8fdb1 /*\u5728\u63d0\u4ea4\u540e\u9762\u5bf9\u4ee5\u4e0b\u7684\u60c5\u51b5\u51fa\u73b0\u9519\u8bef * \u8f93\u5165\uff1a[1,25,35,42,68,70] 1 * \u8f93\u51fa\uff1a70 ,\u9884\u671f\u7ed3\u679c:25 * \u4e0d\u96be\u5f97\u51fa\u5f53 k==1 \u4e3a\u7279\u6b8a\u60c5\u51b5\uff0c\u4e0em\u7684\u521d\u503c\u4e3a0\u6709\u5173. */ // \u5728for\u5faa\u73af\u524d\u6dfb\u52a0\u4ee3\u7801 if(k ==1){ return arr[0]>arr[1]?arr[0]:arr[1]; } // \u4f46\u6267\u884c\u65f6\u95f4\u4e0e\u5185\u5b58\u5747\u8868\u73b0\u4e0d\u597d\uff0c\u8fdb\u884c \u6700\u7ec8\u7248 // \u5206\u6790\u4e0a\u8ff0\u4ee3\u7801\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u6700\u4f18\uff0c\u8003\u8651\u4ee3\u7801\u4f18\u5316 // \u5927\u90e8\u5206\u65f6\u95f4\u4e3aswap\u51fd\u6570\u5360\u7528\uff0c\u8003\u8651\"\u5047\u4ea4\u6362\"(\u5373\u7528\u4e0b\u6807\u6807\u8bb0\u51fa\u5f53\u524d\u83b7\u80dc\u7684\u5143\u7d20,\u5931\u8d25\u7684\u5143\u7d20\u4e0d\u53ef\u80fd\u5728\u53c2\u52a0\u6bd4\u8d5b)\uff0c\u6709\u5982\u4e0b\u7684\u4ee3\u7801 int getWinner(int* arr, int arrSize, int k){ int m = 0; int index = 0; //\u6807\u8bb0\u6700\u5927\u503c if(k ==1){ return arr[0]>arr[1]?arr[0]:arr[1]; } for(int i=0,j=0;j<arrSize-1;j++){ if(arr[index] > arr[j+1]){ //swap(arr + j,arr + j +1); m++; if(m >= k ){ return arr[index]; } }else{ index = j +1; m = 1; } } return arr[index]; }","title":1535},{"location":"1535.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u7531 \u4e0d\u540c \u6574\u6570\u7ec4\u6210\u7684\u6574\u6570\u6570\u7ec4 arr \u548c\u4e00\u4e2a\u6574\u6570 k \u3002 \u6bcf\u56de\u5408\u6e38\u620f\u90fd\u5728\u6570\u7ec4\u7684\u524d\u4e24\u4e2a\u5143\u7d20\uff08\u5373 arr[0] \u548c arr[1] \uff09\u4e4b\u95f4\u8fdb\u884c\u3002 \u6bd4\u8f83 arr[0] \u4e0e arr[1] \u7684\u5927\u5c0f\uff0c\u8f83\u5927\u7684\u6574\u6570\u5c06\u4f1a\u53d6\u5f97\u8fd9\u4e00\u56de\u5408\u7684\u80dc\u5229\u5e76\u4fdd\u7559\u5728\u4f4d\u7f6e 0 \uff0c\u8f83\u5c0f\u7684\u6574\u6570\u79fb\u81f3\u6570\u7ec4\u7684\u672b\u5c3e\u3002 \u5f53\u4e00\u4e2a\u6574\u6570\u8d62\u5f97 k \u4e2a\u8fde\u7eed\u56de\u5408\u65f6\uff0c\u6e38\u620f\u7ed3\u675f\uff0c\u8be5\u6574\u6570\u5c31\u662f\u6bd4\u8d5b\u7684 \u8d62\u5bb6 \u3002\u8fd4\u56de\u8d62\u5f97\u6bd4\u8d5b\u7684\u6574\u6570\u3002 \u9898\u76ee\u6570\u636e \u4fdd\u8bc1 \u6e38\u620f\u5b58\u5728\u8d62\u5bb6\u3002","title":"\u9898\u76ee:"},{"location":"1535.html#1","text":">\u8f93\u5165\uff1aarr = [2,1,3,5,4,6,7], k = 2 >\u8f93\u51fa\uff1a5","title":"\u793a\u4f8b1:"},{"location":"1535.html#2","text":">\u8f93\u5165\uff1aarr = [3,2,1], k = 10 >\u8f93\u51fa\uff1a3","title":"\u793a\u4f8b2:"},{"location":"1535.html#2_1","text":">\u8f93\u5165\uff1aarr = [1,9,8,2,3,7,6,4,5], k = 7 >\u8f93\u51fa\uff1a9","title":"\u793a\u4f8b2\uff1a"},{"location":"1535.html#3","text":">\u8f93\u5165\uff1aarr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000 >\u8f93\u51fa\uff1a99","title":"\u793a\u4f8b3\uff1a"},{"location":"1535.html#_2","text":"2 <= arr.length <= 10^5 1 <= arr[i] <= 10^6 arr \u6240\u542b\u7684\u6574\u6570 \u5404\u4e0d\u76f8\u540c \u3002 1 <= k <= 10^9","title":"\u63d0\u793a"},{"location":"1535.html#_3","text":"\u901a\u8fc7\u6bd4\u8f83\u5404\u4e2a\u793a\u4f8b\u7684\u6bd4\u8f83\u6b21\u6570\uff0c\u4e0d\u96be\u5f97\u5230\"\u8fd9\u5176\u5b9e\u662f\u4e00\u8d9f\u5192\u6ce1\u6392\u5e8f\"\u7684\u6bd4\u8f83\u6b21\u5e8f.\u56e0\u6b64\u6709\u4ee5\u4e0b\u7684\u89e3\u7b541\uff1a","title":"\u601d\u8def"},{"location":"1535.html#1_1","text":"int getWinner(int* arr, int arrSize, int k){ int m = 0; // for(int i=0;i<arrSize -1; i++>) // for(int j=0;j<arrSize -1 -i ;j++>) for(int i=0,j=0;j<arrSize-1;j++){ if(arr[j] > arr[j+1]){ swap(arr + j,arr + j +1); // \u4ea4\u6362\u7701\u7565 m++; if(m >= k ){ return arr[j+1]; } //printf(\"%d \\n\",m); }else{ m = 1; } } return arr[arrSize-1]; }","title":"\u89e3\u7b541:"},{"location":"1535.html#1_2","text":"/*\u5728\u63d0\u4ea4\u540e\u9762\u5bf9\u4ee5\u4e0b\u7684\u60c5\u51b5\u51fa\u73b0\u9519\u8bef * \u8f93\u5165\uff1a[1,25,35,42,68,70] 1 * \u8f93\u51fa\uff1a70 ,\u9884\u671f\u7ed3\u679c:25 * \u4e0d\u96be\u5f97\u51fa\u5f53 k==1 \u4e3a\u7279\u6b8a\u60c5\u51b5\uff0c\u4e0em\u7684\u521d\u503c\u4e3a0\u6709\u5173. */ // \u5728for\u5faa\u73af\u524d\u6dfb\u52a0\u4ee3\u7801 if(k ==1){ return arr[0]>arr[1]?arr[0]:arr[1]; } // \u4f46\u6267\u884c\u65f6\u95f4\u4e0e\u5185\u5b58\u5747\u8868\u73b0\u4e0d\u597d\uff0c\u8fdb\u884c","title":"\u6539\u8fdb1"},{"location":"1535.html#_4","text":"// \u5206\u6790\u4e0a\u8ff0\u4ee3\u7801\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u6700\u4f18\uff0c\u8003\u8651\u4ee3\u7801\u4f18\u5316 // \u5927\u90e8\u5206\u65f6\u95f4\u4e3aswap\u51fd\u6570\u5360\u7528\uff0c\u8003\u8651\"\u5047\u4ea4\u6362\"(\u5373\u7528\u4e0b\u6807\u6807\u8bb0\u51fa\u5f53\u524d\u83b7\u80dc\u7684\u5143\u7d20,\u5931\u8d25\u7684\u5143\u7d20\u4e0d\u53ef\u80fd\u5728\u53c2\u52a0\u6bd4\u8d5b)\uff0c\u6709\u5982\u4e0b\u7684\u4ee3\u7801 int getWinner(int* arr, int arrSize, int k){ int m = 0; int index = 0; //\u6807\u8bb0\u6700\u5927\u503c if(k ==1){ return arr[0]>arr[1]?arr[0]:arr[1]; } for(int i=0,j=0;j<arrSize-1;j++){ if(arr[index] > arr[j+1]){ //swap(arr + j,arr + j +1); m++; if(m >= k ){ return arr[index]; } }else{ index = j +1; m = 1; } } return arr[index]; }","title":"\u6700\u7ec8\u7248"},{"location":"1552.html","text":"\u9898\u76ee: \u5728\u4ee3\u53f7\u4e3a C-137 \u7684\u5730\u7403\u4e0a\uff0cRick \u53d1\u73b0\u5982\u679c\u4ed6\u5c06\u4e24\u4e2a\u7403\u653e\u5728\u4ed6\u65b0\u53d1\u660e\u7684\u7bee\u5b50\u91cc\uff0c\u5b83\u4eec\u4e4b\u95f4\u4f1a\u5f62\u6210\u7279\u6b8a\u5f62\u5f0f\u7684\u78c1\u529b\u3002 Rick \u6709 n \u4e2a\u7a7a\u7684\u7bee\u5b50\uff0c\u7b2c i \u4e2a\u7bee\u5b50\u7684\u4f4d\u7f6e\u5728 position[i] \uff0cMorty\u60f3\u628a m \u4e2a\u7403\u653e\u5230\u8fd9\u4e9b\u7bee\u5b50\u91cc\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u7403\u95f4\u6700\u5c0f\u78c1\u529b\u6700\u5927\u3002 \u5df2\u77e5\u4e24\u4e2a\u7403\u5982\u679c\u5206\u522b\u4f4d\u4e8e x \u548c y \uff0c\u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u7684\u78c1\u529b\u4e3a |x - y| \u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 position \u548c\u4e00\u4e2a\u6574\u6570 m \uff0c\u8bf7\u4f60\u8fd4\u56de\u6700\u5927\u5316\u7684\u6700\u5c0f\u78c1\u529b\u3002 \u793a\u4f8b1: >\u8f93\u5165\uff1aposition = [1,2,3,4,7], m = 3 >\u8f93\u51fa\uff1a3 >\u89e3\u91ca\uff1a\u5c06 3 \u4e2a\u7403\u5206\u522b\u653e\u5165\u4f4d\u4e8e 1\uff0c4 \u548c 7 \u7684\u4e09\u4e2a\u7bee\u5b50\uff0c\u4e24\u7403\u95f4\u7684\u78c1\u529b\u5206\u522b\u4e3a [3, 3, 6]\u3002\u6700\u5c0f\u78c1\u529b\u4e3a 3 \u3002\u6211\u4eec\u6ca1\u529e\u6cd5\u8ba9\u6700\u5c0f\u78c1\u529b\u5927\u4e8e 3 \u3002 \u793a\u4f8b2: >\u8f93\u5165\uff1aposition = [5,4,3,2,1,1000000000], m = 2 >\u8f93\u51fa\uff1a999999999 >\u89e3\u91ca\uff1a\u6211\u4eec\u4f7f\u7528\u4f4d\u4e8e 1 \u548c 1000000000 \u7684\u7bee\u5b50\u65f6\u6700\u5c0f\u78c1\u529b\u6700\u5927\u3002 \u601d\u8def \u7b97\u6cd5\u7684\u5173\u952e\u70b9\u5728\u4e8e\u660e\u786eans\u7684\u6700\u5c0f\u503c\uff0c\u548c\u6700\u5927\u503c\u3002 \u6309\u7167\u6211\u7684\u601d\u8def\u662f\u4e00\u5b9a\u662f\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u5c1d\u8bd5 \u6240\u6709\u7684\u6570\u503c\u3002\u5b9e\u9645\u7b97\u6cd5\u7528\u7684\u662f\u4e8c\u5206\u67e5\u627e\uff0c\u82e5\u5f53\u524d\u8ba1\u7b97\u51fa\u7684\u6700\u5c0f\u78c1\u529b\u6ee1\u8db3\u6761\u4ef6\uff0c\u6211\u4eec\u8981\u5c06\u5de6\u8fb9\u754c\u53f3\u79fb\uff0c\u53bb\u5224\u65ad\u7a0d\u5927\u4e00\u70b9\u7684\u6570\u503c\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff1b\u82e5\u5f53\u524d\u8ba1\u7b97\u51fa\u7684\u6700\u5c0f\u78c1\u529b\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u6211\u4eec\u8981\u5c06\u53f3\u8fb9\u754c\u5de6\u79fb\uff0c\u5224\u65ad\u7a0d\u5c0f\u7684\u6570\u503c\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002 - \u5b9e\u9645\u4e0a\u6709\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\uff0c\u5e94\u8be5\u60f3\u5230\u4e8c\u5206\u67e5\u627e \u5982\u4f55\u68c0\u6d4b\u5f53\u524dans\u662f\u5426\u5408\u6cd5\uff1a(\u8d2a\u5fc3\u7b97\u6cd5) **\u76f8\u90bb\u5c0f\u7403\u7684\u95f4\u8ddd\u6700\u5c0f\u503c\u5927\u4e8e\u7b49\u4e8e x\uff0c\u5176\u5b9e\u5c31\u7b49\u4ef7\u4e8e\u76f8\u90bb\u5c0f\u7403\u7684\u95f4\u8ddd\u5747\u5927\u4e8e\u7b49\u4e8e x** \u6211\u4eec\u9884\u5148\u5bf9\u7ed9\u5b9a\u7684\u7bee\u5b50\u7684\u4f4d\u7f6e\u8fdb\u884c\u6392\u5e8f\uff0c\u90a3\u4e48\u4ece\u8d2a\u5fc3\u7684\u89d2\u5ea6\u8003\u8651\uff0c\u7b2c\u4e00\u4e2a\u5c0f\u7403\u653e\u7f6e\u7684\u7bee\u5b50\u4e00\u5b9a\u662f position \u6700\u5c0f\u7684\u7bee\u5b50\uff0c\u5373\u6392\u5e8f\u540e\u7684\u7b2c\u4e00\u4e2a\u7bee\u5b50\u3002\u90a3\u4e48\u4e3a\u4e86\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u7b2c\u4e8c\u4e2a\u5c0f\u7403\u653e\u7f6e\u7684\u4f4d\u7f6e\u4e00\u5b9a\u8981\u5927\u4e8e\u7b49\u4e8e position[0]+x\uff0c\u63a5\u4e0b\u6765\u540c\u7406\u3002\u56e0\u6b64\u6211\u4eec\u4ece\u524d\u5f80\u540e\u626b position \u6570\u7ec4\uff0c\u770b\u5728\u5f53\u524d\u7b54\u6848 x \u4e0b\u6211\u4eec\u6700\u591a\u80fd\u5728\u7bee\u5b50\u91cc\u653e\u591a\u5c11\u4e2a\u5c0f\u7403\uff0c\u6211\u4eec\u8bb0\u8fd9\u4e2a\u6570\u91cf\u4e3a cnt\uff0c\u5982\u679c cnt \u5927\u4e8e\u7b49\u4e8e m\uff0c\u90a3\u4e48\u8bf4\u660e\u5f53\u524d\u7b54\u6848\u4e0b\u6211\u4eec\u7684\u8d2a\u5fc3\u7b56\u7565\u80fd\u653e\u4e0b m \u4e2a\u5c0f\u7403\u4e14\u5b83\u4eec\u95f4\u8ddd\u5747\u5927\u4e8e\u7b49\u4e8e x \uff0c\u4e3a\u5408\u6cd5\u7684\u7b54\u6848\uff0c\u5426\u5219\u4e0d\u5408\u6cd5\u3002 \u89e3\u7b54: class Solution { private: bool check(vector<int>& position, int mid,int m){ int pre = position.front(); int cnt = 1; for(int i=1; i < position.size() ;i++){ if(position[i] - pre >=mid){ pre = position[i]; cnt ++; } } return cnt>=m; } public: int maxDistance(vector<int>& position, int m) { // \u5bf9\u6240\u6709\u6846\u8fdb\u884c\u6392\u5e8f sort(position.begin(),position.end()); // \u6700\u5927\u6700\u5c0f\u78c1\u529b\u7684\u8303\u56f4 int min = 1; //\u6700\u5c0f\u8303\u56f4\u9ed8\u8ba4\u4e3a1\uff0c\u5176\u5b9e\u5e94\u8be5\u904d\u5386\u5f53\u524d\u5411\u91cf\uff0c\u6c42\u7684\u4e24\u4e24\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u7684\u6700\u5c0f\u95f4\u9694 int max = position.back() - position.front(); //\u6700\u5927\u8303\u56f4\u9ed8\u8ba4\u4e3a\u6700\u540e\u5143\u7d20\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5dee\u503c\uff0c\u5b9e\u9645\u5e94\u8be5\u662f max / m-1 \u4e2a\u95f4\u9694 //max = max /(m-1); int ans = -1; // \u9ed8\u8ba4\u521d\u59cb\u503c-1 // \u5728ans\u53ef\u80fd\u7684\u8303\u56f4\u5185\u641c\u7d22 while(min<=max){ int mid = (min+max) / 2; if(check(position,mid,m)){ ans = mid; min = mid + 1; }else{ max = mid -1; } } return ans; } };","title":1552},{"location":"1552.html#_1","text":"\u5728\u4ee3\u53f7\u4e3a C-137 \u7684\u5730\u7403\u4e0a\uff0cRick \u53d1\u73b0\u5982\u679c\u4ed6\u5c06\u4e24\u4e2a\u7403\u653e\u5728\u4ed6\u65b0\u53d1\u660e\u7684\u7bee\u5b50\u91cc\uff0c\u5b83\u4eec\u4e4b\u95f4\u4f1a\u5f62\u6210\u7279\u6b8a\u5f62\u5f0f\u7684\u78c1\u529b\u3002 Rick \u6709 n \u4e2a\u7a7a\u7684\u7bee\u5b50\uff0c\u7b2c i \u4e2a\u7bee\u5b50\u7684\u4f4d\u7f6e\u5728 position[i] \uff0cMorty\u60f3\u628a m \u4e2a\u7403\u653e\u5230\u8fd9\u4e9b\u7bee\u5b50\u91cc\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u7403\u95f4\u6700\u5c0f\u78c1\u529b\u6700\u5927\u3002 \u5df2\u77e5\u4e24\u4e2a\u7403\u5982\u679c\u5206\u522b\u4f4d\u4e8e x \u548c y \uff0c\u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u7684\u78c1\u529b\u4e3a |x - y| \u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 position \u548c\u4e00\u4e2a\u6574\u6570 m \uff0c\u8bf7\u4f60\u8fd4\u56de\u6700\u5927\u5316\u7684\u6700\u5c0f\u78c1\u529b\u3002","title":"\u9898\u76ee:"},{"location":"1552.html#1","text":">\u8f93\u5165\uff1aposition = [1,2,3,4,7], m = 3 >\u8f93\u51fa\uff1a3 >\u89e3\u91ca\uff1a\u5c06 3 \u4e2a\u7403\u5206\u522b\u653e\u5165\u4f4d\u4e8e 1\uff0c4 \u548c 7 \u7684\u4e09\u4e2a\u7bee\u5b50\uff0c\u4e24\u7403\u95f4\u7684\u78c1\u529b\u5206\u522b\u4e3a [3, 3, 6]\u3002\u6700\u5c0f\u78c1\u529b\u4e3a 3 \u3002\u6211\u4eec\u6ca1\u529e\u6cd5\u8ba9\u6700\u5c0f\u78c1\u529b\u5927\u4e8e 3 \u3002","title":"\u793a\u4f8b1:"},{"location":"1552.html#2","text":">\u8f93\u5165\uff1aposition = [5,4,3,2,1,1000000000], m = 2 >\u8f93\u51fa\uff1a999999999 >\u89e3\u91ca\uff1a\u6211\u4eec\u4f7f\u7528\u4f4d\u4e8e 1 \u548c 1000000000 \u7684\u7bee\u5b50\u65f6\u6700\u5c0f\u78c1\u529b\u6700\u5927\u3002","title":"\u793a\u4f8b2:"},{"location":"1552.html#_2","text":"\u7b97\u6cd5\u7684\u5173\u952e\u70b9\u5728\u4e8e\u660e\u786eans\u7684\u6700\u5c0f\u503c\uff0c\u548c\u6700\u5927\u503c\u3002 \u6309\u7167\u6211\u7684\u601d\u8def\u662f\u4e00\u5b9a\u662f\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u5c1d\u8bd5 \u6240\u6709\u7684\u6570\u503c\u3002\u5b9e\u9645\u7b97\u6cd5\u7528\u7684\u662f\u4e8c\u5206\u67e5\u627e\uff0c\u82e5\u5f53\u524d\u8ba1\u7b97\u51fa\u7684\u6700\u5c0f\u78c1\u529b\u6ee1\u8db3\u6761\u4ef6\uff0c\u6211\u4eec\u8981\u5c06\u5de6\u8fb9\u754c\u53f3\u79fb\uff0c\u53bb\u5224\u65ad\u7a0d\u5927\u4e00\u70b9\u7684\u6570\u503c\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff1b\u82e5\u5f53\u524d\u8ba1\u7b97\u51fa\u7684\u6700\u5c0f\u78c1\u529b\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u6211\u4eec\u8981\u5c06\u53f3\u8fb9\u754c\u5de6\u79fb\uff0c\u5224\u65ad\u7a0d\u5c0f\u7684\u6570\u503c\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002 - \u5b9e\u9645\u4e0a\u6709\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\uff0c\u5e94\u8be5\u60f3\u5230\u4e8c\u5206\u67e5\u627e \u5982\u4f55\u68c0\u6d4b\u5f53\u524dans\u662f\u5426\u5408\u6cd5\uff1a(\u8d2a\u5fc3\u7b97\u6cd5) **\u76f8\u90bb\u5c0f\u7403\u7684\u95f4\u8ddd\u6700\u5c0f\u503c\u5927\u4e8e\u7b49\u4e8e x\uff0c\u5176\u5b9e\u5c31\u7b49\u4ef7\u4e8e\u76f8\u90bb\u5c0f\u7403\u7684\u95f4\u8ddd\u5747\u5927\u4e8e\u7b49\u4e8e x** \u6211\u4eec\u9884\u5148\u5bf9\u7ed9\u5b9a\u7684\u7bee\u5b50\u7684\u4f4d\u7f6e\u8fdb\u884c\u6392\u5e8f\uff0c\u90a3\u4e48\u4ece\u8d2a\u5fc3\u7684\u89d2\u5ea6\u8003\u8651\uff0c\u7b2c\u4e00\u4e2a\u5c0f\u7403\u653e\u7f6e\u7684\u7bee\u5b50\u4e00\u5b9a\u662f position \u6700\u5c0f\u7684\u7bee\u5b50\uff0c\u5373\u6392\u5e8f\u540e\u7684\u7b2c\u4e00\u4e2a\u7bee\u5b50\u3002\u90a3\u4e48\u4e3a\u4e86\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u7b2c\u4e8c\u4e2a\u5c0f\u7403\u653e\u7f6e\u7684\u4f4d\u7f6e\u4e00\u5b9a\u8981\u5927\u4e8e\u7b49\u4e8e position[0]+x\uff0c\u63a5\u4e0b\u6765\u540c\u7406\u3002\u56e0\u6b64\u6211\u4eec\u4ece\u524d\u5f80\u540e\u626b position \u6570\u7ec4\uff0c\u770b\u5728\u5f53\u524d\u7b54\u6848 x \u4e0b\u6211\u4eec\u6700\u591a\u80fd\u5728\u7bee\u5b50\u91cc\u653e\u591a\u5c11\u4e2a\u5c0f\u7403\uff0c\u6211\u4eec\u8bb0\u8fd9\u4e2a\u6570\u91cf\u4e3a cnt\uff0c\u5982\u679c cnt \u5927\u4e8e\u7b49\u4e8e m\uff0c\u90a3\u4e48\u8bf4\u660e\u5f53\u524d\u7b54\u6848\u4e0b\u6211\u4eec\u7684\u8d2a\u5fc3\u7b56\u7565\u80fd\u653e\u4e0b m \u4e2a\u5c0f\u7403\u4e14\u5b83\u4eec\u95f4\u8ddd\u5747\u5927\u4e8e\u7b49\u4e8e x \uff0c\u4e3a\u5408\u6cd5\u7684\u7b54\u6848\uff0c\u5426\u5219\u4e0d\u5408\u6cd5\u3002","title":"\u601d\u8def"},{"location":"1552.html#_3","text":"class Solution { private: bool check(vector<int>& position, int mid,int m){ int pre = position.front(); int cnt = 1; for(int i=1; i < position.size() ;i++){ if(position[i] - pre >=mid){ pre = position[i]; cnt ++; } } return cnt>=m; } public: int maxDistance(vector<int>& position, int m) { // \u5bf9\u6240\u6709\u6846\u8fdb\u884c\u6392\u5e8f sort(position.begin(),position.end()); // \u6700\u5927\u6700\u5c0f\u78c1\u529b\u7684\u8303\u56f4 int min = 1; //\u6700\u5c0f\u8303\u56f4\u9ed8\u8ba4\u4e3a1\uff0c\u5176\u5b9e\u5e94\u8be5\u904d\u5386\u5f53\u524d\u5411\u91cf\uff0c\u6c42\u7684\u4e24\u4e24\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u7684\u6700\u5c0f\u95f4\u9694 int max = position.back() - position.front(); //\u6700\u5927\u8303\u56f4\u9ed8\u8ba4\u4e3a\u6700\u540e\u5143\u7d20\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5dee\u503c\uff0c\u5b9e\u9645\u5e94\u8be5\u662f max / m-1 \u4e2a\u95f4\u9694 //max = max /(m-1); int ans = -1; // \u9ed8\u8ba4\u521d\u59cb\u503c-1 // \u5728ans\u53ef\u80fd\u7684\u8303\u56f4\u5185\u641c\u7d22 while(min<=max){ int mid = (min+max) / 2; if(check(position,mid,m)){ ans = mid; min = mid + 1; }else{ max = mid -1; } } return ans; } };","title":"\u89e3\u7b54:"},{"location":"1561.html","text":"\u9898\u76ee: \u6709 3n \u5806\u6570\u76ee\u4e0d\u4e00\u7684\u786c\u5e01\uff0c\u4f60\u548c\u4f60\u7684\u670b\u53cb\u4eec\u6253\u7b97\u6309\u4ee5\u4e0b\u65b9\u5f0f\u5206\u786c\u5e01\uff1a \u6bcf\u4e00\u8f6e\u4e2d\uff0c\u4f60\u5c06\u4f1a\u9009\u51fa \u4efb\u610f 3 \u5806\u786c\u5e01\uff08\u4e0d\u4e00\u5b9a\u8fde\u7eed\uff09\u3002 Alice \u5c06\u4f1a\u53d6\u8d70\u786c\u5e01\u6570\u91cf\u6700\u591a\u7684\u90a3\u4e00\u5806\u3002 \u4f60\u5c06\u4f1a\u53d6\u8d70\u786c\u5e01\u6570\u91cf\u7b2c\u4e8c\u591a\u7684\u90a3\u4e00\u5806\u3002 Bob \u5c06\u4f1a\u53d6\u8d70\u6700\u540e\u4e00\u5806\u3002 \u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u786c\u5e01\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 piles \uff0c\u5176\u4e2d piles[i] \u662f\u7b2c i \u5806\u4e2d\u786c\u5e01\u7684\u6570\u76ee\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u786c\u5e01\u6570\u76ee\u3002 \u793a\u4f8b: \u8f93\u5165\uff1apiles = [2,4,1,2,7,8] \u8f93\u51fa\uff1a9 \u89e3\u91ca\uff1a\u9009\u51fa (2, 7, 8) \uff0cAlice \u53d6\u8d70 8 \u679a\u786c\u5e01\u7684\u90a3\u5806\uff0c\u4f60\u53d6\u8d70 7 \u679a\u786c\u5e01\u7684\u90a3\u5806\uff0cBob \u53d6\u8d70\u6700\u540e\u4e00\u5806\u3002 \u9009\u51fa (1, 2, 4) , Alice \u53d6\u8d70 4 \u679a\u786c\u5e01\u7684\u90a3\u5806\uff0c\u4f60\u53d6\u8d70 2 \u679a\u786c\u5e01\u7684\u90a3\u5806\uff0cBob \u53d6\u8d70\u6700\u540e\u4e00\u5806\u3002 \u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u786c\u5e01\u6570\u76ee\uff1a7 + 2 = 9. \u8003\u8651\u53e6\u5916\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u9009\u51fa\u7684\u662f (1, 2, 8) \u548c (2, 4, 7) \uff0c\u4f60\u5c31\u53ea\u80fd\u5f97\u5230 2 + 4 = 6 \u679a\u786c\u5e01\uff0c\u8fd9\u4e0d\u662f\u6700\u4f18\u89e3\u3002 \u601d\u8def \u5148\u6392\u5e8f\uff0c\u7136\u540e\u7d2f\u8ba1 nums.size -2 ,nums.size - 4,nums.szie -4 \u89e3\u7b54: class Solution { public: int maxCoins(vector<int>& piles) { int res = 0; int count = piles.size() / 3; //\u7d2f\u8ba1\u6293\u53d6\u6b21\u6570 sort(piles.begin(), piles.end()); for(int i = piles.size() - 2; i > 0 && count; i -= 2) { res += piles[i]; count --; } return res; } }; \u603b\u7ed3 for \u5faa\u73af\u91cc i \u7684\u7c7b\u578b\u4e0d\u80fd\u662f size_t \u6709\u5e8f\u603b\u662f\u4f7f\u5f97\u95ee\u9898\u5f88\u7b80\u5355","title":1561},{"location":"1561.html#_1","text":"\u6709 3n \u5806\u6570\u76ee\u4e0d\u4e00\u7684\u786c\u5e01\uff0c\u4f60\u548c\u4f60\u7684\u670b\u53cb\u4eec\u6253\u7b97\u6309\u4ee5\u4e0b\u65b9\u5f0f\u5206\u786c\u5e01\uff1a \u6bcf\u4e00\u8f6e\u4e2d\uff0c\u4f60\u5c06\u4f1a\u9009\u51fa \u4efb\u610f 3 \u5806\u786c\u5e01\uff08\u4e0d\u4e00\u5b9a\u8fde\u7eed\uff09\u3002 Alice \u5c06\u4f1a\u53d6\u8d70\u786c\u5e01\u6570\u91cf\u6700\u591a\u7684\u90a3\u4e00\u5806\u3002 \u4f60\u5c06\u4f1a\u53d6\u8d70\u786c\u5e01\u6570\u91cf\u7b2c\u4e8c\u591a\u7684\u90a3\u4e00\u5806\u3002 Bob \u5c06\u4f1a\u53d6\u8d70\u6700\u540e\u4e00\u5806\u3002 \u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u786c\u5e01\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 piles \uff0c\u5176\u4e2d piles[i] \u662f\u7b2c i \u5806\u4e2d\u786c\u5e01\u7684\u6570\u76ee\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u786c\u5e01\u6570\u76ee\u3002","title":"\u9898\u76ee:"},{"location":"1561.html#_2","text":"\u8f93\u5165\uff1apiles = [2,4,1,2,7,8] \u8f93\u51fa\uff1a9 \u89e3\u91ca\uff1a\u9009\u51fa (2, 7, 8) \uff0cAlice \u53d6\u8d70 8 \u679a\u786c\u5e01\u7684\u90a3\u5806\uff0c\u4f60\u53d6\u8d70 7 \u679a\u786c\u5e01\u7684\u90a3\u5806\uff0cBob \u53d6\u8d70\u6700\u540e\u4e00\u5806\u3002 \u9009\u51fa (1, 2, 4) , Alice \u53d6\u8d70 4 \u679a\u786c\u5e01\u7684\u90a3\u5806\uff0c\u4f60\u53d6\u8d70 2 \u679a\u786c\u5e01\u7684\u90a3\u5806\uff0cBob \u53d6\u8d70\u6700\u540e\u4e00\u5806\u3002 \u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u786c\u5e01\u6570\u76ee\uff1a7 + 2 = 9. \u8003\u8651\u53e6\u5916\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u9009\u51fa\u7684\u662f (1, 2, 8) \u548c (2, 4, 7) \uff0c\u4f60\u5c31\u53ea\u80fd\u5f97\u5230 2 + 4 = 6 \u679a\u786c\u5e01\uff0c\u8fd9\u4e0d\u662f\u6700\u4f18\u89e3\u3002","title":"\u793a\u4f8b:"},{"location":"1561.html#_3","text":"\u5148\u6392\u5e8f\uff0c\u7136\u540e\u7d2f\u8ba1 nums.size -2 ,nums.size - 4,nums.szie -4","title":"\u601d\u8def"},{"location":"1561.html#_4","text":"class Solution { public: int maxCoins(vector<int>& piles) { int res = 0; int count = piles.size() / 3; //\u7d2f\u8ba1\u6293\u53d6\u6b21\u6570 sort(piles.begin(), piles.end()); for(int i = piles.size() - 2; i > 0 && count; i -= 2) { res += piles[i]; count --; } return res; } };","title":"\u89e3\u7b54:"},{"location":"1561.html#_5","text":"for \u5faa\u73af\u91cc i \u7684\u7c7b\u578b\u4e0d\u80fd\u662f size_t \u6709\u5e8f\u603b\u662f\u4f7f\u5f97\u95ee\u9898\u5f88\u7b80\u5355","title":"\u603b\u7ed3"},{"location":"1647.html","text":"\u9898\u76ee: \u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d \u4e0d\u5b58\u5728 \u4e24\u4e2a\u4e0d\u540c\u5b57\u7b26 \u9891\u6b21 \u76f8\u540c\u7684\u60c5\u51b5\uff0c\u5c31\u79f0 s \u662f \u4f18\u8d28\u5b57\u7b26\u4e32 \u3002 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u8fd4\u56de\u4f7f s \u6210\u4e3a \u4f18\u8d28\u5b57\u7b26\u4e32 \u9700\u8981\u5220\u9664\u7684 \u6700\u5c0f \u5b57\u7b26\u6570\u3002 \u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684 \u9891\u6b21 \u662f\u8be5\u5b57\u7b26\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002\u4f8b\u5982\uff0c\u5728\u5b57\u7b26\u4e32 \"aab\" \u4e2d\uff0c'a' \u7684\u9891\u6b21\u662f 2\uff0c\u800c 'b' \u7684\u9891\u6b21\u662f 1 \u3002 \u793a\u4f8b: >\u8f93\u5165\uff1as = \"aaabbbcc\" >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u53ef\u4ee5\u5220\u9664\u4e24\u4e2a 'b' , \u5f97\u5230\u4f18\u8d28\u5b57\u7b26\u4e32 \"aaabcc\" \u3002\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5220\u9664\u4e00\u4e2a 'b' \u548c\u4e00\u4e2a 'c' \uff0c\u5f97\u5230\u4f18\u8d28\u5b57\u7b26\u4e32 \"aaabbc\" \u601d\u8def 1. \u6392\u5e8f + \u8d2a\u5fc3 \u89e3\u7b54: //\u8fd0\u884c\u6162\uff0c\u56e0\u4e3a\u5185\u90e8\u5faa\u73af \u6761\u4ef6 \u6709\u95ee\u9898 class Solution { public: int minDeletions(string s) { int res = 0; //\u9ed8\u8ba4\u662f\u4f18\u79c0\u5b57\u7b26\u4e32 map<char, int > mp; // \u5b57\u7b26/\u51fa\u73b0\u6b21\u6570 for( const char c : s ) { mp[c] ++; } vector<int> tmp; for(auto m : mp ) { tmp.push_back(m.second); } sort(tmp.begin(), tmp.end()); for( int i = tmp.size() - 1; i > 0; --i) { //\u53ef\u80fd\u51fa\u73b0\u8fde\u7eed\u76f8\u7b49\u7684\u5b50\u533a\u95f4 for( int j = i - 1; j >= 0 && tmp[i] &&tmp[j] == tmp[i] ; --j) { tmp[j] --; res ++; } } return res; } }; class Solution { public: int minDeletions(string s) { int res = 0; //\u9ed8\u8ba4\u662f\u4f18\u79c0\u5b57\u7b26\u4e32 vector<int> tmp(26); // \u5b57\u7b26/\u51fa\u73b0\u6b21\u6570 for( const char c : s ) { tmp[c - 'a'] ++; } sort(tmp.begin(), tmp.end()); for( int i = tmp.size() - 1; i > 0; --i) { //\u53ef\u80fd\u51fa\u73b0\u8fde\u7eed\u76f8\u7b49\u7684\u5b50\u533a\u95f4 for( int j = i - 1; j >= 0 && tmp[i] &&tmp[j] == tmp[i] ; --j) { tmp[j] --; res ++; } } return res; } }; \u6807\u51c6\u7b54\u6848 /*\u8bbe\u5f53\u524d\u9891\u6570\u4e3a cnt[i] (cnt[i]>0)cnt[i](cnt[i]>0)\uff0c\u5e76\u7ef4\u62a4\u6b64\u524d\u51fa\u73b0\u7684\u300c\u6700\u5c0f\u9891\u6570\u300d\uff08\u8bbe\u4e3a prevprev\uff09\u5982\u679c\uff1a - prev>cnt[i]\uff0c\u5219\u65e0\u9700\u53bb\u9664\u8be5\u5b57\u7b26 - \u5426\u5219\uff0c\u5982\u679c prev\u2264cnt[i]\uff0c\u8bf4\u660e\u5f53\u524d\u9891\u6570\u300c\u8fc7\u591a\u300d\uff0c\u9700\u8981\u53bb\u9664\u4e00\u5b9a\u6570\u91cf\u7684\u8be5\u5b57\u7b26\u3002\u56e0\u4e3a\u8981\u5c3d\u53ef\u80fd\u5c11\u53bb\u9664\uff0c\u56e0\u6b64\u9700\u8981\u4fdd\u7559 max(prev-1,0)\u4e2a\u5b57\u7b26\u3002 */ class Solution { public: int minDeletions(string s) { int res = 0; //\u9ed8\u8ba4\u662f\u4f18\u79c0\u5b57\u7b26\u4e32 vector<int> tmp(26); // \u5b57\u7b26/\u51fa\u73b0\u6b21\u6570 for( const char c : s ) { tmp[c - 'a'] ++; } // \u964d\u5e8f\uff0c \u5347\u5e8f\u4e00\u6837\uff0c\u4e0d\u8fc7\u9700\u8981\u81ea\u540e\u5411\u524d\u904d\u5386 sort(tmp.begin(), tmp.end(), std::greater<int>() ); int pre = tmp[0]; //\u8bb0\u5f55tmp[i]\u4e4b\u524d\u533a\u95f4\u4e2d\u6700\u5c0f\u7684\u6b21\u6570 for( int i = 1; i < tmp.size(); ++i) { if( pre<= tmp[i] ){ pre = max(pre - 1, 0); res += (tmp[i] - pre); } else { pre = tmp[i]; } } return res; } }; \u603b\u7ed3 \u52a8\u4e0d\u52a8\u5c31\u7528 map\uff0c\u6740\u9e21\u7109\u7528\u725b\u5200.....","title":1647},{"location":"1647.html#_1","text":"\u5982\u679c\u5b57\u7b26\u4e32 s \u4e2d \u4e0d\u5b58\u5728 \u4e24\u4e2a\u4e0d\u540c\u5b57\u7b26 \u9891\u6b21 \u76f8\u540c\u7684\u60c5\u51b5\uff0c\u5c31\u79f0 s \u662f \u4f18\u8d28\u5b57\u7b26\u4e32 \u3002 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u8fd4\u56de\u4f7f s \u6210\u4e3a \u4f18\u8d28\u5b57\u7b26\u4e32 \u9700\u8981\u5220\u9664\u7684 \u6700\u5c0f \u5b57\u7b26\u6570\u3002 \u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684 \u9891\u6b21 \u662f\u8be5\u5b57\u7b26\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002\u4f8b\u5982\uff0c\u5728\u5b57\u7b26\u4e32 \"aab\" \u4e2d\uff0c'a' \u7684\u9891\u6b21\u662f 2\uff0c\u800c 'b' \u7684\u9891\u6b21\u662f 1 \u3002","title":"\u9898\u76ee:"},{"location":"1647.html#_2","text":">\u8f93\u5165\uff1as = \"aaabbbcc\" >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u53ef\u4ee5\u5220\u9664\u4e24\u4e2a 'b' , \u5f97\u5230\u4f18\u8d28\u5b57\u7b26\u4e32 \"aaabcc\" \u3002\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5220\u9664\u4e00\u4e2a 'b' \u548c\u4e00\u4e2a 'c' \uff0c\u5f97\u5230\u4f18\u8d28\u5b57\u7b26\u4e32 \"aaabbc\"","title":"\u793a\u4f8b:"},{"location":"1647.html#_3","text":"1. \u6392\u5e8f + \u8d2a\u5fc3","title":"\u601d\u8def"},{"location":"1647.html#_4","text":"//\u8fd0\u884c\u6162\uff0c\u56e0\u4e3a\u5185\u90e8\u5faa\u73af \u6761\u4ef6 \u6709\u95ee\u9898 class Solution { public: int minDeletions(string s) { int res = 0; //\u9ed8\u8ba4\u662f\u4f18\u79c0\u5b57\u7b26\u4e32 map<char, int > mp; // \u5b57\u7b26/\u51fa\u73b0\u6b21\u6570 for( const char c : s ) { mp[c] ++; } vector<int> tmp; for(auto m : mp ) { tmp.push_back(m.second); } sort(tmp.begin(), tmp.end()); for( int i = tmp.size() - 1; i > 0; --i) { //\u53ef\u80fd\u51fa\u73b0\u8fde\u7eed\u76f8\u7b49\u7684\u5b50\u533a\u95f4 for( int j = i - 1; j >= 0 && tmp[i] &&tmp[j] == tmp[i] ; --j) { tmp[j] --; res ++; } } return res; } }; class Solution { public: int minDeletions(string s) { int res = 0; //\u9ed8\u8ba4\u662f\u4f18\u79c0\u5b57\u7b26\u4e32 vector<int> tmp(26); // \u5b57\u7b26/\u51fa\u73b0\u6b21\u6570 for( const char c : s ) { tmp[c - 'a'] ++; } sort(tmp.begin(), tmp.end()); for( int i = tmp.size() - 1; i > 0; --i) { //\u53ef\u80fd\u51fa\u73b0\u8fde\u7eed\u76f8\u7b49\u7684\u5b50\u533a\u95f4 for( int j = i - 1; j >= 0 && tmp[i] &&tmp[j] == tmp[i] ; --j) { tmp[j] --; res ++; } } return res; } };","title":"\u89e3\u7b54:"},{"location":"1647.html#_5","text":"/*\u8bbe\u5f53\u524d\u9891\u6570\u4e3a cnt[i] (cnt[i]>0)cnt[i](cnt[i]>0)\uff0c\u5e76\u7ef4\u62a4\u6b64\u524d\u51fa\u73b0\u7684\u300c\u6700\u5c0f\u9891\u6570\u300d\uff08\u8bbe\u4e3a prevprev\uff09\u5982\u679c\uff1a - prev>cnt[i]\uff0c\u5219\u65e0\u9700\u53bb\u9664\u8be5\u5b57\u7b26 - \u5426\u5219\uff0c\u5982\u679c prev\u2264cnt[i]\uff0c\u8bf4\u660e\u5f53\u524d\u9891\u6570\u300c\u8fc7\u591a\u300d\uff0c\u9700\u8981\u53bb\u9664\u4e00\u5b9a\u6570\u91cf\u7684\u8be5\u5b57\u7b26\u3002\u56e0\u4e3a\u8981\u5c3d\u53ef\u80fd\u5c11\u53bb\u9664\uff0c\u56e0\u6b64\u9700\u8981\u4fdd\u7559 max(prev-1,0)\u4e2a\u5b57\u7b26\u3002 */ class Solution { public: int minDeletions(string s) { int res = 0; //\u9ed8\u8ba4\u662f\u4f18\u79c0\u5b57\u7b26\u4e32 vector<int> tmp(26); // \u5b57\u7b26/\u51fa\u73b0\u6b21\u6570 for( const char c : s ) { tmp[c - 'a'] ++; } // \u964d\u5e8f\uff0c \u5347\u5e8f\u4e00\u6837\uff0c\u4e0d\u8fc7\u9700\u8981\u81ea\u540e\u5411\u524d\u904d\u5386 sort(tmp.begin(), tmp.end(), std::greater<int>() ); int pre = tmp[0]; //\u8bb0\u5f55tmp[i]\u4e4b\u524d\u533a\u95f4\u4e2d\u6700\u5c0f\u7684\u6b21\u6570 for( int i = 1; i < tmp.size(); ++i) { if( pre<= tmp[i] ){ pre = max(pre - 1, 0); res += (tmp[i] - pre); } else { pre = tmp[i]; } } return res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1647.html#_6","text":"\u52a8\u4e0d\u52a8\u5c31\u7528 map\uff0c\u6740\u9e21\u7109\u7528\u725b\u5200.....","title":"\u603b\u7ed3"},{"location":"1648.html","text":"\u9898\u76ee: \u8fd9\u4f4d\u987e\u5ba2\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u65b9\u5f0f\u8861\u91cf\u7403\u7684\u4ef7\u503c\uff1a\u6bcf\u4e2a\u7403\u7684\u4ef7\u503c\u662f\u76ee\u524d\u5269\u4e0b\u7684 \u540c\u8272\u7403 \u7684\u6570\u76ee\u3002\u6bd4\u65b9\u8bf4\u8fd8\u5269\u4e0b 6 \u4e2a\u9ec4\u7403\uff0c\u90a3\u4e48\u987e\u5ba2\u4e70\u7b2c\u4e00\u4e2a\u9ec4\u7403\u7684\u65f6\u5019\u8be5\u9ec4\u7403\u7684\u4ef7\u503c\u4e3a 6 \u3002\u8fd9\u7b14\u4ea4\u6613\u4ee5\u540e\uff0c\u53ea\u5269\u4e0b 5 \u4e2a\u9ec4\u7403\u4e86\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a\u9ec4\u7403\u7684\u4ef7\u503c\u4e3a 5 \uff08\u4e5f\u5c31\u662f\u7403\u7684\u4ef7\u503c\u968f\u7740\u987e\u5ba2\u8d2d\u4e70\u540c\u8272\u7403\u662f\u9012\u51cf\u7684\uff09 \u7ed9\u4f60\u6574\u6570\u6570\u7ec4 inventory \uff0c\u5176\u4e2d inventory[i] \u8868\u793a\u7b2c i \u79cd\u989c\u8272\u7403\u4e00\u5f00\u59cb\u7684\u6570\u76ee\u3002\u540c\u65f6\u7ed9\u4f60\u6574\u6570 orders \uff0c\u8868\u793a\u987e\u5ba2\u603b\u5171\u60f3\u4e70\u7684\u7403\u6570\u76ee\u3002\u4f60\u53ef\u4ee5\u6309\u7167 \u4efb\u610f\u987a\u5e8f \u5356\u7403\u3002 \u8bf7\u4f60\u8fd4\u56de\u5356\u4e86 orders \u4e2a\u7403\u4ee5\u540e \u6700\u5927 \u603b\u4ef7\u503c\u4e4b\u548c\u3002\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u8bf7\u4f60\u8fd4\u56de\u7b54\u6848\u5bf9 109 + 7 \u53d6\u4f59\u6570 \u7684\u7ed3\u679c\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1ainventory = [2,5], orders = 4 >\u8f93\u51fa\uff1a14 >\u89e3\u91ca\uff1a\u5356 1 \u4e2a\u7b2c\u4e00\u79cd\u989c\u8272\u7684\u7403\uff08\u4ef7\u503c\u4e3a 2 )\uff0c\u5356 3 \u4e2a\u7b2c\u4e8c\u79cd\u989c\u8272\u7684\u7403\uff08\u4ef7\u503c\u4e3a 5 + 4 + 3\uff09\u3002\u6700\u5927\u603b\u548c\u4e3a 2 + 5 + 4 + 3 = 14 \u601d\u8def \u8d2a\u5fc3\u7b97\u6cd5: \"\u6bcf\u6b21\u9009\u62e9\u6700\u5927\u7684\u6570\" 1. \u4f18\u5148\u961f\u5217 - \u8d85\u65f6 \u65f6\u95f4\u590d\u6742\u5ea6\u662fO(orders * lg n) order \u53ef\u80fd\u662f10^9 2. \u4f18\u5316\u6a21\u62df\uff0corders \u7684\u6b21\u6570\u8fc7\u5927 \u4f7f\u7528 \"while(orders --) \" \u7684\u5f62\u5f0f\u6781\u6709\u53ef\u80fd\u8d85\u65f6. \u56e0\u6b64\u6211\u4eec\u5148\u8fdb\u884c\u6392\u5e8f\uff0c\u5728\u5c1d\u8bd5\u5728\u4e00\u6b21\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u5356\u51fa\u591a\u6b21(\u8be6\u89c1\u4ee3\u7801) \u56fe\u5f62\u89e3\u91ca \u89e3\u7b54: // \u4f18\u5148\u961f\u5217\uff0c\u6bcf\u6b21\u8fd4\u56de\u6700\u5927\u7684\u6570 class Solution { public: int maxProfit(vector<int>& inventory, int orders) { long long res = 0; priority_queue<int> pq; for(const int inven : inventory) { pq.push(inven); } while( orders -- && !pq.empty() ) { int top = pq.top(); res += top; pq.pop(); if( --top ) pq.push(top); } return res % (int)(pow(10, 9) + 7); } }; \u6807\u51c6\u7b54\u6848 //\u4e0e\u4e0a\u9762\u7684\u4f18\u5148\u961f\u5217\u5728\u4e8e\uff0c\u4e00\u6b21\u6a21\u62df\u53ef\u4ee5\u501f\u52a9\u516c\u5f0f\u5220\u9664\u591a\u4e2a\u5143\u7d20 class Solution { public: int maxProfit(vector<int>& nums, int orders) { long res = 0; int i = 0; sort(nums.begin(), nums.end(), greater<int>()); while(orders > 0) { //\u5faa\u73af\u540e\uff0c(0 - i) \u6807\u793a\u51fa\u76f8\u7b49\u5143\u7d20 \u533a\u95f4, \u56e0\u4e3a\u662f\u964d\u5e8fnums[i-1] >= nums[i],\u6240\u4ee5 == \u624d\u4f1a\u8fdb\u884c\u5faa\u73af while( i < nums.size() && nums[i] >= nums[0]) ++ i; int next = 0; if(i < nums.size()) next = nums[i]; long bucks = i, //\u957f\u5ea6 delta = nums[0] - next; //\u9ad8\u5ea6\u5dee long delete_size = bucks * delta; //\u8fd9\u6b21\u53ef\u4ee5\u5220\u9664\u5143\u7d20\u7684\u4e2a\u6570 if(delete_size > orders) { // \u5f53\u524d\u53ef\u4ee5\u5220\u9664\u7684\u5143\u7d20 > \u8fd8\u8981\u6c42\u7684\u5143\u7d20 long dec = orders / bucks; long a1 = nums[0] - dec + 1, an = nums[0]; //\u4e0b\u9762\u8fd9\u4e24\u4e2a\u7684\u5f0f\u5b50\uff0c\u7528\u4ee5\u5728 delete_size \u4e2d\u5220\u9664 orders \u4e2a\u6b63\u786e\u7684\u5143\u7d20 res += ((a1+an) * dec) / 2 *bucks; //\u7b49\u5dee\u6570\u5217\u6c42\u548c\u516c\u5f0f * \u76f8\u7b49\u533a\u95f4\u7684\u4e2a\u6570 res += (nums[0] - dec) * (orders % bucks); break; //\u5168\u90e8\u5356\u51fa\u4e86 } else { //\u4e0d\u591f\u5220\u9664 long a1 = next +1 , an = nums[0]; res += (((a1+an) *delta) / 2) * bucks; nums[0] = next; //\u6a21\u62df\u5220\u9664\u88ab\u5220\u9664\u7684\u5143\u7d20 orders -= delete_size; //\u4e00\u6b21\u5356\u51fa\u591a\u4e2a } } return res % (int)(1e9 + 7); //\u5bf9\u7ed3\u6784\u6c42\u4f59 } };","title":1648},{"location":"1648.html#_1","text":"\u8fd9\u4f4d\u987e\u5ba2\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u65b9\u5f0f\u8861\u91cf\u7403\u7684\u4ef7\u503c\uff1a\u6bcf\u4e2a\u7403\u7684\u4ef7\u503c\u662f\u76ee\u524d\u5269\u4e0b\u7684 \u540c\u8272\u7403 \u7684\u6570\u76ee\u3002\u6bd4\u65b9\u8bf4\u8fd8\u5269\u4e0b 6 \u4e2a\u9ec4\u7403\uff0c\u90a3\u4e48\u987e\u5ba2\u4e70\u7b2c\u4e00\u4e2a\u9ec4\u7403\u7684\u65f6\u5019\u8be5\u9ec4\u7403\u7684\u4ef7\u503c\u4e3a 6 \u3002\u8fd9\u7b14\u4ea4\u6613\u4ee5\u540e\uff0c\u53ea\u5269\u4e0b 5 \u4e2a\u9ec4\u7403\u4e86\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a\u9ec4\u7403\u7684\u4ef7\u503c\u4e3a 5 \uff08\u4e5f\u5c31\u662f\u7403\u7684\u4ef7\u503c\u968f\u7740\u987e\u5ba2\u8d2d\u4e70\u540c\u8272\u7403\u662f\u9012\u51cf\u7684\uff09 \u7ed9\u4f60\u6574\u6570\u6570\u7ec4 inventory \uff0c\u5176\u4e2d inventory[i] \u8868\u793a\u7b2c i \u79cd\u989c\u8272\u7403\u4e00\u5f00\u59cb\u7684\u6570\u76ee\u3002\u540c\u65f6\u7ed9\u4f60\u6574\u6570 orders \uff0c\u8868\u793a\u987e\u5ba2\u603b\u5171\u60f3\u4e70\u7684\u7403\u6570\u76ee\u3002\u4f60\u53ef\u4ee5\u6309\u7167 \u4efb\u610f\u987a\u5e8f \u5356\u7403\u3002 \u8bf7\u4f60\u8fd4\u56de\u5356\u4e86 orders \u4e2a\u7403\u4ee5\u540e \u6700\u5927 \u603b\u4ef7\u503c\u4e4b\u548c\u3002\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u8bf7\u4f60\u8fd4\u56de\u7b54\u6848\u5bf9 109 + 7 \u53d6\u4f59\u6570 \u7684\u7ed3\u679c\u3002","title":"\u9898\u76ee:"},{"location":"1648.html#_2","text":">\u8f93\u5165\uff1ainventory = [2,5], orders = 4 >\u8f93\u51fa\uff1a14 >\u89e3\u91ca\uff1a\u5356 1 \u4e2a\u7b2c\u4e00\u79cd\u989c\u8272\u7684\u7403\uff08\u4ef7\u503c\u4e3a 2 )\uff0c\u5356 3 \u4e2a\u7b2c\u4e8c\u79cd\u989c\u8272\u7684\u7403\uff08\u4ef7\u503c\u4e3a 5 + 4 + 3\uff09\u3002\u6700\u5927\u603b\u548c\u4e3a 2 + 5 + 4 + 3 = 14","title":"\u793a\u4f8b:"},{"location":"1648.html#_3","text":"\u8d2a\u5fc3\u7b97\u6cd5: \"\u6bcf\u6b21\u9009\u62e9\u6700\u5927\u7684\u6570\" 1. \u4f18\u5148\u961f\u5217 - \u8d85\u65f6 \u65f6\u95f4\u590d\u6742\u5ea6\u662fO(orders * lg n) order \u53ef\u80fd\u662f10^9 2. \u4f18\u5316\u6a21\u62df\uff0corders \u7684\u6b21\u6570\u8fc7\u5927 \u4f7f\u7528 \"while(orders --) \" \u7684\u5f62\u5f0f\u6781\u6709\u53ef\u80fd\u8d85\u65f6. \u56e0\u6b64\u6211\u4eec\u5148\u8fdb\u884c\u6392\u5e8f\uff0c\u5728\u5c1d\u8bd5\u5728\u4e00\u6b21\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u5356\u51fa\u591a\u6b21(\u8be6\u89c1\u4ee3\u7801) \u56fe\u5f62\u89e3\u91ca","title":"\u601d\u8def"},{"location":"1648.html#_4","text":"// \u4f18\u5148\u961f\u5217\uff0c\u6bcf\u6b21\u8fd4\u56de\u6700\u5927\u7684\u6570 class Solution { public: int maxProfit(vector<int>& inventory, int orders) { long long res = 0; priority_queue<int> pq; for(const int inven : inventory) { pq.push(inven); } while( orders -- && !pq.empty() ) { int top = pq.top(); res += top; pq.pop(); if( --top ) pq.push(top); } return res % (int)(pow(10, 9) + 7); } };","title":"\u89e3\u7b54:"},{"location":"1648.html#_5","text":"//\u4e0e\u4e0a\u9762\u7684\u4f18\u5148\u961f\u5217\u5728\u4e8e\uff0c\u4e00\u6b21\u6a21\u62df\u53ef\u4ee5\u501f\u52a9\u516c\u5f0f\u5220\u9664\u591a\u4e2a\u5143\u7d20 class Solution { public: int maxProfit(vector<int>& nums, int orders) { long res = 0; int i = 0; sort(nums.begin(), nums.end(), greater<int>()); while(orders > 0) { //\u5faa\u73af\u540e\uff0c(0 - i) \u6807\u793a\u51fa\u76f8\u7b49\u5143\u7d20 \u533a\u95f4, \u56e0\u4e3a\u662f\u964d\u5e8fnums[i-1] >= nums[i],\u6240\u4ee5 == \u624d\u4f1a\u8fdb\u884c\u5faa\u73af while( i < nums.size() && nums[i] >= nums[0]) ++ i; int next = 0; if(i < nums.size()) next = nums[i]; long bucks = i, //\u957f\u5ea6 delta = nums[0] - next; //\u9ad8\u5ea6\u5dee long delete_size = bucks * delta; //\u8fd9\u6b21\u53ef\u4ee5\u5220\u9664\u5143\u7d20\u7684\u4e2a\u6570 if(delete_size > orders) { // \u5f53\u524d\u53ef\u4ee5\u5220\u9664\u7684\u5143\u7d20 > \u8fd8\u8981\u6c42\u7684\u5143\u7d20 long dec = orders / bucks; long a1 = nums[0] - dec + 1, an = nums[0]; //\u4e0b\u9762\u8fd9\u4e24\u4e2a\u7684\u5f0f\u5b50\uff0c\u7528\u4ee5\u5728 delete_size \u4e2d\u5220\u9664 orders \u4e2a\u6b63\u786e\u7684\u5143\u7d20 res += ((a1+an) * dec) / 2 *bucks; //\u7b49\u5dee\u6570\u5217\u6c42\u548c\u516c\u5f0f * \u76f8\u7b49\u533a\u95f4\u7684\u4e2a\u6570 res += (nums[0] - dec) * (orders % bucks); break; //\u5168\u90e8\u5356\u51fa\u4e86 } else { //\u4e0d\u591f\u5220\u9664 long a1 = next +1 , an = nums[0]; res += (((a1+an) *delta) / 2) * bucks; nums[0] = next; //\u6a21\u62df\u5220\u9664\u88ab\u5220\u9664\u7684\u5143\u7d20 orders -= delete_size; //\u4e00\u6b21\u5356\u51fa\u591a\u4e2a } } return res % (int)(1e9 + 7); //\u5bf9\u7ed3\u6784\u6c42\u4f59 } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1658.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 x \u3002\u6bcf\u4e00\u6b21\u64cd\u4f5c\u65f6\uff0c\u4f60\u5e94\u5f53\u79fb\u9664\u6570\u7ec4 nums \u6700\u5de6\u8fb9\u6216\u6700\u53f3\u8fb9\u7684\u5143\u7d20\uff0c\u7136\u540e\u4ece x \u4e2d\u51cf\u53bb\u8be5\u5143\u7d20\u7684\u503c\u3002\u8bf7\u6ce8\u610f\uff0c\u9700\u8981 \u4fee\u6539 \u6570\u7ec4\u4ee5\u4f9b\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u4f7f\u7528\u3002 \u5982\u679c\u53ef\u4ee5\u5c06 x \u6070\u597d \u51cf\u5230 0 \uff0c\u8fd4\u56de \u6700\u5c0f\u64cd\u4f5c\u6570 \uff1b\u5426\u5219\uff0c\u8fd4\u56de -1 \u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [1,1,4,2,3], x = 5 >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u662f\u79fb\u9664\u540e\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06 x \u51cf\u5230 0 \u3002 \u601d\u8def \u5c06\u95ee\u9898\u8f6c\u5316\u4e3a \u6c42\u89e3\u7b49\u4e8e sum -x \u7684\u6700\u957f\u8fde\u7eed\u5b50\u533a\u95f4\u95ee\u9898 \u89e3\u7b54: class Solution { public: int minOperations(vector<int>& nums, int x) { int n = nums.size(); int total = 0;//accumulate(nums.begin(),nums.end(),0); for(int i = 0; i < n; ++i) { total += nums[i]; } int new_x = total -x ; if( new_x < 0) return -1; int max_len = -1; //\u6211\u4eec\u8981\u627e\u5230\u6700\u957f\u7684\u4e32 // right, left \u6307\u5411\u5f53\u524d\u7a97\u53e3,sum \u4e3a\u5f53\u524d\u7a97\u53e3\u7684\u548c int left = 0,right = 0, sum = 0; for(; right < n; ++right) { sum += nums[right]; while(sum > new_x) { sum -= nums[left]; ++left ; } if(sum == new_x) { max_len = max(max_len, right - left +1); } } return max_len == -1 ? -1:n - max_len; } };","title":1658},{"location":"1658.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 x \u3002\u6bcf\u4e00\u6b21\u64cd\u4f5c\u65f6\uff0c\u4f60\u5e94\u5f53\u79fb\u9664\u6570\u7ec4 nums \u6700\u5de6\u8fb9\u6216\u6700\u53f3\u8fb9\u7684\u5143\u7d20\uff0c\u7136\u540e\u4ece x \u4e2d\u51cf\u53bb\u8be5\u5143\u7d20\u7684\u503c\u3002\u8bf7\u6ce8\u610f\uff0c\u9700\u8981 \u4fee\u6539 \u6570\u7ec4\u4ee5\u4f9b\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u4f7f\u7528\u3002 \u5982\u679c\u53ef\u4ee5\u5c06 x \u6070\u597d \u51cf\u5230 0 \uff0c\u8fd4\u56de \u6700\u5c0f\u64cd\u4f5c\u6570 \uff1b\u5426\u5219\uff0c\u8fd4\u56de -1 \u3002","title":"\u9898\u76ee:"},{"location":"1658.html#_2","text":">\u8f93\u5165\uff1anums = [1,1,4,2,3], x = 5 >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u662f\u79fb\u9664\u540e\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06 x \u51cf\u5230 0 \u3002","title":"\u793a\u4f8b:"},{"location":"1658.html#_3","text":"\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a \u6c42\u89e3\u7b49\u4e8e sum -x \u7684\u6700\u957f\u8fde\u7eed\u5b50\u533a\u95f4\u95ee\u9898","title":"\u601d\u8def"},{"location":"1658.html#_4","text":"class Solution { public: int minOperations(vector<int>& nums, int x) { int n = nums.size(); int total = 0;//accumulate(nums.begin(),nums.end(),0); for(int i = 0; i < n; ++i) { total += nums[i]; } int new_x = total -x ; if( new_x < 0) return -1; int max_len = -1; //\u6211\u4eec\u8981\u627e\u5230\u6700\u957f\u7684\u4e32 // right, left \u6307\u5411\u5f53\u524d\u7a97\u53e3,sum \u4e3a\u5f53\u524d\u7a97\u53e3\u7684\u548c int left = 0,right = 0, sum = 0; for(; right < n; ++right) { sum += nums[right]; while(sum > new_x) { sum -= nums[left]; ++left ; } if(sum == new_x) { max_len = max(max_len, right - left +1); } } return max_len == -1 ? -1:n - max_len; } };","title":"\u89e3\u7b54:"},{"location":"167.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6309\u7167\u5347\u5e8f\u6392\u5217 \u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u627e\u5230\u4e24\u4e2a\u6570\u4f7f\u5f97\u5b83\u4eec\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570\u3002 \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u8fd9\u4e24\u4e2a\u4e0b\u6807\u503c index1 \u548c index2\uff0c\u5176\u4e2d index1 \u5fc5\u987b\u5c0f\u4e8e index2\u3002 \u8bf4\u660e: \u8fd4\u56de\u7684\u4e0b\u6807\u503c\uff08index1 \u548c index2\uff09\u4e0d\u662f\u4ece\u96f6\u5f00\u59cb\u7684\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165\u53ea\u5bf9\u5e94\u552f\u4e00\u7684\u7b54\u6848\uff0c\u800c\u4e14\u4f60\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u76f8\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b: > \u8f93\u5165: numbers = [2, 7, 11, 15], target = 9 > \u8f93\u51fa: [1,2] > \u89e3\u91ca: 2 \u4e0e 7 \u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 9 \u3002\u56e0\u6b64 index1 = 1, index2 = 2 \u3002 \u601d\u8def: 1. \u66b4\u529b 2. hash(\u6709\u8d1f\u6570\u4e0d\u53ef\u884c) 3. \u6709\u5e8f \u2192 \u6298\u534a \u65b0\u89e3\u6cd5 **\u53cc\u6307\u9488** \u89e3\u7b54: // \u6298\u534a int* twoSum(int* numbers, int numbersSize, int target, int* returnSize){ int* ret = (int*)malloc( sizeof(int) * 2 ); *returnSize = 2; for(int i=0; i<numbersSize ;i++){ int low = i+1; int hight = numbersSize - 1; while(low<=hight){ int mid = (low+hight) /2; printf(\"%d \",mid); int m = target - numbers[i]; if(numbers[mid] == m){ ret[0] = i + 1; ret[1] = mid + 1; *returnSize = 2; return ret; }else if(numbers[mid]<m){ low = mid + 1; }else{ hight = mid -1; } } } ret[0] = -1; ret[1] = -1; return ret; } int* twoSum(int* numbers, int numbersSize, int target, int* returnSize){ int* ret = (int*)malloc( sizeof(int) * 2 ); *returnSize = 2; int i= 0; int j = numbersSize - 1; while( i<j){ int m = (numbers[i] + numbers[j]); if( m == target){ ret[0] = i + 1; ret[1] = j + 1; return ret; }else if( m>target){ j--; }else{ i++; } } return ret; }","title":167},{"location":"167.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6309\u7167\u5347\u5e8f\u6392\u5217 \u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u627e\u5230\u4e24\u4e2a\u6570\u4f7f\u5f97\u5b83\u4eec\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570\u3002 \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u8fd9\u4e24\u4e2a\u4e0b\u6807\u503c index1 \u548c index2\uff0c\u5176\u4e2d index1 \u5fc5\u987b\u5c0f\u4e8e index2\u3002 \u8bf4\u660e: \u8fd4\u56de\u7684\u4e0b\u6807\u503c\uff08index1 \u548c index2\uff09\u4e0d\u662f\u4ece\u96f6\u5f00\u59cb\u7684\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165\u53ea\u5bf9\u5e94\u552f\u4e00\u7684\u7b54\u6848\uff0c\u800c\u4e14\u4f60\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u76f8\u540c\u7684\u5143\u7d20\u3002","title":"\u9898\u76ee:"},{"location":"167.html#_2","text":"> \u8f93\u5165: numbers = [2, 7, 11, 15], target = 9 > \u8f93\u51fa: [1,2] > \u89e3\u91ca: 2 \u4e0e 7 \u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 9 \u3002\u56e0\u6b64 index1 = 1, index2 = 2 \u3002","title":"\u793a\u4f8b:"},{"location":"167.html#_3","text":"1. \u66b4\u529b 2. hash(\u6709\u8d1f\u6570\u4e0d\u53ef\u884c) 3. \u6709\u5e8f \u2192 \u6298\u534a \u65b0\u89e3\u6cd5 **\u53cc\u6307\u9488**","title":"\u601d\u8def:"},{"location":"167.html#_4","text":"// \u6298\u534a int* twoSum(int* numbers, int numbersSize, int target, int* returnSize){ int* ret = (int*)malloc( sizeof(int) * 2 ); *returnSize = 2; for(int i=0; i<numbersSize ;i++){ int low = i+1; int hight = numbersSize - 1; while(low<=hight){ int mid = (low+hight) /2; printf(\"%d \",mid); int m = target - numbers[i]; if(numbers[mid] == m){ ret[0] = i + 1; ret[1] = mid + 1; *returnSize = 2; return ret; }else if(numbers[mid]<m){ low = mid + 1; }else{ hight = mid -1; } } } ret[0] = -1; ret[1] = -1; return ret; } int* twoSum(int* numbers, int numbersSize, int target, int* returnSize){ int* ret = (int*)malloc( sizeof(int) * 2 ); *returnSize = 2; int i= 0; int j = numbersSize - 1; while( i<j){ int m = (numbers[i] + numbers[j]); if( m == target){ ret[0] = i + 1; ret[1] = j + 1; return ret; }else if( m>target){ j--; }else{ i++; } } return ret; }","title":"\u89e3\u7b54:"},{"location":"1673.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6b63\u6574\u6570 k \uff0c\u8fd4\u56de\u957f\u5ea6\u4e3a k \u4e14\u6700\u5177 \u7ade\u4e89\u529b \u7684 nums \u5b50\u5e8f\u5217\u3002 \u6570\u7ec4\u7684\u5b50\u5e8f\u5217\u662f\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\u4e00\u4e9b\u5143\u7d20\uff08\u53ef\u80fd\u4e0d\u5220\u9664\u5143\u7d20\uff09\u5f97\u5230\u7684\u5e8f\u5217\u3002 \u5728\u5b50\u5e8f\u5217 a \u548c\u5b50\u5e8f\u5217 b \u7b2c\u4e00\u4e2a\u4e0d\u76f8\u540c\u7684\u4f4d\u7f6e\u4e0a\uff0c\u5982\u679c a \u4e2d\u7684\u6570\u5b57\u5c0f\u4e8e b \u4e2d\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u5b50\u5e8f\u5217 a \u6bd4\u5b50\u5e8f\u5217 b\uff08\u76f8\u540c\u957f\u5ea6\u4e0b\uff09\u66f4\u5177 \u7ade\u4e89\u529b \u3002 \u4f8b\u5982\uff0c[1,3,4] \u6bd4 [1,3,5] \u66f4\u5177\u7ade\u4e89\u529b\uff0c\u5728\u7b2c\u4e00\u4e2a\u4e0d\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\uff0c 4 \u5c0f\u4e8e 5 \u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [3,5,2,6], k = 2 >\u8f93\u51fa\uff1a[2,6] >\u89e3\u91ca\uff1a\u5728\u6240\u6709\u53ef\u80fd\u7684\u5b50\u5e8f\u5217\u96c6\u5408 {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]} \u4e2d\uff0c[2,6] \u6700\u5177\u7ade\u4e89\u529b\u3002 \u601d\u8def \u5355\u8c03\u6808 \u89e3\u7b54: //\u9519\u8bef class Solution { public: vector<int> mostCompetitive(vector<int>& nums, int k) { vector<int> res; stack<int> st; for(int i = 0; i < nums.size(); ++i) { if(st.size() + nums.size() - i - 1 <= k){ //\u5269\u4f59\u7684\u5143\u7d20\u4e0d\u591f\u65f6 st.push(nums[i]); continue; } while(!st.empty() && st.top() > nums[i]) st.pop(); st.push(nums[i]); } while(!st.empty()){ res.push_back(st.top()); st.pop(); } reverse(res.begin(),res.end()); res.erase(res.begin() + k, res.end()); return res; } }; \u6807\u51c6\u7b54\u6848 class Solution { public: vector<int> mostCompetitive(vector<int>& nums, int k) { vector<int> ans; int n = nums.size(), count = n - k; for (int i = 0; i < nums.size(); i++) { while (ans.size() > 0 && nums[i] < ans.back() && count > 0) { ans.pop_back(); count--; } ans.push_back(nums[i]); } while (ans.size() > k) ans.pop_back(); return ans; } }; \u603b\u7ed3 \u8fd0\u7528 count \u7edf\u8ba1\u6700\u591a\u53ef\u4ee5 pop \u7684\u4e2a\u6570","title":1673},{"location":"1673.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6b63\u6574\u6570 k \uff0c\u8fd4\u56de\u957f\u5ea6\u4e3a k \u4e14\u6700\u5177 \u7ade\u4e89\u529b \u7684 nums \u5b50\u5e8f\u5217\u3002 \u6570\u7ec4\u7684\u5b50\u5e8f\u5217\u662f\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\u4e00\u4e9b\u5143\u7d20\uff08\u53ef\u80fd\u4e0d\u5220\u9664\u5143\u7d20\uff09\u5f97\u5230\u7684\u5e8f\u5217\u3002 \u5728\u5b50\u5e8f\u5217 a \u548c\u5b50\u5e8f\u5217 b \u7b2c\u4e00\u4e2a\u4e0d\u76f8\u540c\u7684\u4f4d\u7f6e\u4e0a\uff0c\u5982\u679c a \u4e2d\u7684\u6570\u5b57\u5c0f\u4e8e b \u4e2d\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u5b50\u5e8f\u5217 a \u6bd4\u5b50\u5e8f\u5217 b\uff08\u76f8\u540c\u957f\u5ea6\u4e0b\uff09\u66f4\u5177 \u7ade\u4e89\u529b \u3002 \u4f8b\u5982\uff0c[1,3,4] \u6bd4 [1,3,5] \u66f4\u5177\u7ade\u4e89\u529b\uff0c\u5728\u7b2c\u4e00\u4e2a\u4e0d\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\uff0c 4 \u5c0f\u4e8e 5 \u3002","title":"\u9898\u76ee:"},{"location":"1673.html#_2","text":">\u8f93\u5165\uff1anums = [3,5,2,6], k = 2 >\u8f93\u51fa\uff1a[2,6] >\u89e3\u91ca\uff1a\u5728\u6240\u6709\u53ef\u80fd\u7684\u5b50\u5e8f\u5217\u96c6\u5408 {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]} \u4e2d\uff0c[2,6] \u6700\u5177\u7ade\u4e89\u529b\u3002","title":"\u793a\u4f8b:"},{"location":"1673.html#_3","text":"\u5355\u8c03\u6808","title":"\u601d\u8def"},{"location":"1673.html#_4","text":"//\u9519\u8bef class Solution { public: vector<int> mostCompetitive(vector<int>& nums, int k) { vector<int> res; stack<int> st; for(int i = 0; i < nums.size(); ++i) { if(st.size() + nums.size() - i - 1 <= k){ //\u5269\u4f59\u7684\u5143\u7d20\u4e0d\u591f\u65f6 st.push(nums[i]); continue; } while(!st.empty() && st.top() > nums[i]) st.pop(); st.push(nums[i]); } while(!st.empty()){ res.push_back(st.top()); st.pop(); } reverse(res.begin(),res.end()); res.erase(res.begin() + k, res.end()); return res; } };","title":"\u89e3\u7b54:"},{"location":"1673.html#_5","text":"class Solution { public: vector<int> mostCompetitive(vector<int>& nums, int k) { vector<int> ans; int n = nums.size(), count = n - k; for (int i = 0; i < nums.size(); i++) { while (ans.size() > 0 && nums[i] < ans.back() && count > 0) { ans.pop_back(); count--; } ans.push_back(nums[i]); } while (ans.size() > k) ans.pop_back(); return ans; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"1673.html#_6","text":"\u8fd0\u7528 count \u7edf\u8ba1\u6700\u591a\u53ef\u4ee5 pop \u7684\u4e2a\u6570","title":"\u603b\u7ed3"},{"location":"17.12.html","text":"\u9898\u76ee: \u4e8c\u53c9\u6811\u6570\u636e\u7ed3\u6784TreeNode\u53ef\u7528\u6765\u8868\u793a\u5355\u5411\u94fe\u8868\uff08\u5176\u4e2dleft\u7f6e\u7a7a\uff0cright\u4e3a\u4e0b\u4e00\u4e2a\u94fe\u8868\u8282\u70b9\uff09\u3002\u5b9e\u73b0\u4e00\u4e2a\u65b9\u6cd5\uff0c\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u5355\u5411\u94fe\u8868\uff0c\u8981\u6c42\u4f9d\u7136\u7b26\u5408\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u8f6c\u6362\u64cd\u4f5c\u5e94\u662f\u539f\u5740\u7684\uff0c\u4e5f\u5c31\u662f\u5728\u539f\u59cb\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4e0a\u76f4\u63a5\u4fee\u6539\u3002 \u8fd4\u56de\u8f6c\u6362\u540e\u7684\u5355\u5411\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1a [4,2,5,1,3,null,6,0] >\u8f93\u51fa\uff1a [0,null,1,null,2,null,3,null,4,null,5,null,6] \u601d\u8def \u501f\u52a9\u4e2d\u5e8f\u904d\u5386\u5b9e\u73b0 \u89e3\u7b54: class Solution { private: TreeNode* head = new TreeNode(-1); TreeNode* prev = nullptr; public: void helper(TreeNode* cur) { if(cur != nullptr) { helper(cur->left); if(prev != nullptr) { prev ->right = cur; prev = cur; } else { prev = cur; head->right = cur; } // \u5de6\u94fe\u63a5\u8bbe\u7f6e\u4e3a\u7a7a cur->left = nullptr; helper(cur->right); } } TreeNode* convertBiNode(TreeNode* root) { helper(root); return head->right; // \u8fd8\u8981\u91ca\u653e head } };","title":17.12},{"location":"17.12.html#_1","text":"\u4e8c\u53c9\u6811\u6570\u636e\u7ed3\u6784TreeNode\u53ef\u7528\u6765\u8868\u793a\u5355\u5411\u94fe\u8868\uff08\u5176\u4e2dleft\u7f6e\u7a7a\uff0cright\u4e3a\u4e0b\u4e00\u4e2a\u94fe\u8868\u8282\u70b9\uff09\u3002\u5b9e\u73b0\u4e00\u4e2a\u65b9\u6cd5\uff0c\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u5355\u5411\u94fe\u8868\uff0c\u8981\u6c42\u4f9d\u7136\u7b26\u5408\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u8f6c\u6362\u64cd\u4f5c\u5e94\u662f\u539f\u5740\u7684\uff0c\u4e5f\u5c31\u662f\u5728\u539f\u59cb\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4e0a\u76f4\u63a5\u4fee\u6539\u3002 \u8fd4\u56de\u8f6c\u6362\u540e\u7684\u5355\u5411\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002","title":"\u9898\u76ee:"},{"location":"17.12.html#_2","text":">\u8f93\u5165\uff1a [4,2,5,1,3,null,6,0] >\u8f93\u51fa\uff1a [0,null,1,null,2,null,3,null,4,null,5,null,6]","title":"\u793a\u4f8b:"},{"location":"17.12.html#_3","text":"\u501f\u52a9\u4e2d\u5e8f\u904d\u5386\u5b9e\u73b0","title":"\u601d\u8def"},{"location":"17.12.html#_4","text":"class Solution { private: TreeNode* head = new TreeNode(-1); TreeNode* prev = nullptr; public: void helper(TreeNode* cur) { if(cur != nullptr) { helper(cur->left); if(prev != nullptr) { prev ->right = cur; prev = cur; } else { prev = cur; head->right = cur; } // \u5de6\u94fe\u63a5\u8bbe\u7f6e\u4e3a\u7a7a cur->left = nullptr; helper(cur->right); } } TreeNode* convertBiNode(TreeNode* root) { helper(root); return head->right; // \u8fd8\u8981\u91ca\u653e head } };","title":"\u89e3\u7b54:"},{"location":"17.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002\u7b54\u6848\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u3002 \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1adigits = \"23\" >\u8f93\u51fa\uff1a[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"] \u601d\u8def \u56de\u6eaf\u7b97\u6cd5 \u89e3\u7b54: class Solution { public: vector<string> letterCombinations(string digits) { vector<string> combinations; if (digits.empty()) { return combinations; } unordered_map<char, string> phoneMap{ {'2', \"abc\"}, {'3', \"def\"}, {'4', \"ghi\"}, {'5', \"jkl\"}, {'6', \"mno\"}, {'7', \"pqrs\"}, {'8', \"tuv\"}, {'9', \"wxyz\"} }; string combination; backtrack(combinations, phoneMap, digits, 0, combination); return combinations; } void backtrack(vector<string>& combinations, const unordered_map<char, string>& phoneMap, const string& digits, int index, string& combination) { if (index == digits.length()) { combinations.push_back(combination); } else { char digit = digits[index]; const string& letters = phoneMap.at(digit); for (const char& letter: letters) { combination.push_back(letter); backtrack(combinations, phoneMap, digits, index + 1, combination); combination.pop_back(); } } } }; \u603b\u7ed3 \u601d\u60f3\u8f83\u4e3a\u7b80\u5355,\u4f46\u4ee3\u7801\u5f88\u96be\u5199~~","title":17},{"location":"17.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002\u7b54\u6848\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u3002 \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002","title":"\u9898\u76ee:"},{"location":"17.html#_2","text":">\u8f93\u5165\uff1adigits = \"23\" >\u8f93\u51fa\uff1a[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]","title":"\u793a\u4f8b:"},{"location":"17.html#_3","text":"\u56de\u6eaf\u7b97\u6cd5","title":"\u601d\u8def"},{"location":"17.html#_4","text":"class Solution { public: vector<string> letterCombinations(string digits) { vector<string> combinations; if (digits.empty()) { return combinations; } unordered_map<char, string> phoneMap{ {'2', \"abc\"}, {'3', \"def\"}, {'4', \"ghi\"}, {'5', \"jkl\"}, {'6', \"mno\"}, {'7', \"pqrs\"}, {'8', \"tuv\"}, {'9', \"wxyz\"} }; string combination; backtrack(combinations, phoneMap, digits, 0, combination); return combinations; } void backtrack(vector<string>& combinations, const unordered_map<char, string>& phoneMap, const string& digits, int index, string& combination) { if (index == digits.length()) { combinations.push_back(combination); } else { char digit = digits[index]; const string& letters = phoneMap.at(digit); for (const char& letter: letters) { combination.push_back(letter); backtrack(combinations, phoneMap, digits, index + 1, combination); combination.pop_back(); } } } };","title":"\u89e3\u7b54:"},{"location":"17.html#_5","text":"\u601d\u60f3\u8f83\u4e3a\u7b80\u5355,\u4f46\u4ee3\u7801\u5f88\u96be\u5199~~","title":"\u603b\u7ed3"},{"location":"1705.html","text":"\u9898\u76ee: \u6709\u4e00\u68f5\u7279\u6b8a\u7684\u82f9\u679c\u6811\uff0c\u4e00\u8fde n \u5929\uff0c\u6bcf\u5929\u90fd\u53ef\u4ee5\u957f\u51fa\u82e5\u5e72\u4e2a\u82f9\u679c\u3002\u5728\u7b2c i \u5929\uff0c\u6811\u4e0a\u4f1a\u957f\u51fa apples[i] \u4e2a\u82f9\u679c\uff0c\u8fd9\u4e9b\u82f9\u679c\u5c06\u4f1a\u5728 days[i] \u5929\u540e\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c i + days[i] \u5929\u65f6\uff09\u8150\u70c2\uff0c\u53d8\u5f97\u65e0\u6cd5\u98df\u7528\u3002\u4e5f\u53ef\u80fd\u6709\u90a3\u4e48\u51e0\u5929\uff0c\u6811\u4e0a\u4e0d\u4f1a\u957f\u51fa\u65b0\u7684\u82f9\u679c\uff0c\u6b64\u65f6\u7528 apples[i] == 0 \u4e14 days[i] == 0 \u8868\u793a\u3002 \u4f60\u6253\u7b97\u6bcf\u5929 \u6700\u591a \u5403\u4e00\u4e2a\u82f9\u679c\u6765\u4fdd\u8bc1\u8425\u517b\u5747\u8861\u3002\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9 n \u5929\u4e4b\u540e\u7ee7\u7eed\u5403\u82f9\u679c\u3002 \u7ed9\u4f60\u4e24\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 days \u548c apples \uff0c\u8fd4\u56de\u4f60\u53ef\u4ee5\u5403\u6389\u7684\u82f9\u679c\u7684\u6700\u5927\u6570\u76ee\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1aapples = [1,2,3,5,2], days = [3,2,1,4,2] >\u8f93\u51fa\uff1a7 >\u89e3\u91ca\uff1a\u4f60\u53ef\u4ee5\u5403\u6389 7 \u4e2a\u82f9\u679c\uff1a - \u7b2c\u4e00\u5929\uff0c\u4f60\u5403\u6389\u7b2c\u4e00\u5929\u957f\u51fa\u6765\u7684\u82f9\u679c\u3002 - \u7b2c\u4e8c\u5929\uff0c\u4f60\u5403\u6389\u4e00\u4e2a\u7b2c\u4e8c\u5929\u957f\u51fa\u6765\u7684\u82f9\u679c\u3002 - \u7b2c\u4e09\u5929\uff0c\u4f60\u5403\u6389\u4e00\u4e2a\u7b2c\u4e8c\u5929\u957f\u51fa\u6765\u7684\u82f9\u679c\u3002\u8fc7\u4e86\u8fd9\u4e00\u5929\uff0c\u7b2c\u4e09\u5929\u957f\u51fa\u6765\u7684\u82f9\u679c\u5c31\u5df2\u7ecf\u8150\u70c2\u4e86\u3002 - \u7b2c\u56db\u5929\u5230\u7b2c\u4e03\u5929\uff0c\u4f60\u5403\u7684\u90fd\u662f\u7b2c\u56db\u5929\u957f\u51fa\u6765\u7684\u82f9\u679c \u601d\u8def \u7528\u6700\u5c0f\u5806,\u4f18\u5148\u5403\u6389\u5148\u8fc7\u671f\u7684 \u89e3\u7b54: //\u89e3\u7b54\u9519\u8bef,\u601d\u8def\u540c1288(\u8d2a\u5fc3\u7b97\u6cd5) //[2,1,10][2,10,1] class Solution { public: int eatenApples(vector<int>& apples, vector<int>& days) { int res = 0; vector<vector<int>> set; //\u5bf9\u8f93\u5165\u8fdb\u884c\u5904\u7406\uff0c\u4f7f\u5f97 \u5f53\u5929\u8bde\u751f\u7684\u82f9\u679c\u90fd\u53d8\u6210\u4e00\u4e2a\u533a\u95f4 [\u8bde\u751f\u5929\u6570, \u6700\u540e\u4e00\u4e2a\u8150\u8d25\u7684\u6700\u540e\u4e00\u5929/ \u6bcf\u5929\u5403\u4e00\u4e2a\u82f9\u679c\u53ef\u4ee5\u5403\u591a\u5c11\u5929] for(int i = 0; i < apples.size(); ++i) { if(apples[i] != 0) set.push_back({i + 1/*\u5929\u6570\u8981\u5728\u4e0b\u6807\u7684\u57fa\u7840\u4e0a+1*/, i + min(days[i], apples[i])}); } /*for(auto p : merged) { std::cout << p[0] << \" \"<<p[1]<<std::endl; }*/ //\u5408\u5e76\u533a\u95f4 vector<vector<int>> merged; merged.push_back({set[0][0], set[0][1]}); for(size_t i = 1; i < set.size(); ++i) { int L = set[ i ][ 0 ];//\u5de6\u53f3\u533a\u95f4 int R = set[ i ][ 1 ]; if(merged.back()[0] + 1 == L ){ merged.back()[1] = R; } else if(merged.back()[1] == L){ merged.back()[1] = R; } else if(merged.back()[1] + 1 == L) { merged.back()[1] = R; } else if(merged.back()[0] <= L && R <= merged.back()[1]){ continue; } else merged.push_back({L, R}); } for(auto p : merged) { std::cout << p[0] << \" \"<<p[1]<<std::endl; } //\u7edf\u8ba1\u5b50\u533a\u95f4\u7684\u603b\u957f\u5ea6,\u8fd4\u56de for(auto p : merged) { res += p[1] - p[0] +1; } return res; } }; \u6807\u51c6\u7b54\u6848 class Solution { public: #define PII pair<int, int> int eatenApples(vector<int>& apples, vector<int>& days) { int res = 0; priority_queue<PII, vector<PII>, greater<PII> > save; //\u6309\u8fc7\u671f\u65e5\u671f\u5347\u5e8f for (int i = 0; i < apples.size() || !save.empty(); i++) { //\u5230\u4e86\u8fc7\u671f\u90a3\u4e00\u5929\u5c31\u5220\u6389 while(!save.empty() && save.top().first == i){ //\u5230\u4e86\u8fc7\u671f\u7684\u65e5\u5b50 save.pop(); } //\u52a0\u5165\u4eca\u5929\u4ea7\u51fa\u7684\u679c\u5b50 if(i<apples.size()&&apples[i]!=0) save.push(make_pair(i+days[i], apples[i])); //\u5982\u679c\u6709\u679c\u5b50\u7684\u8bdd\uff0c\u5403\u679c\u5b50 if(!save.empty()){ PII tmp = save.top(); save.pop(); res++; tmp.second--; if(tmp.second>0){ //\u679c\u5b50\u6ca1\u5403\u5b8c\uff0c\u653e\u56de\u53bb save.push(tmp); } } } return res; } };","title":1705},{"location":"1705.html#_1","text":"\u6709\u4e00\u68f5\u7279\u6b8a\u7684\u82f9\u679c\u6811\uff0c\u4e00\u8fde n \u5929\uff0c\u6bcf\u5929\u90fd\u53ef\u4ee5\u957f\u51fa\u82e5\u5e72\u4e2a\u82f9\u679c\u3002\u5728\u7b2c i \u5929\uff0c\u6811\u4e0a\u4f1a\u957f\u51fa apples[i] \u4e2a\u82f9\u679c\uff0c\u8fd9\u4e9b\u82f9\u679c\u5c06\u4f1a\u5728 days[i] \u5929\u540e\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c i + days[i] \u5929\u65f6\uff09\u8150\u70c2\uff0c\u53d8\u5f97\u65e0\u6cd5\u98df\u7528\u3002\u4e5f\u53ef\u80fd\u6709\u90a3\u4e48\u51e0\u5929\uff0c\u6811\u4e0a\u4e0d\u4f1a\u957f\u51fa\u65b0\u7684\u82f9\u679c\uff0c\u6b64\u65f6\u7528 apples[i] == 0 \u4e14 days[i] == 0 \u8868\u793a\u3002 \u4f60\u6253\u7b97\u6bcf\u5929 \u6700\u591a \u5403\u4e00\u4e2a\u82f9\u679c\u6765\u4fdd\u8bc1\u8425\u517b\u5747\u8861\u3002\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9 n \u5929\u4e4b\u540e\u7ee7\u7eed\u5403\u82f9\u679c\u3002 \u7ed9\u4f60\u4e24\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 days \u548c apples \uff0c\u8fd4\u56de\u4f60\u53ef\u4ee5\u5403\u6389\u7684\u82f9\u679c\u7684\u6700\u5927\u6570\u76ee\u3002","title":"\u9898\u76ee:"},{"location":"1705.html#_2","text":">\u8f93\u5165\uff1aapples = [1,2,3,5,2], days = [3,2,1,4,2] >\u8f93\u51fa\uff1a7 >\u89e3\u91ca\uff1a\u4f60\u53ef\u4ee5\u5403\u6389 7 \u4e2a\u82f9\u679c\uff1a - \u7b2c\u4e00\u5929\uff0c\u4f60\u5403\u6389\u7b2c\u4e00\u5929\u957f\u51fa\u6765\u7684\u82f9\u679c\u3002 - \u7b2c\u4e8c\u5929\uff0c\u4f60\u5403\u6389\u4e00\u4e2a\u7b2c\u4e8c\u5929\u957f\u51fa\u6765\u7684\u82f9\u679c\u3002 - \u7b2c\u4e09\u5929\uff0c\u4f60\u5403\u6389\u4e00\u4e2a\u7b2c\u4e8c\u5929\u957f\u51fa\u6765\u7684\u82f9\u679c\u3002\u8fc7\u4e86\u8fd9\u4e00\u5929\uff0c\u7b2c\u4e09\u5929\u957f\u51fa\u6765\u7684\u82f9\u679c\u5c31\u5df2\u7ecf\u8150\u70c2\u4e86\u3002 - \u7b2c\u56db\u5929\u5230\u7b2c\u4e03\u5929\uff0c\u4f60\u5403\u7684\u90fd\u662f\u7b2c\u56db\u5929\u957f\u51fa\u6765\u7684\u82f9\u679c","title":"\u793a\u4f8b:"},{"location":"1705.html#_3","text":"\u7528\u6700\u5c0f\u5806,\u4f18\u5148\u5403\u6389\u5148\u8fc7\u671f\u7684","title":"\u601d\u8def"},{"location":"1705.html#_4","text":"//\u89e3\u7b54\u9519\u8bef,\u601d\u8def\u540c1288(\u8d2a\u5fc3\u7b97\u6cd5) //[2,1,10][2,10,1] class Solution { public: int eatenApples(vector<int>& apples, vector<int>& days) { int res = 0; vector<vector<int>> set; //\u5bf9\u8f93\u5165\u8fdb\u884c\u5904\u7406\uff0c\u4f7f\u5f97 \u5f53\u5929\u8bde\u751f\u7684\u82f9\u679c\u90fd\u53d8\u6210\u4e00\u4e2a\u533a\u95f4 [\u8bde\u751f\u5929\u6570, \u6700\u540e\u4e00\u4e2a\u8150\u8d25\u7684\u6700\u540e\u4e00\u5929/ \u6bcf\u5929\u5403\u4e00\u4e2a\u82f9\u679c\u53ef\u4ee5\u5403\u591a\u5c11\u5929] for(int i = 0; i < apples.size(); ++i) { if(apples[i] != 0) set.push_back({i + 1/*\u5929\u6570\u8981\u5728\u4e0b\u6807\u7684\u57fa\u7840\u4e0a+1*/, i + min(days[i], apples[i])}); } /*for(auto p : merged) { std::cout << p[0] << \" \"<<p[1]<<std::endl; }*/ //\u5408\u5e76\u533a\u95f4 vector<vector<int>> merged; merged.push_back({set[0][0], set[0][1]}); for(size_t i = 1; i < set.size(); ++i) { int L = set[ i ][ 0 ];//\u5de6\u53f3\u533a\u95f4 int R = set[ i ][ 1 ]; if(merged.back()[0] + 1 == L ){ merged.back()[1] = R; } else if(merged.back()[1] == L){ merged.back()[1] = R; } else if(merged.back()[1] + 1 == L) { merged.back()[1] = R; } else if(merged.back()[0] <= L && R <= merged.back()[1]){ continue; } else merged.push_back({L, R}); } for(auto p : merged) { std::cout << p[0] << \" \"<<p[1]<<std::endl; } //\u7edf\u8ba1\u5b50\u533a\u95f4\u7684\u603b\u957f\u5ea6,\u8fd4\u56de for(auto p : merged) { res += p[1] - p[0] +1; } return res; } };","title":"\u89e3\u7b54:"},{"location":"1705.html#_5","text":"class Solution { public: #define PII pair<int, int> int eatenApples(vector<int>& apples, vector<int>& days) { int res = 0; priority_queue<PII, vector<PII>, greater<PII> > save; //\u6309\u8fc7\u671f\u65e5\u671f\u5347\u5e8f for (int i = 0; i < apples.size() || !save.empty(); i++) { //\u5230\u4e86\u8fc7\u671f\u90a3\u4e00\u5929\u5c31\u5220\u6389 while(!save.empty() && save.top().first == i){ //\u5230\u4e86\u8fc7\u671f\u7684\u65e5\u5b50 save.pop(); } //\u52a0\u5165\u4eca\u5929\u4ea7\u51fa\u7684\u679c\u5b50 if(i<apples.size()&&apples[i]!=0) save.push(make_pair(i+days[i], apples[i])); //\u5982\u679c\u6709\u679c\u5b50\u7684\u8bdd\uff0c\u5403\u679c\u5b50 if(!save.empty()){ PII tmp = save.top(); save.pop(); res++; tmp.second--; if(tmp.second>0){ //\u679c\u5b50\u6ca1\u5403\u5b8c\uff0c\u653e\u56de\u53bb save.push(tmp); } } } return res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"179.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u7ec4\u975e\u8d1f\u6574\u6570 nums\uff0c\u91cd\u65b0\u6392\u5217\u5b83\u4eec\u6bcf\u4e2a\u6570\u5b57\u7684\u987a\u5e8f\uff08\u6bcf\u4e2a\u6570\u5b57\u4e0d\u53ef\u62c6\u5206\uff09\u4f7f\u4e4b\u7ec4\u6210\u4e00\u4e2a\u6700\u5927\u7684\u6574\u6570\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [10,2] >\u8f93\u51fa\uff1a\"210\" >\u8f93\u5165\uff1anums = [3,30,34,5,9] >\u8f93\u51fa\uff1a\"9534330\" >\u8f93\u5165\uff1a[1] >\u8f93\u51fa\uff1a\"1\" >\u8f93\u5165\uff1a[10] >\u8f93\u51fa\uff1a\"10\" \u601d\u8def \u5229\u7528multiSet \u63d2\u5165\u540e\u662f\u6392\u5e8f\u597d\u7684\u6570\u636e \u89e3\u7b54: struct Compare{ bool operator()(const int& a, const int& b) { return to_string(a)+to_string(b) > to_string(b)+to_string(a); } }; class Solution { public: string largestNumber(vector<int>& nums) { multiset<int, Compare> Set; string ret = \"\"; for(int num :nums) { Set.insert(num); } for(auto num :Set) { ret.append(std::to_string(num)); } return ret; } }; \u6807\u51c6\u7b54\u6848 /* \u5148\u8f6c\u53d8\u6210string,\u518d\u901a\u8fc7sort\u6392\u5e8f\u3002 \u6392\u5e8f\u7684\u89c4\u5219\u662f a + b > b + a \u8f83\u4e3a\u5de7\u5999\uff0c\u503c\u5f97\u5b66\u4e60 */ class Solution { public: string largestNumber(vector<int>& nums) { vector<string> num_string; for(int num: nums ) num_string.push_back(std::to_string(num)); sort(num_string.begin(), num_string.end(), [&](string& a, string&b ){ return a + b > b + a; }); string ans; for(auto s: num_string) { ans.append(s); } if(ans[0]=='0') return \"0\"; return ans; } }; \u603b\u7ed3 \u81ea\u5df1\u7684\u60f3\u6cd5\u5b9e\u73b0\u4e86\u5f88\u4e45..... \u5bf9\u4e8eC++\u4e0d\u592a\u719f\u6089\uff0c\u4e00\u4e9b\u5e38\u89c1\u7684\u51fd\u6570\u4e5f\u4e0d\u77e5\u9053....","title":179},{"location":"179.html#_1","text":"\u7ed9\u5b9a\u4e00\u7ec4\u975e\u8d1f\u6574\u6570 nums\uff0c\u91cd\u65b0\u6392\u5217\u5b83\u4eec\u6bcf\u4e2a\u6570\u5b57\u7684\u987a\u5e8f\uff08\u6bcf\u4e2a\u6570\u5b57\u4e0d\u53ef\u62c6\u5206\uff09\u4f7f\u4e4b\u7ec4\u6210\u4e00\u4e2a\u6700\u5927\u7684\u6574\u6570\u3002","title":"\u9898\u76ee:"},{"location":"179.html#_2","text":">\u8f93\u5165\uff1anums = [10,2] >\u8f93\u51fa\uff1a\"210\" >\u8f93\u5165\uff1anums = [3,30,34,5,9] >\u8f93\u51fa\uff1a\"9534330\" >\u8f93\u5165\uff1a[1] >\u8f93\u51fa\uff1a\"1\" >\u8f93\u5165\uff1a[10] >\u8f93\u51fa\uff1a\"10\"","title":"\u793a\u4f8b:"},{"location":"179.html#_3","text":"\u5229\u7528multiSet \u63d2\u5165\u540e\u662f\u6392\u5e8f\u597d\u7684\u6570\u636e","title":"\u601d\u8def"},{"location":"179.html#_4","text":"struct Compare{ bool operator()(const int& a, const int& b) { return to_string(a)+to_string(b) > to_string(b)+to_string(a); } }; class Solution { public: string largestNumber(vector<int>& nums) { multiset<int, Compare> Set; string ret = \"\"; for(int num :nums) { Set.insert(num); } for(auto num :Set) { ret.append(std::to_string(num)); } return ret; } };","title":"\u89e3\u7b54:"},{"location":"179.html#_5","text":"/* \u5148\u8f6c\u53d8\u6210string,\u518d\u901a\u8fc7sort\u6392\u5e8f\u3002 \u6392\u5e8f\u7684\u89c4\u5219\u662f a + b > b + a \u8f83\u4e3a\u5de7\u5999\uff0c\u503c\u5f97\u5b66\u4e60 */ class Solution { public: string largestNumber(vector<int>& nums) { vector<string> num_string; for(int num: nums ) num_string.push_back(std::to_string(num)); sort(num_string.begin(), num_string.end(), [&](string& a, string&b ){ return a + b > b + a; }); string ans; for(auto s: num_string) { ans.append(s); } if(ans[0]=='0') return \"0\"; return ans; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"179.html#_6","text":"\u81ea\u5df1\u7684\u60f3\u6cd5\u5b9e\u73b0\u4e86\u5f88\u4e45..... \u5bf9\u4e8eC++\u4e0d\u592a\u719f\u6089\uff0c\u4e00\u4e9b\u5e38\u89c1\u7684\u51fd\u6570\u4e5f\u4e0d\u77e5\u9053....","title":"\u603b\u7ed3"},{"location":"19.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u601d\u8def 1. \u9012\u5f52 2. \u6808 3. \u4e24\u6b21\u904d\u5386 4. \u53cc\u6307\u9488 \u89e3\u7b54: //acceptable class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { //\u63d2\u5165\u5934\u7ed3\u70b9 ListNode* t = new ListNode(-1); t ->next = head; int length = 0; ListNode* p = head; while(p!=nullptr){ length++; p = p ->next; } ListNode* pre = t; //\u5f53\u524d\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u8282\u70b9 p = head; length = length -n; for(;length>0;--length){ pre = p; p = p->next; } pre ->next = p->next; delete(p); head = t->next; delete(t); return head; } }; \u6807\u51c6\u7b54\u6848 //\u5feb\u6162\u6307\u9488 class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { if(head ==nullptr || head->next == nullptr) return nullptr; ListNode* p,* q; p = q = head; // q\u6bd4\u5febn+1\u6b65,\u5f53q\u5230\u8fbe\u94fe\u8868\u5c3e\u65f6\uff0cp\u6307\u5411\u76ee\u6807\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u5143\u7d20 n++; while(n--) { q = q->next; if(q==nullptr) break; } while(q!=nullptr){ q = q->next; p = p->next; } if(p==head && n !=0){ head = head->next; delete(p); } else { p ->next = p->next->next; //delete(p) } return head; } }; \u603b\u7ed3 - \u4e0e\u4e8c\u5206\u67e5\u627e\u4e2d\u4f7f\u7528\u524d\u540e\u4e24\u4e2a\u6307\u9488\u4e0d\u540c\uff0c\u8fd9\u91cc\u4e24\u4e2a\u6307\u9488\u5411\u4e00\u4e2a\u65b9\u5411\u79fb\u52a8.","title":19},{"location":"19.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002","title":"\u9898\u76ee:"},{"location":"19.html#_2","text":"1. \u9012\u5f52 2. \u6808 3. \u4e24\u6b21\u904d\u5386 4. \u53cc\u6307\u9488","title":"\u601d\u8def"},{"location":"19.html#_3","text":"//acceptable class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { //\u63d2\u5165\u5934\u7ed3\u70b9 ListNode* t = new ListNode(-1); t ->next = head; int length = 0; ListNode* p = head; while(p!=nullptr){ length++; p = p ->next; } ListNode* pre = t; //\u5f53\u524d\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u8282\u70b9 p = head; length = length -n; for(;length>0;--length){ pre = p; p = p->next; } pre ->next = p->next; delete(p); head = t->next; delete(t); return head; } };","title":"\u89e3\u7b54:"},{"location":"19.html#_4","text":"//\u5feb\u6162\u6307\u9488 class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { if(head ==nullptr || head->next == nullptr) return nullptr; ListNode* p,* q; p = q = head; // q\u6bd4\u5febn+1\u6b65,\u5f53q\u5230\u8fbe\u94fe\u8868\u5c3e\u65f6\uff0cp\u6307\u5411\u76ee\u6807\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u5143\u7d20 n++; while(n--) { q = q->next; if(q==nullptr) break; } while(q!=nullptr){ q = q->next; p = p->next; } if(p==head && n !=0){ head = head->next; delete(p); } else { p ->next = p->next->next; //delete(p) } return head; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"19.html#_5","text":"- \u4e0e\u4e8c\u5206\u67e5\u627e\u4e2d\u4f7f\u7528\u524d\u540e\u4e24\u4e2a\u6307\u9488\u4e0d\u540c\uff0c\u8fd9\u91cc\u4e24\u4e2a\u6307\u9488\u5411\u4e00\u4e2a\u65b9\u5411\u79fb\u52a8.","title":"\u603b\u7ed3"},{"location":"22.html","text":"\u9898\u76ee: \u6570\u5b57 n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1an = 3 >\u8f93\u51fa\uff1a[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"] \u601d\u8def https://leetcode-cn.com/problems/generate-parentheses/solution/pei-yang-chou-xiang-si-wei-hui-su-jie-fa-7dwu/ \u89e3\u7b54: //1. \u6a21\u62df\u6df1\u5ea6\u4f18\u5148\u904d\u5386,\u6b64\u65f6 res \u4fdd\u5b58\u7684\u662f\u6240\u6709\u7684\u7ec4\u5408 class Solution { public: void dfs(vector<string>& res, int combination,int n) { if( combation.length() == 2 * n) { res.push_back(combination); } else { dfs(res, combination+\"(\",n); dfs(res, combination+\")\",n); } } vector<string> generateParenthesis(int n) { vector<string> res; if( n > 0) dfs(res, \"\",n) //else return res; } }; // 2. \u526a\u679d,\u53bb\u9664\u9519\u8bef\u7684\u7ec4\u5408 class Solution { public: void dfs(vector<string>& res, int combination,int n) { if( left > n || right > left) return; if( combation.length() == 2 * n) { res.push_back(combination); } else { dfs(res, combination+\"(\", n, left +1, right); dfs(res, combination+\")\", n, left, right + 1); } } vector<string> generateParenthesis(int n) { vector<string> res; int left = 0, right = 0; // '(' \u548c ')'\u7684\u4e2a\u6570 if( n > 0) dfs(res, \"\", n, left, right); //else return res; } }; \u603b\u7ed3 - \u56de\u6eaf\u7b97\u6cd5,\u603b\u662f\u53ef\u4ee5\u7406\u89e3\u4e3a\u6811\u7684\u4e00\u79cd\u904d\u5386","title":"22(\u7ecf\u5178)"},{"location":"22.html#_1","text":"\u6570\u5b57 n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002","title":"\u9898\u76ee:"},{"location":"22.html#_2","text":">\u8f93\u5165\uff1an = 3 >\u8f93\u51fa\uff1a[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]","title":"\u793a\u4f8b:"},{"location":"22.html#_3","text":"https://leetcode-cn.com/problems/generate-parentheses/solution/pei-yang-chou-xiang-si-wei-hui-su-jie-fa-7dwu/","title":"\u601d\u8def"},{"location":"22.html#_4","text":"//1. \u6a21\u62df\u6df1\u5ea6\u4f18\u5148\u904d\u5386,\u6b64\u65f6 res \u4fdd\u5b58\u7684\u662f\u6240\u6709\u7684\u7ec4\u5408 class Solution { public: void dfs(vector<string>& res, int combination,int n) { if( combation.length() == 2 * n) { res.push_back(combination); } else { dfs(res, combination+\"(\",n); dfs(res, combination+\")\",n); } } vector<string> generateParenthesis(int n) { vector<string> res; if( n > 0) dfs(res, \"\",n) //else return res; } }; // 2. \u526a\u679d,\u53bb\u9664\u9519\u8bef\u7684\u7ec4\u5408 class Solution { public: void dfs(vector<string>& res, int combination,int n) { if( left > n || right > left) return; if( combation.length() == 2 * n) { res.push_back(combination); } else { dfs(res, combination+\"(\", n, left +1, right); dfs(res, combination+\")\", n, left, right + 1); } } vector<string> generateParenthesis(int n) { vector<string> res; int left = 0, right = 0; // '(' \u548c ')'\u7684\u4e2a\u6570 if( n > 0) dfs(res, \"\", n, left, right); //else return res; } };","title":"\u89e3\u7b54:"},{"location":"22.html#_5","text":"- \u56de\u6eaf\u7b97\u6cd5,\u603b\u662f\u53ef\u4ee5\u7406\u89e3\u4e3a\u6811\u7684\u4e00\u79cd\u904d\u5386","title":"\u603b\u7ed3"},{"location":"220.html","text":"\u9898\u76ee: \u5728\u6574\u6570\u6570\u7ec4 nums \u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0b\u6807 i \u548c j\uff0c\u4f7f\u5f97 nums [i] \u548c nums [j] \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e\u7b49\u4e8e t \uff0c\u4e14\u6ee1\u8db3 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e5f\u5c0f\u4e8e\u7b49\u4e8e \u0137 \u3002 \u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de true\uff0c\u4e0d\u5b58\u5728\u8fd4\u56de false\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [1,2,3,1], k = 3, t = 0 >\u8f93\u51fa\uff1atrue >\u8f93\u5165\uff1anums = [1,0,1,1], k = 1, t = 2 >\u8f93\u51fa\uff1atrue >\u8f93\u5165\uff1a nums = [1,5,9,1,5,9], k = 2, t = 3 >\u8f93\u51fa\uff1afalse \u601d\u8def \u66b4\u529b\u6cd5 - \u65f6\u95f4\u8d85\u65f6 \u7531\u66b4\u529b\u6cd5\u6765\u7684\u6ed1\u52a8\u7a97\u53e3\u6cd5 \u6392\u5e8f\uff0c\u4e5f\u5c31\u662fsort()\u8fd9\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u7528\u4e8c\u5206\u67e5\u627e\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u503c \u89e3\u7b54: struct Data{ int value; int index; }; bool Oper(const Data&a, const Data&b){ return a.value <b.value; } //\u4e8c\u5206\u67e5\u627e bool find(const vector<Data>& nums, long target, int k, int t,int m) { auto begin = upper_bound(nums.begin(),nums.end(), target-t,Oper); auto end = lower_bound(nums.begin(),nums.end(), target+t,Oper); for(;begin!=end;begin++){ if(abs(m-begin->index) <=k) return true; } return false; } class Solution { public: bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) { if(nums.size() == 0) return false; vector<Data> new_nums; for(int i =0;i<nums.size();i++) { Data a={nums[i],i}; new_nums.push_back(a); } sort(new_nums.begin(), new_nums.end(),[&](Data& a, Data& b){ return a.value < b.value; }); // printf(\"%d \",new_nums.size()); for(size_t i=0;i< new_nums.size(); ++i){ long temp = new_nums[i].value; if(find(new_nums, temp, k ,t,new_nums[i].index)) return true; // if(labs(temp)<=t && // abs(new_nums[i].index-new_nums[j].index)<=k) } } return false; // \u9ed8\u8ba4\u4e3a\u4e0d\u6ee1\u8db3 } }; \u6807\u51c6\u7b54\u6848 // \u6ed1\u52a8\u7a97\u53e3 class Solution { public: bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) { if (nums.empty()) return false; set<long> st; for (int i = 0; i < nums.size(); ++i) { auto s = st.lower_bound((long)nums[i] - t);//\u627e\u5927\u4e8e\u7b49\u4e8enum[i] - t\u7684\u6570 if (s != st.end() && *s <= (long)nums[i] + t) return true; st.insert(nums[i]); if (st.size() > k) { st.erase(nums[i - k]); //\u4fdd\u6301\u6ed1\u52a8\u7a97\u53e3 } } return false; } }; \u603b\u7ed3 - int\u7c7b\u578b\u76f8\u4e92\u505a\u8fd0\u7b97\u65f6\uff0c\u8981\u6ce8\u610f\u662f\u5426\u4f1a\u51fa\u73b0\u6ea2\u51fa\u7684\u60c5\u51b5 - C++\u4e2dset\u548cmultiset\u901a\u5e38\u662f\u4f7f\u7528\u7684\u4e8c\u5206\u5e73\u8861\u6811\uff0c\u6784\u5efa\u7684.\u901a\u8fc7Insert\u6784\u5efa\u51fa\u6765\u7684set\u662f\u6709\u5e8f\u7684","title":220},{"location":"220.html#_1","text":"\u5728\u6574\u6570\u6570\u7ec4 nums \u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0b\u6807 i \u548c j\uff0c\u4f7f\u5f97 nums [i] \u548c nums [j] \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e\u7b49\u4e8e t \uff0c\u4e14\u6ee1\u8db3 i \u548c j \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e5f\u5c0f\u4e8e\u7b49\u4e8e \u0137 \u3002 \u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de true\uff0c\u4e0d\u5b58\u5728\u8fd4\u56de false\u3002","title":"\u9898\u76ee:"},{"location":"220.html#_2","text":">\u8f93\u5165\uff1anums = [1,2,3,1], k = 3, t = 0 >\u8f93\u51fa\uff1atrue >\u8f93\u5165\uff1anums = [1,0,1,1], k = 1, t = 2 >\u8f93\u51fa\uff1atrue >\u8f93\u5165\uff1a nums = [1,5,9,1,5,9], k = 2, t = 3 >\u8f93\u51fa\uff1afalse","title":"\u793a\u4f8b:"},{"location":"220.html#_3","text":"\u66b4\u529b\u6cd5 - \u65f6\u95f4\u8d85\u65f6 \u7531\u66b4\u529b\u6cd5\u6765\u7684\u6ed1\u52a8\u7a97\u53e3\u6cd5 \u6392\u5e8f\uff0c\u4e5f\u5c31\u662fsort()\u8fd9\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u7528\u4e8c\u5206\u67e5\u627e\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u503c","title":"\u601d\u8def"},{"location":"220.html#_4","text":"struct Data{ int value; int index; }; bool Oper(const Data&a, const Data&b){ return a.value <b.value; } //\u4e8c\u5206\u67e5\u627e bool find(const vector<Data>& nums, long target, int k, int t,int m) { auto begin = upper_bound(nums.begin(),nums.end(), target-t,Oper); auto end = lower_bound(nums.begin(),nums.end(), target+t,Oper); for(;begin!=end;begin++){ if(abs(m-begin->index) <=k) return true; } return false; } class Solution { public: bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) { if(nums.size() == 0) return false; vector<Data> new_nums; for(int i =0;i<nums.size();i++) { Data a={nums[i],i}; new_nums.push_back(a); } sort(new_nums.begin(), new_nums.end(),[&](Data& a, Data& b){ return a.value < b.value; }); // printf(\"%d \",new_nums.size()); for(size_t i=0;i< new_nums.size(); ++i){ long temp = new_nums[i].value; if(find(new_nums, temp, k ,t,new_nums[i].index)) return true; // if(labs(temp)<=t && // abs(new_nums[i].index-new_nums[j].index)<=k) } } return false; // \u9ed8\u8ba4\u4e3a\u4e0d\u6ee1\u8db3 } };","title":"\u89e3\u7b54:"},{"location":"220.html#_5","text":"// \u6ed1\u52a8\u7a97\u53e3 class Solution { public: bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) { if (nums.empty()) return false; set<long> st; for (int i = 0; i < nums.size(); ++i) { auto s = st.lower_bound((long)nums[i] - t);//\u627e\u5927\u4e8e\u7b49\u4e8enum[i] - t\u7684\u6570 if (s != st.end() && *s <= (long)nums[i] + t) return true; st.insert(nums[i]); if (st.size() > k) { st.erase(nums[i - k]); //\u4fdd\u6301\u6ed1\u52a8\u7a97\u53e3 } } return false; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"220.html#_6","text":"- int\u7c7b\u578b\u76f8\u4e92\u505a\u8fd0\u7b97\u65f6\uff0c\u8981\u6ce8\u610f\u662f\u5426\u4f1a\u51fa\u73b0\u6ea2\u51fa\u7684\u60c5\u51b5 - C++\u4e2dset\u548cmultiset\u901a\u5e38\u662f\u4f7f\u7528\u7684\u4e8c\u5206\u5e73\u8861\u6811\uff0c\u6784\u5efa\u7684.\u901a\u8fc7Insert\u6784\u5efa\u51fa\u6765\u7684set\u662f\u6709\u5e8f\u7684","title":"\u603b\u7ed3"},{"location":"240.html","text":"\u9898\u76ee: \u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22 m x n \u77e9\u9635 matrix \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target \u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a - \u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002 - \u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1amatrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5 >\u8f93\u51fa\uff1atrue \u601d\u8def \u540c\u53e6\u4e00\u9053 \u77e9\u9635\u641c\u7d22","title":"\u9898\u76ee:"},{"location":"240.html#_1","text":"\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22 m x n \u77e9\u9635 matrix \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target \u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a - \u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002 - \u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002","title":"\u9898\u76ee:"},{"location":"240.html#_2","text":">\u8f93\u5165\uff1amatrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5 >\u8f93\u51fa\uff1atrue","title":"\u793a\u4f8b:"},{"location":"240.html#_3","text":"\u540c\u53e6\u4e00\u9053 \u77e9\u9635\u641c\u7d22","title":"\u601d\u8def"},{"location":"279.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u6b63\u6574\u6570 n\uff0c\u627e\u5230\u82e5\u5e72\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff08\u6bd4\u5982 1, 4, 9, 16, ...\uff09\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u7b49\u4e8e n\u3002\u4f60\u9700\u8981\u8ba9\u7ec4\u6210\u548c\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u4e2a\u6570\u6700\u5c11\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u548c\u4e3a n \u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684 \u6700\u5c11\u6570\u91cf \u3002 \u5b8c\u5168\u5e73\u65b9\u6570 \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5176\u503c\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6574\u6570\u7684\u5e73\u65b9\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u5176\u503c\u7b49\u4e8e\u4e00\u4e2a\u6574\u6570\u81ea\u4e58\u7684\u79ef\u3002\u4f8b\u5982\uff0c1\u30014\u30019 \u548c 16 \u90fd\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u800c 3 \u548c 11 \u4e0d\u662f\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1an = 12 >\u8f93\u51fa\uff1a3 >\u89e3\u91ca\uff1a12 = 4 + 4 + 4 \u601d\u8def dp[j] \u53ef\u4ee5\u7531dp[j - i * i]\u63a8\u51fa\uff0c dp[j - i * i] + 1 \u4fbf\u53ef\u4ee5\u51d1\u6210dp[j]\u3002 \u6b64\u65f6\u6211\u4eec\u8981\u9009\u62e9\u6700\u5c0f\u7684dp[j]\uff0c\u6240\u4ee5\u9012\u63a8\u516c\u5f0f\uff1adp[j] = min(dp[j - i * i] + 1, dp[j]); \u89e3\u7b54: // \u9519\u8bef,\u8f6c\u79fb\u65b9\u7a0b\u9519\u8bef class Solution { public: int numSquares(int n) { vector<bool> flag(n+1, false); // \u5b58\u50a8\u662f\u5426\u662f\u5e73\u65b9\u6570 for(int i = 1; i <= n; i++) { if(sqrt(i)*sqrt(i) == i) flag[i] = true; } vector<int> f(n+1, 1); // \u5b58\u50a8\u5f53\u524d n \u7684\u6700\u5c0f\u503c f[0] = 0;f[1] = 1; for(int i = 1; i < n; ++i) { if(flag[i]) continue; // \u5f53\u524d\u662f\u5e73\u65b9\u6570 //\u8fd9\u91cc\u67e5\u627e\u7684\u662f\u79bb n \u6700\u5927\u5b8c\u5168\u5e73\u65b9\u6570 int m = i; while (flag[i]) { --m; } f[i] = f[i-m] + f[m]; } return f[n]; } }; \u6807\u51c6\u7b54\u6848 class Solution { public: int numSquares(int n) { vector<int> dp(n+1, INT_MAX); dp[0] = 0; for(int i = 0; i <= n; ++i) //\u5bfb\u627e\u6240\u6709\u53ef\u80fd\u7684\u5b8c\u5168\u5e73\u6cd5\u6570 for(int j = 1; j *j <= i; ++j) dp[i] = min(dp[i -j*j] +1, dp[i]); return dp[n]; } }; \u603b\u7ed3 \u8f6c\u79fb\u65b9\u7a0b\u5bfb\u627e\u9519\u8bef","title":"279\u5b8c\u5168\u5e73\u65b9\u6570"},{"location":"279.html#_1","text":"\u7ed9\u5b9a\u6b63\u6574\u6570 n\uff0c\u627e\u5230\u82e5\u5e72\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff08\u6bd4\u5982 1, 4, 9, 16, ...\uff09\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u7b49\u4e8e n\u3002\u4f60\u9700\u8981\u8ba9\u7ec4\u6210\u548c\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u4e2a\u6570\u6700\u5c11\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u548c\u4e3a n \u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684 \u6700\u5c11\u6570\u91cf \u3002 \u5b8c\u5168\u5e73\u65b9\u6570 \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5176\u503c\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6574\u6570\u7684\u5e73\u65b9\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u5176\u503c\u7b49\u4e8e\u4e00\u4e2a\u6574\u6570\u81ea\u4e58\u7684\u79ef\u3002\u4f8b\u5982\uff0c1\u30014\u30019 \u548c 16 \u90fd\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u800c 3 \u548c 11 \u4e0d\u662f\u3002","title":"\u9898\u76ee:"},{"location":"279.html#_2","text":">\u8f93\u5165\uff1an = 12 >\u8f93\u51fa\uff1a3 >\u89e3\u91ca\uff1a12 = 4 + 4 + 4","title":"\u793a\u4f8b:"},{"location":"279.html#_3","text":"dp[j] \u53ef\u4ee5\u7531dp[j - i * i]\u63a8\u51fa\uff0c dp[j - i * i] + 1 \u4fbf\u53ef\u4ee5\u51d1\u6210dp[j]\u3002 \u6b64\u65f6\u6211\u4eec\u8981\u9009\u62e9\u6700\u5c0f\u7684dp[j]\uff0c\u6240\u4ee5\u9012\u63a8\u516c\u5f0f\uff1adp[j] = min(dp[j - i * i] + 1, dp[j]);","title":"\u601d\u8def"},{"location":"279.html#_4","text":"// \u9519\u8bef,\u8f6c\u79fb\u65b9\u7a0b\u9519\u8bef class Solution { public: int numSquares(int n) { vector<bool> flag(n+1, false); // \u5b58\u50a8\u662f\u5426\u662f\u5e73\u65b9\u6570 for(int i = 1; i <= n; i++) { if(sqrt(i)*sqrt(i) == i) flag[i] = true; } vector<int> f(n+1, 1); // \u5b58\u50a8\u5f53\u524d n \u7684\u6700\u5c0f\u503c f[0] = 0;f[1] = 1; for(int i = 1; i < n; ++i) { if(flag[i]) continue; // \u5f53\u524d\u662f\u5e73\u65b9\u6570 //\u8fd9\u91cc\u67e5\u627e\u7684\u662f\u79bb n \u6700\u5927\u5b8c\u5168\u5e73\u65b9\u6570 int m = i; while (flag[i]) { --m; } f[i] = f[i-m] + f[m]; } return f[n]; } };","title":"\u89e3\u7b54:"},{"location":"279.html#_5","text":"class Solution { public: int numSquares(int n) { vector<int> dp(n+1, INT_MAX); dp[0] = 0; for(int i = 0; i <= n; ++i) //\u5bfb\u627e\u6240\u6709\u53ef\u80fd\u7684\u5b8c\u5168\u5e73\u6cd5\u6570 for(int j = 1; j *j <= i; ++j) dp[i] = min(dp[i -j*j] +1, dp[i]); return dp[n]; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"279.html#_6","text":"\u8f6c\u79fb\u65b9\u7a0b\u5bfb\u627e\u9519\u8bef","title":"\u603b\u7ed3"},{"location":"3.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b: >\u8f93\u5165: s = \"abcabcbb\" >\u8f93\u51fa: 3 >\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u601d\u8def \u6ed1\u52a8\u7a97\u53e3 \u89e3\u7b54: ```c++class Solution { public: int lengthOfLongestSubstring(string s) { int n = s.size(); int freq[256] = {0}; // \u5f62\u540cunorder_set int ans = 0; int left = 0, right = 0; // \u7ef4\u62a4\u7684\u533a\u95f4[left, right]\u4e00\u5b9a\u662f\u4e0d\u91cd\u590d\u7684 for (int i = 0; i < n; ++i,right++/*i\u548cright\u53ef\u4ee5\u5408\u5e76*/) { char c = s[i]; freq[c] ++; if(freq[c] == 2) // \u5f53\u5f53\u524d\u5143\u7d20\u5df2\u7ecf\u5728\u533a\u95f4[left, right] \u5b58\u5728\u65f6 { //std::cout << c << freq['e']; // std::cout << left <<\" \" <<right <<std::endl; while (left < right && freq[s[left]] == 1) // \u627e\u5230\u51fa\u73b0\u4e24\u6b21\u7684\u5143\u7d20 { freq[s[left]] --; left ++; } // \u6b64\u65f6left\u6307\u5411 \u51fa\u73b0\u4e24\u6b21\u7684\u5143\u7d20 \u7684\u7b2c\u4e00\u6b21\u4f4d\u7f6e // \u5220\u9664\u91cd\u590d\u5143\u7d20 //if(left != right) { freq[s[left]] --; left ++; //} //std::cout << freq['e']; //std::cout << left <<\" \" <<right <<std::endl; } ans = max(ans, i - left + 1); } return ans; } }; ``` \u603b\u7ed3 \u52a8\u4e0d\u52a8\u5c31\u7528 unorder_set? \u52a8\u6001\u89c4\u5212\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u627e\u5230 \u8f6c\u79fb\u65b9\u7a0b","title":3},{"location":"3.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002","title":"\u9898\u76ee:"},{"location":"3.html#_2","text":">\u8f93\u5165: s = \"abcabcbb\" >\u8f93\u51fa: 3 >\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002","title":"\u793a\u4f8b:"},{"location":"3.html#_3","text":"\u6ed1\u52a8\u7a97\u53e3","title":"\u601d\u8def"},{"location":"3.html#_4","text":"```c++class Solution { public: int lengthOfLongestSubstring(string s) { int n = s.size(); int freq[256] = {0}; // \u5f62\u540cunorder_set int ans = 0; int left = 0, right = 0; // \u7ef4\u62a4\u7684\u533a\u95f4[left, right]\u4e00\u5b9a\u662f\u4e0d\u91cd\u590d\u7684 for (int i = 0; i < n; ++i,right++/*i\u548cright\u53ef\u4ee5\u5408\u5e76*/) { char c = s[i]; freq[c] ++; if(freq[c] == 2) // \u5f53\u5f53\u524d\u5143\u7d20\u5df2\u7ecf\u5728\u533a\u95f4[left, right] \u5b58\u5728\u65f6 { //std::cout << c << freq['e']; // std::cout << left <<\" \" <<right <<std::endl; while (left < right && freq[s[left]] == 1) // \u627e\u5230\u51fa\u73b0\u4e24\u6b21\u7684\u5143\u7d20 { freq[s[left]] --; left ++; } // \u6b64\u65f6left\u6307\u5411 \u51fa\u73b0\u4e24\u6b21\u7684\u5143\u7d20 \u7684\u7b2c\u4e00\u6b21\u4f4d\u7f6e // \u5220\u9664\u91cd\u590d\u5143\u7d20 //if(left != right) { freq[s[left]] --; left ++; //} //std::cout << freq['e']; //std::cout << left <<\" \" <<right <<std::endl; } ans = max(ans, i - left + 1); } return ans; } }; ```","title":"\u89e3\u7b54:"},{"location":"3.html#_5","text":"\u52a8\u4e0d\u52a8\u5c31\u7528 unorder_set? \u52a8\u6001\u89c4\u5212\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u627e\u5230 \u8f6c\u79fb\u65b9\u7a0b","title":"\u603b\u7ed3"},{"location":"300.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u5b50\u5e8f\u5217\u662f\u7531\u6570\u7ec4\u6d3e\u751f\u800c\u6765\u7684\u5e8f\u5217\uff0c\u5220\u9664\uff08\u6216\u4e0d\u5220\u9664\uff09\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c[3,6,2,7] \u662f\u6570\u7ec4 [0,3,1,6,2,2,7] \u7684\u5b50\u5e8f\u5217\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [10,9,2,5,3,7,101,18] >\u8f93\u51fa\uff1a4 >\u89e3\u91ca\uff1a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c\u56e0\u6b64\u957f\u5ea6\u4e3a 4 \u601d\u8def \u52a8\u6001\u89c4\u5212 \u540c279 \u5982\u679cdp[j] < dp[i], dp[i] = dp[j] +1 \u89e3\u7b54: class Solution { public: int lengthOfLIS(vector<int>& nums) { int n = nums.size(); vector<int> dp(n, 1); for(int i= 0; i< n; ++i) { //\u627e\u5230\u524d\u9762\u6700\u957f\u7684\u5b50\u5e8f\u5217 for(int j = 0 ; j < i; ++j) { if(nums[j] < nums[i]){ dp[i] = max(dp[i], dp[j]+1); } } } return *max_element(dp.begin(),dp.end()); } };","title":300},{"location":"300.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u5b50\u5e8f\u5217\u662f\u7531\u6570\u7ec4\u6d3e\u751f\u800c\u6765\u7684\u5e8f\u5217\uff0c\u5220\u9664\uff08\u6216\u4e0d\u5220\u9664\uff09\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c[3,6,2,7] \u662f\u6570\u7ec4 [0,3,1,6,2,2,7] \u7684\u5b50\u5e8f\u5217\u3002","title":"\u9898\u76ee:"},{"location":"300.html#_2","text":">\u8f93\u5165\uff1anums = [10,9,2,5,3,7,101,18] >\u8f93\u51fa\uff1a4 >\u89e3\u91ca\uff1a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c\u56e0\u6b64\u957f\u5ea6\u4e3a 4","title":"\u793a\u4f8b:"},{"location":"300.html#_3","text":"\u52a8\u6001\u89c4\u5212 \u540c279 \u5982\u679cdp[j] < dp[i], dp[i] = dp[j] +1","title":"\u601d\u8def"},{"location":"300.html#_4","text":"class Solution { public: int lengthOfLIS(vector<int>& nums) { int n = nums.size(); vector<int> dp(n, 1); for(int i= 0; i< n; ++i) { //\u627e\u5230\u524d\u9762\u6700\u957f\u7684\u5b50\u5e8f\u5217 for(int j = 0 ; j < i; ++j) { if(nums[j] < nums[i]){ dp[i] = max(dp[i], dp[j]+1); } } } return *max_element(dp.begin(),dp.end()); } };","title":"\u89e3\u7b54:"},{"location":"316.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u4e2d\u5171\u6709 n \u4e2a\u6574\u6570\u3002132 \u6a21\u5f0f\u7684\u5b50\u5e8f\u5217 \u7531\u4e09\u4e2a\u6574\u6570 nums[i]\u3001nums[j] \u548c nums[k] \u7ec4\u6210\uff0c\u5e76\u540c\u65f6\u6ee1\u8db3\uff1ai < j < k \u548c nums[i] < nums[k] < nums[j] \u3002 \u5982\u679c nums \u4e2d\u5b58\u5728 132 \u6a21\u5f0f\u7684\u5b50\u5e8f\u5217 \uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u793a\u4f8b: \u8f93\u5165\uff1anums = [3,1,4,2] \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u5e8f\u5217\u4e2d\u6709 1 \u4e2a 132 \u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\uff1a [1, 4, 2] \u3002 \u601d\u8def \u4e3b\u8981\u601d\u8def\u662f\u4ece\u540e\u5f80\u524d\u53bb\u904d\u5386,\u7ef4\u62a4\u4e00\u4e2a\u6808,\u4fdd\u8bc1\u662f\u5355\u8c03\u9012\u51cf\u6808 \u5c31\u662f\u5355\u8c03\u6808\u7ef4\u62a4\u7684\u662f3\uff0cmax_k\u7ef4\u62a4\u7684\u662f2\uff0c\u679a\u4e3e\u7684\u662f1 \u6807\u51c6\u7b54\u6848 class Solution { public: bool find132pattern(vector<int>& nums) { stack<int> st; int n = nums.size(), k = INT_MIN; //k\u8bb0\u5f55\u6240\u6709\u51fa\u6808\u5143\u7d20\u7684\u6700\u5927\u503c for(int i = n - 1; i >= 0; i--){ //\u9006\u5e8f\u904d\u5386\u6570\u7ec4 if(nums[i] < k) return true; // \u80af\u5b9a\u6709\u6bd4 k \u5927\u7684\u6570\u5b58\u5728 while(!st.empty() and st.top() < nums[i]) { k = max(k,st.top()); st.pop(); } st.push(nums[i]); } return false; } }; \u603b\u7ed3","title":316},{"location":"316.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u4e2d\u5171\u6709 n \u4e2a\u6574\u6570\u3002132 \u6a21\u5f0f\u7684\u5b50\u5e8f\u5217 \u7531\u4e09\u4e2a\u6574\u6570 nums[i]\u3001nums[j] \u548c nums[k] \u7ec4\u6210\uff0c\u5e76\u540c\u65f6\u6ee1\u8db3\uff1ai < j < k \u548c nums[i] < nums[k] < nums[j] \u3002 \u5982\u679c nums \u4e2d\u5b58\u5728 132 \u6a21\u5f0f\u7684\u5b50\u5e8f\u5217 \uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002","title":"\u9898\u76ee:"},{"location":"316.html#_2","text":"\u8f93\u5165\uff1anums = [3,1,4,2] \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u5e8f\u5217\u4e2d\u6709 1 \u4e2a 132 \u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\uff1a [1, 4, 2] \u3002","title":"\u793a\u4f8b:"},{"location":"316.html#_3","text":"\u4e3b\u8981\u601d\u8def\u662f\u4ece\u540e\u5f80\u524d\u53bb\u904d\u5386,\u7ef4\u62a4\u4e00\u4e2a\u6808,\u4fdd\u8bc1\u662f\u5355\u8c03\u9012\u51cf\u6808 \u5c31\u662f\u5355\u8c03\u6808\u7ef4\u62a4\u7684\u662f3\uff0cmax_k\u7ef4\u62a4\u7684\u662f2\uff0c\u679a\u4e3e\u7684\u662f1","title":"\u601d\u8def"},{"location":"316.html#_4","text":"class Solution { public: bool find132pattern(vector<int>& nums) { stack<int> st; int n = nums.size(), k = INT_MIN; //k\u8bb0\u5f55\u6240\u6709\u51fa\u6808\u5143\u7d20\u7684\u6700\u5927\u503c for(int i = n - 1; i >= 0; i--){ //\u9006\u5e8f\u904d\u5386\u6570\u7ec4 if(nums[i] < k) return true; // \u80af\u5b9a\u6709\u6bd4 k \u5927\u7684\u6570\u5b58\u5728 while(!st.empty() and st.top() < nums[i]) { k = max(k,st.top()); st.pop(); } st.push(nums[i]); } return false; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"316.html#_5","text":"","title":"\u603b\u7ed3"},{"location":"322.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01 coins \u548c\u4e00\u4e2a\u603b\u91d1\u989d amount\u3002\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u7684\u786c\u5e01\u4e2a\u6570\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u786c\u5e01\u7ec4\u5408\u80fd\u7ec4\u6210\u603b\u91d1\u989d\uff0c\u8fd4\u56de -1\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u79cd\u786c\u5e01\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\u3002 \u793a\u4f8b: \u8f93\u5165\uff1acoins = [1, 2, 5], amount = 11 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a11 = 5 + 5 + 1 \u601d\u8def \u8d2a\u5fc3\u7b97\u6cd5 \u8fc7\u4e0d\u4e86 \u80cc\u5305\u95ee\u9898\u5168\u89e3\u6790 \u89e3\u7b54: //\u8d2a\u5fc3\u7b97\u6cd5 class Solution { public: int coinChange(vector<int>& coins, int amount) { int res = 0; sort(coins.begin(), coins.end(), greater<int>()); for(int i = 0; amount > 0 && i < coins.size(); ) { if(coins[i] > amount) { ++ i; continue; } amount -= coins[i]; res ++; } return amount == 0 ? res : -1; } }; \u6807\u51c6\u7b54\u6848 // dp[i] \u8868\u793a\u7ec4\u6210\u91d1\u989d i \u6240\u9700\u7684\u6700\u5c11\u7684\u786c\u5e01\u6570\u91cf // dp[i] = dp[ i - coins[j]] + 1 ,\u5f53\u524d\u4ef7\u683c\u7684\u786c\u5e01 \u52a0\u4e0a (i - \u5f53\u524d\u786c\u5e01\u4ef7\u683c)\u7684\u6700\u5c11\u786c\u5e01\u6570 class Solution { public: int coinChange(vector<int>& coins, int amount) { vector<int> dp(amount + 1, amount + 1); dp[0] = 0; for(int i = 1; i <= amount; i ++) { //\u6c42\u51fa\u6240\u6709\u4ef7\u683c\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf for(int j = 0; j < coins.size(); ++j){ //\u904d\u5386\u6240\u6709\u7684\u77f3\u5934 if(coins[j] <= i) dp[i] = min(dp[i], dp[i - coins[j]] + 1); } } return dp[amount ] > amount ? -1 : dp[amount]; } };","title":"322.\u96f6\u94b1\u5151\u6362 (\u5b8c\u5168\u80cc\u5305\u95ee\u9898)"},{"location":"322.html#_1","text":"\u7ed9\u5b9a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01 coins \u548c\u4e00\u4e2a\u603b\u91d1\u989d amount\u3002\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u7684\u786c\u5e01\u4e2a\u6570\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u786c\u5e01\u7ec4\u5408\u80fd\u7ec4\u6210\u603b\u91d1\u989d\uff0c\u8fd4\u56de -1\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u79cd\u786c\u5e01\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\u3002","title":"\u9898\u76ee:"},{"location":"322.html#_2","text":"\u8f93\u5165\uff1acoins = [1, 2, 5], amount = 11 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a11 = 5 + 5 + 1","title":"\u793a\u4f8b:"},{"location":"322.html#_3","text":"\u8d2a\u5fc3\u7b97\u6cd5 \u8fc7\u4e0d\u4e86 \u80cc\u5305\u95ee\u9898\u5168\u89e3\u6790","title":"\u601d\u8def"},{"location":"322.html#_4","text":"//\u8d2a\u5fc3\u7b97\u6cd5 class Solution { public: int coinChange(vector<int>& coins, int amount) { int res = 0; sort(coins.begin(), coins.end(), greater<int>()); for(int i = 0; amount > 0 && i < coins.size(); ) { if(coins[i] > amount) { ++ i; continue; } amount -= coins[i]; res ++; } return amount == 0 ? res : -1; } };","title":"\u89e3\u7b54:"},{"location":"322.html#_5","text":"// dp[i] \u8868\u793a\u7ec4\u6210\u91d1\u989d i \u6240\u9700\u7684\u6700\u5c11\u7684\u786c\u5e01\u6570\u91cf // dp[i] = dp[ i - coins[j]] + 1 ,\u5f53\u524d\u4ef7\u683c\u7684\u786c\u5e01 \u52a0\u4e0a (i - \u5f53\u524d\u786c\u5e01\u4ef7\u683c)\u7684\u6700\u5c11\u786c\u5e01\u6570 class Solution { public: int coinChange(vector<int>& coins, int amount) { vector<int> dp(amount + 1, amount + 1); dp[0] = 0; for(int i = 1; i <= amount; i ++) { //\u6c42\u51fa\u6240\u6709\u4ef7\u683c\u7684\u6700\u5c11\u786c\u5e01\u6570\u91cf for(int j = 0; j < coins.size(); ++j){ //\u904d\u5386\u6240\u6709\u7684\u77f3\u5934 if(coins[j] <= i) dp[i] = min(dp[i], dp[i - coins[j]] + 1); } } return dp[amount ] > amount ? -1 : dp[amount]; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"347.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d k \u9ad8\u7684\u5143\u7d20\u3002 \u793a\u4f8b: >\u8f93\u5165: nums = [1,1,1,2,2,3], k = 2 >\u8f93\u51fa\uff1a[1,2] \u601d\u8def \u7b80\u5355\uff0c\u7528\u5806\u5b9e\u73b0\u5373\u53ef\uff0c \u6ce8\u610f\u7f16\u7801\u90e8\u5206\u5373\u53ef \u89e3\u7b54: class Solution { typedef pair<int, int> value_type; public: struct cmp { bool operator()(value_type& a, value_type& b){ return a.second < b.second; } }; vector<int> topKFrequent(vector<int>& nums, int k) { unordered_map < int,int> q; /*\u5143\u7d20\u7684\u503c, \u51fa\u73b0\u9891\u7387*/ vector<int> res; //\u904d\u5386 vector\uff0c\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684 for(int i : nums ) { q[i] ++; } priority_queue< value_type, vector<value_type>, cmp> p; for(auto& elem : q) { p.push(make_pair(elem.first, elem.second)); } //\u8fd4\u56de\u6700\u5927\u7684\u51e0\u4e2a\u5143\u7d20 for(int i = 0; i < k; ++i) { value_type m = p.top(); //cout << m.first <<m.second<<endl; p.pop(); res.push_back(m.first); } //\u8fd4\u56de return res; } }; \u603b\u63a5 \u5408\u7406\u4f7f\u7528typedef \u80fd\u591f\u6709\u6548\u7684\u51cf\u5c11\u7f16\u7801\u91cf \u4f7f\u7528 map\u6bd4 unorder_map\u66f4\u6162","title":347},{"location":"347.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d k \u9ad8\u7684\u5143\u7d20\u3002","title":"\u9898\u76ee:"},{"location":"347.html#_2","text":">\u8f93\u5165: nums = [1,1,1,2,2,3], k = 2 >\u8f93\u51fa\uff1a[1,2]","title":"\u793a\u4f8b:"},{"location":"347.html#_3","text":"\u7b80\u5355\uff0c\u7528\u5806\u5b9e\u73b0\u5373\u53ef\uff0c \u6ce8\u610f\u7f16\u7801\u90e8\u5206\u5373\u53ef","title":"\u601d\u8def"},{"location":"347.html#_4","text":"class Solution { typedef pair<int, int> value_type; public: struct cmp { bool operator()(value_type& a, value_type& b){ return a.second < b.second; } }; vector<int> topKFrequent(vector<int>& nums, int k) { unordered_map < int,int> q; /*\u5143\u7d20\u7684\u503c, \u51fa\u73b0\u9891\u7387*/ vector<int> res; //\u904d\u5386 vector\uff0c\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684 for(int i : nums ) { q[i] ++; } priority_queue< value_type, vector<value_type>, cmp> p; for(auto& elem : q) { p.push(make_pair(elem.first, elem.second)); } //\u8fd4\u56de\u6700\u5927\u7684\u51e0\u4e2a\u5143\u7d20 for(int i = 0; i < k; ++i) { value_type m = p.top(); //cout << m.first <<m.second<<endl; p.pop(); res.push_back(m.first); } //\u8fd4\u56de return res; } };","title":"\u89e3\u7b54:"},{"location":"347.html#_5","text":"\u5408\u7406\u4f7f\u7528typedef \u80fd\u591f\u6709\u6548\u7684\u51cf\u5c11\u7f16\u7801\u91cf \u4f7f\u7528 map\u6bd4 unorder_map\u66f4\u6162","title":"\u603b\u63a5"},{"location":"373.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5347\u5e8f\u6392\u5217\u7684\u6574\u5f62\u6570\u7ec4 nums1 \u548c nums2, \u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 k\u3002 \u5b9a\u4e49\u4e00\u5bf9\u503c (u,v)\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u81ea nums1\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6765\u81ea nums2\u3002 \u627e\u5230\u548c\u6700\u5c0f\u7684 k \u5bf9\u6570\u5b57 (u1,v1), (u2,v2) ... (uk,vk)\u3002 \u793a\u4f8b: >\u8f93\u5165: nums1 = [1,1,2], nums2 = [1,2,3], k = 2 >\u8f93\u51fa: [1,1],[1,1] >\u89e3\u91ca: \u8fd4\u56de\u5e8f\u5217\u4e2d\u7684\u524d 2 \u5bf9\u6570\uff1a [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3] >\u8f93\u5165: nums1 = [1,2], nums2 = [3], k = 3 >\u8f93\u51fa: [1,3],[2,3] >\u89e3\u91ca: \u4e5f\u53ef\u80fd\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u6570\u5bf9\u90fd\u88ab\u8fd4\u56de:[1,3],[2,3] \u601d\u8def \u7528\u5806 \u89e3\u7b54: class Solution { typedef pair<int, int> value_type; struct cmp{ bool operator()(value_type a, value_type b) { return a.first + a.second > b.first + b.second; } }; public: vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) { vector<vector<int>> res; priority_queue<value_type, vector<value_type>, cmp > pq; for( const int a : nums1) { for(const int b : nums2) { pq.push({a, b}); } } k = min<int>( nums1.size() * nums2.size(), k); while( k --) { value_type tmp = pq.top(); res.push_back({tmp.first, tmp.second}); pq.pop(); } return res; } }; \u603b\u7ed3 \u5229\u7528\u6709\u5e8f\u8fd9\u4e2a\u7279\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e","title":373},{"location":"373.html#_1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5347\u5e8f\u6392\u5217\u7684\u6574\u5f62\u6570\u7ec4 nums1 \u548c nums2, \u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 k\u3002 \u5b9a\u4e49\u4e00\u5bf9\u503c (u,v)\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u81ea nums1\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6765\u81ea nums2\u3002 \u627e\u5230\u548c\u6700\u5c0f\u7684 k \u5bf9\u6570\u5b57 (u1,v1), (u2,v2) ... (uk,vk)\u3002","title":"\u9898\u76ee:"},{"location":"373.html#_2","text":">\u8f93\u5165: nums1 = [1,1,2], nums2 = [1,2,3], k = 2 >\u8f93\u51fa: [1,1],[1,1] >\u89e3\u91ca: \u8fd4\u56de\u5e8f\u5217\u4e2d\u7684\u524d 2 \u5bf9\u6570\uff1a [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3] >\u8f93\u5165: nums1 = [1,2], nums2 = [3], k = 3 >\u8f93\u51fa: [1,3],[2,3] >\u89e3\u91ca: \u4e5f\u53ef\u80fd\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u6570\u5bf9\u90fd\u88ab\u8fd4\u56de:[1,3],[2,3]","title":"\u793a\u4f8b:"},{"location":"373.html#_3","text":"\u7528\u5806","title":"\u601d\u8def"},{"location":"373.html#_4","text":"class Solution { typedef pair<int, int> value_type; struct cmp{ bool operator()(value_type a, value_type b) { return a.first + a.second > b.first + b.second; } }; public: vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) { vector<vector<int>> res; priority_queue<value_type, vector<value_type>, cmp > pq; for( const int a : nums1) { for(const int b : nums2) { pq.push({a, b}); } } k = min<int>( nums1.size() * nums2.size(), k); while( k --) { value_type tmp = pq.top(); res.push_back({tmp.first, tmp.second}); pq.pop(); } return res; } };","title":"\u89e3\u7b54:"},{"location":"373.html#_5","text":"\u5229\u7528\u6709\u5e8f\u8fd9\u4e2a\u7279\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e","title":"\u603b\u7ed3"},{"location":"377.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u7531 \u4e0d\u540c \u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4 nums \uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u6574\u6570 target \u3002\u8bf7\u4f60\u4ece nums \u4e2d\u627e\u51fa\u5e76\u8fd4\u56de\u603b\u548c\u4e3a target \u7684\u5143\u7d20\u7ec4\u5408\u7684\u4e2a\u6570\u3002 \u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u7b26\u5408 32 \u4f4d\u6574\u6570\u8303\u56f4\u3002 \u793a\u4f8b: \u8f93\u5165\uff1anums = [1,2,3], target = 4 \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a \u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u4e3a\uff1a (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) \u8bf7\u6ce8\u610f\uff0c\u987a\u5e8f\u4e0d\u540c\u7684\u5e8f\u5217\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u7ec4\u5408\u3002 \u601d\u8def \u56de\u6eaf\u7b97\u6cd5 \u8d85\u65f6 \u52a8\u6001\u89c4\u5212 \u7ec4\u5408\u80cc\u5305\u95ee\u9898(\u8981\u6c42\u6709\u5e8f) \u89e3\u7b54: class Solution { public: void helper(vector<int>& nums, int target, vector<vector<int>>& combiantions, vector<int>& combiantion) { if(target < 0) return; if(target == 0) { combiantions.push_back(combiantion); return; } for(int i = 0; i < nums.size(); ++i) { combiantion.push_back(nums[i]); helper(nums, target - nums[i], combiantions,combiantion); combiantion.pop_back(); } } int combinationSum4(vector<int>& nums, int target) { vector<vector<int>> combiantions; vector<int> combiantion; helper(nums, target, combiantions, combiantion); for(auto a : combiantions) { for(auto h: a) { std::cout << h <<\" \"; } std::cout << std::endl; } return combiantions.size(); } }; \u6807\u51c6\u7b54\u6848 /* dp[i] \u8868\u793a\u7ec4\u6210 i \u7684\u5143\u7d20\u7ec4\u5408\u4e2a\u6570,\u56e0\u4e3a\u4e3a\u6709\u5e8f\u7ec4\u5408 \u8f6c\u79fb\u65b9\u7a0b\u4e3a dp[i] += dp[i - nums[j]] ; */ class Solution { public: int combinationSum4(vector<int>& nums, int target) { vector<int> dp(target + 1); dp[0] = 1;//\u5b9a\u4e49 dp[0] = 1 \u8868\u793a\u53ea\u6709\u5f53\u4e0d\u9009\u53d6\u4efb\u4f55\u5143\u7d20\u65f6\uff0c\u5143\u7d20\u4e4b\u548c\u624d\u4e3a 0\uff0c\u56e0\u6b64\u53ea\u6709 1 \u79cd\u65b9\u6848 for(int i = 1; i <= target; ++i) { for(int j = 0; j < nums.size(); ++j) { if( i >= nums[j] && dp[i - nums[j]] < INT_MAX - dp[i]) dp[i] += dp[i - nums[j]]; } } return dp[target]; } }; \u603b\u7ed3","title":"377. \u7ec4\u5408\u603b\u548c \u2163(\u7ec4\u5408\u80cc\u5305\u95ee\u9898)"},{"location":"377.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u7531 \u4e0d\u540c \u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4 nums \uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u6574\u6570 target \u3002\u8bf7\u4f60\u4ece nums \u4e2d\u627e\u51fa\u5e76\u8fd4\u56de\u603b\u548c\u4e3a target \u7684\u5143\u7d20\u7ec4\u5408\u7684\u4e2a\u6570\u3002 \u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u7b26\u5408 32 \u4f4d\u6574\u6570\u8303\u56f4\u3002","title":"\u9898\u76ee:"},{"location":"377.html#_2","text":"\u8f93\u5165\uff1anums = [1,2,3], target = 4 \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a \u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u4e3a\uff1a (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) \u8bf7\u6ce8\u610f\uff0c\u987a\u5e8f\u4e0d\u540c\u7684\u5e8f\u5217\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u7ec4\u5408\u3002","title":"\u793a\u4f8b:"},{"location":"377.html#_3","text":"\u56de\u6eaf\u7b97\u6cd5 \u8d85\u65f6 \u52a8\u6001\u89c4\u5212 \u7ec4\u5408\u80cc\u5305\u95ee\u9898(\u8981\u6c42\u6709\u5e8f)","title":"\u601d\u8def"},{"location":"377.html#_4","text":"class Solution { public: void helper(vector<int>& nums, int target, vector<vector<int>>& combiantions, vector<int>& combiantion) { if(target < 0) return; if(target == 0) { combiantions.push_back(combiantion); return; } for(int i = 0; i < nums.size(); ++i) { combiantion.push_back(nums[i]); helper(nums, target - nums[i], combiantions,combiantion); combiantion.pop_back(); } } int combinationSum4(vector<int>& nums, int target) { vector<vector<int>> combiantions; vector<int> combiantion; helper(nums, target, combiantions, combiantion); for(auto a : combiantions) { for(auto h: a) { std::cout << h <<\" \"; } std::cout << std::endl; } return combiantions.size(); } };","title":"\u89e3\u7b54:"},{"location":"377.html#_5","text":"/* dp[i] \u8868\u793a\u7ec4\u6210 i \u7684\u5143\u7d20\u7ec4\u5408\u4e2a\u6570,\u56e0\u4e3a\u4e3a\u6709\u5e8f\u7ec4\u5408 \u8f6c\u79fb\u65b9\u7a0b\u4e3a dp[i] += dp[i - nums[j]] ; */ class Solution { public: int combinationSum4(vector<int>& nums, int target) { vector<int> dp(target + 1); dp[0] = 1;//\u5b9a\u4e49 dp[0] = 1 \u8868\u793a\u53ea\u6709\u5f53\u4e0d\u9009\u53d6\u4efb\u4f55\u5143\u7d20\u65f6\uff0c\u5143\u7d20\u4e4b\u548c\u624d\u4e3a 0\uff0c\u56e0\u6b64\u53ea\u6709 1 \u79cd\u65b9\u6848 for(int i = 1; i <= target; ++i) { for(int j = 0; j < nums.size(); ++j) { if( i >= nums[j] && dp[i - nums[j]] < INT_MAX - dp[i]) dp[i] += dp[i - nums[j]]; } } return dp[target]; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"377.html#_6","text":"","title":"\u603b\u7ed3"},{"location":"378.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a n x n \u77e9\u9635 matrix \uff0c\u5176\u4e2d\u6bcf\u884c\u548c\u6bcf\u5217\u5143\u7d20\u5747\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u627e\u5230\u77e9\u9635\u4e2d\u7b2c k \u5c0f\u7684\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u5b83\u662f \u6392\u5e8f\u540e \u7684\u7b2c k \u5c0f\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a \u4e0d\u540c \u7684\u5143\u7d20\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1amatrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8 >\u8f93\u51fa\uff1a13 >\u89e3\u91ca\uff1a\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u4e3a [1,5,9,10,11,12,13,13,15]\uff0c\u7b2c 8 \u5c0f\u5143\u7d20\u662f 13 \u601d\u8def \u7c7b\u4f3c \u9762\u8bd5\u9898 10.09. \u6392\u5e8f\u77e9\u9635\u67e5\u627e 1. [\u4e8c\u5206\u67e5\u627e(\u5728\u77e9\u9635\u7c7b)] (https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/solution/you-xu-ju-zhen-zhong-di-kxiao-de-yuan-su-by-leetco/) \u6574\u4e2a\u77e9\u9635\u4e3a\"\u9012\u589e\u7684\",\u6240\u4ee5\u6211\u4eec\u77e5\u9053\u6700\u5927\u503c(r)\u548c\u6700\u5c0f\u503c(l) \u4e0d\u96be\u53d1\u73b0: \u5bf9\u4e8e\u4e00\u4e2a\u6570 mid \u6ee1\u8db3 l<=mid<=r,\u90a3\u4e48\u77e9\u9635\u4e2d\u4e0d\u5927\u4e8e mid \u7684\u6570\u4e00\u5b9a\u5728 \u5de6\u4e0a\u65b9 2. \u501f\u52a9\u961f\u5217 \u89e3\u7b54: //\u501f\u52a9\u961f\u5217\u5b9e\u73b0 class Solution { public: int kthSmallest(vector<vector<int>>& matrix, int k) { priority_queue<int> pq; int res = -1; //\u4ece\u540e\u5411\u524d\u67e5\u627e if(matrix.size() * matrix.size() /2 < k) { } // else \u4ece\u524d\u5411\u540e\u67e5\u627e for(size_t i = 0; i <matrix.size(); ++i) { for(size_t j = 0; j<matrix.size(); ++j) { pq.push(matrix[ i ] [ j ]); } } for(size_t i = 0; i < matrix.size()* matrix.size() - k; ++i) { pq.pop(); } res = pq.top(); return res; } }; \u6807\u51c6\u7b54\u6848 class Solution { public: bool check(vector<vector<int>>& matrix, int mid, int k, int n) { int i = n - 1; int j = 0; int num = 0; while (i >= 0 && j < n) { if (matrix[i][j] <= mid) { num += i + 1; j++; } else { i--; } } return num >= k; } int kthSmallest(vector<vector<int>>& matrix, int k) { int n = matrix.size(); int left = matrix[0][0]; int right = matrix[n - 1][n - 1]; while (left < right) { int mid = left + ((right - left) >> 1); if (check(matrix, mid, k, n)) { right = mid; } else { left = mid + 1; } } return left; } };","title":"378(\u7ecf\u5178)"},{"location":"378.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a n x n \u77e9\u9635 matrix \uff0c\u5176\u4e2d\u6bcf\u884c\u548c\u6bcf\u5217\u5143\u7d20\u5747\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u627e\u5230\u77e9\u9635\u4e2d\u7b2c k \u5c0f\u7684\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u5b83\u662f \u6392\u5e8f\u540e \u7684\u7b2c k \u5c0f\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a \u4e0d\u540c \u7684\u5143\u7d20\u3002","title":"\u9898\u76ee:"},{"location":"378.html#_2","text":">\u8f93\u5165\uff1amatrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8 >\u8f93\u51fa\uff1a13 >\u89e3\u91ca\uff1a\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u4e3a [1,5,9,10,11,12,13,13,15]\uff0c\u7b2c 8 \u5c0f\u5143\u7d20\u662f 13","title":"\u793a\u4f8b:"},{"location":"378.html#_3","text":"\u7c7b\u4f3c \u9762\u8bd5\u9898 10.09. \u6392\u5e8f\u77e9\u9635\u67e5\u627e 1. [\u4e8c\u5206\u67e5\u627e(\u5728\u77e9\u9635\u7c7b)] (https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/solution/you-xu-ju-zhen-zhong-di-kxiao-de-yuan-su-by-leetco/) \u6574\u4e2a\u77e9\u9635\u4e3a\"\u9012\u589e\u7684\",\u6240\u4ee5\u6211\u4eec\u77e5\u9053\u6700\u5927\u503c(r)\u548c\u6700\u5c0f\u503c(l) \u4e0d\u96be\u53d1\u73b0: \u5bf9\u4e8e\u4e00\u4e2a\u6570 mid \u6ee1\u8db3 l<=mid<=r,\u90a3\u4e48\u77e9\u9635\u4e2d\u4e0d\u5927\u4e8e mid \u7684\u6570\u4e00\u5b9a\u5728 \u5de6\u4e0a\u65b9 2. \u501f\u52a9\u961f\u5217","title":"\u601d\u8def"},{"location":"378.html#_4","text":"//\u501f\u52a9\u961f\u5217\u5b9e\u73b0 class Solution { public: int kthSmallest(vector<vector<int>>& matrix, int k) { priority_queue<int> pq; int res = -1; //\u4ece\u540e\u5411\u524d\u67e5\u627e if(matrix.size() * matrix.size() /2 < k) { } // else \u4ece\u524d\u5411\u540e\u67e5\u627e for(size_t i = 0; i <matrix.size(); ++i) { for(size_t j = 0; j<matrix.size(); ++j) { pq.push(matrix[ i ] [ j ]); } } for(size_t i = 0; i < matrix.size()* matrix.size() - k; ++i) { pq.pop(); } res = pq.top(); return res; } };","title":"\u89e3\u7b54:"},{"location":"378.html#_5","text":"class Solution { public: bool check(vector<vector<int>>& matrix, int mid, int k, int n) { int i = n - 1; int j = 0; int num = 0; while (i >= 0 && j < n) { if (matrix[i][j] <= mid) { num += i + 1; j++; } else { i--; } } return num >= k; } int kthSmallest(vector<vector<int>>& matrix, int k) { int n = matrix.size(); int left = matrix[0][0]; int right = matrix[n - 1][n - 1]; while (left < right) { int mid = left + ((right - left) >> 1); if (check(matrix, mid, k, n)) { right = mid; } else { left = mid + 1; } } return left; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"39.html","text":"\u9898\u76ee: \u793a\u4f8b: \u601d\u8def https://leetcode-cn.com/problems/combination-sum/solution/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/ \u89e3\u7b54: class Solution { public: //\u627e\u5230\u6240\u6709\u7684\u7ec4\u5408 void helper(vector<vector<int>>& res, const vector<int>& candidates, vector<int> combination, int index ,const int target) { if( target < 0) return; if( target == 0){ res.push_back(combination); return; } if( index >= candidates.size()) { //\u56de\u6eaf // \u56de\u6eaf } else { for( int i = 0; i <candidates.size(); ++i) { combination.push_back(candidates[i]); helper(res, candidates, combination, index + i, target - candidates[i]); combination.pop_back(); } } return; } vector<vector<int>> combinationSum(vector<int>& candidates, int target) { vector<vector<int>> res; vector<int> combination; helper(res, candidates, combination, 0, target); return res; } }; // \u8f93\u5165[2,3,6,7] // \u8f93\u51fa[[2,2,3],[2,3,2],[3,2,2],[7]] // \u672a\u80fd\u53bb\u9664\u91cd\u590d\u7ec4\u5408 \u6807\u51c6\u7b54\u6848 class Solution { public: //\u627e\u5230\u6240\u6709\u7684\u7ec4\u5408 void helper(vector<vector<int>>& res, const vector<int>& candidates, vector<int> combination, int index ,const int target) { if( target < 0) return; if( target == 0){ res.push_back(combination); return; } // if( i>= candidates.size()) return; // \u4e0d\u5728\u5411\u524d\u641c\u7d22 for( int i = index; i <candidates.size(); ++i) { combination.push_back(candidates[i]); helper(res, candidates, combination, i , target - candidates[i]); combination.pop_back(); } return; } vector<vector<int>> combinationSum(vector<int>& candidates, int target) { vector<vector<int>> res; vector<int> combination; helper(res, candidates, combination, 0, target); return res; } }; \u603b\u7ed3 - \u4e0e 22 \u9898\u76f8\u4f3c,\u4f46\u53c8\u6709\u5176\u7279\u6b8a\u5904,\u7279\u6b8a\u7684\u5730\u65b9\u5728\u4e8e\"\u5982\u4f55\u53bb\u9664\u91cd\u590d\u7684\u7ec4\u5408\". - \u89e3\u7b54\u4ea7\u751f\u91cd\u590d\u7684\u539f\u56e0\u662f\uff1a\u5728\u6bcf\u4e00\u4e2a\u7ed3\u70b9\uff0c\u505a\u51cf\u6cd5\uff0c\u5c55\u5f00\u5206\u652f\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u9898\u76ee\u4e2d\u8bf4 \u6bcf\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u6211\u4eec\u8003\u8651\u4e86 \u6240\u6709\u7684 \u5019\u9009\u6570\uff0c\u56e0\u6b64\u51fa\u73b0\u4e86\u91cd\u590d\u7684\u5217\u8868 - \u53ef\u4e0d\u53ef\u4ee5\u5728\u641c\u7d22\u7684\u65f6\u5019\u5c31\u53bb\u91cd\u5462\uff1f\u7b54\u6848\u662f\u53ef\u4ee5\u7684\u3002\u9047\u5230\u8fd9\u4e00\u7c7b\u76f8\u540c\u5143\u7d20\u4e0d\u8ba1\u7b97\u987a\u5e8f\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5728\u641c\u7d22\u7684\u65f6\u5019\u5c31\u9700\u8981 \u6309\u67d0\u79cd\u987a\u5e8f\u641c\u7d22\u3002\u5177\u4f53\u7684\u505a\u6cd5\u662f\uff1a\u6bcf\u4e00\u6b21\u641c\u7d22\u7684\u65f6\u5019\u8bbe\u7f6e \u4e0b\u4e00\u8f6e\u641c\u7d22\u7684\u8d77\u70b9 begin\uff0c\u8bf7\u770b\u4e0b\u56fe\u3002 - \u89e3\u7b54\u90e8\u5206\u5bf9\u5e94\u7684\u6811,\u5e94\u8be5\u662f\u526a\u679d\u8fc7\u540e\u7684\u4e00\u4e2a\u6ee1\u4e8c\u53c9\u6811(candidates.size()) - \u800c\u6807\u51c6\u89e3\u6cd5\u901a\u8fc7\u641c\u7d22 target \u548c target - nums[i] ,\u9650\u5236\u4e86\"\u641c\u7d22\u987a\u5e8f\" \u6811\u7684\u5206\u652f\u6700\u5927\u4e3a 2 .\u9047\u5230\u8fd9\u4e00\u7c7b\u76f8\u540c\u5143\u7d20\u4e0d\u8ba1\u7b97\u987a\u5e8f\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5728\u641c\u7d22\u7684\u65f6\u5019\u5c31\u9700\u8981 \u6309\u67d0\u79cd\u987a\u5e8f\u641c\u7d22)","title":39},{"location":"39.html#_1","text":"","title":"\u9898\u76ee:"},{"location":"39.html#_2","text":"","title":"\u793a\u4f8b:"},{"location":"39.html#_3","text":"https://leetcode-cn.com/problems/combination-sum/solution/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/","title":"\u601d\u8def"},{"location":"39.html#_4","text":"class Solution { public: //\u627e\u5230\u6240\u6709\u7684\u7ec4\u5408 void helper(vector<vector<int>>& res, const vector<int>& candidates, vector<int> combination, int index ,const int target) { if( target < 0) return; if( target == 0){ res.push_back(combination); return; } if( index >= candidates.size()) { //\u56de\u6eaf // \u56de\u6eaf } else { for( int i = 0; i <candidates.size(); ++i) { combination.push_back(candidates[i]); helper(res, candidates, combination, index + i, target - candidates[i]); combination.pop_back(); } } return; } vector<vector<int>> combinationSum(vector<int>& candidates, int target) { vector<vector<int>> res; vector<int> combination; helper(res, candidates, combination, 0, target); return res; } }; // \u8f93\u5165[2,3,6,7] // \u8f93\u51fa[[2,2,3],[2,3,2],[3,2,2],[7]] // \u672a\u80fd\u53bb\u9664\u91cd\u590d\u7ec4\u5408","title":"\u89e3\u7b54:"},{"location":"39.html#_5","text":"class Solution { public: //\u627e\u5230\u6240\u6709\u7684\u7ec4\u5408 void helper(vector<vector<int>>& res, const vector<int>& candidates, vector<int> combination, int index ,const int target) { if( target < 0) return; if( target == 0){ res.push_back(combination); return; } // if( i>= candidates.size()) return; // \u4e0d\u5728\u5411\u524d\u641c\u7d22 for( int i = index; i <candidates.size(); ++i) { combination.push_back(candidates[i]); helper(res, candidates, combination, i , target - candidates[i]); combination.pop_back(); } return; } vector<vector<int>> combinationSum(vector<int>& candidates, int target) { vector<vector<int>> res; vector<int> combination; helper(res, candidates, combination, 0, target); return res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"39.html#_6","text":"- \u4e0e 22 \u9898\u76f8\u4f3c,\u4f46\u53c8\u6709\u5176\u7279\u6b8a\u5904,\u7279\u6b8a\u7684\u5730\u65b9\u5728\u4e8e\"\u5982\u4f55\u53bb\u9664\u91cd\u590d\u7684\u7ec4\u5408\". - \u89e3\u7b54\u4ea7\u751f\u91cd\u590d\u7684\u539f\u56e0\u662f\uff1a\u5728\u6bcf\u4e00\u4e2a\u7ed3\u70b9\uff0c\u505a\u51cf\u6cd5\uff0c\u5c55\u5f00\u5206\u652f\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u9898\u76ee\u4e2d\u8bf4 \u6bcf\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u6211\u4eec\u8003\u8651\u4e86 \u6240\u6709\u7684 \u5019\u9009\u6570\uff0c\u56e0\u6b64\u51fa\u73b0\u4e86\u91cd\u590d\u7684\u5217\u8868 - \u53ef\u4e0d\u53ef\u4ee5\u5728\u641c\u7d22\u7684\u65f6\u5019\u5c31\u53bb\u91cd\u5462\uff1f\u7b54\u6848\u662f\u53ef\u4ee5\u7684\u3002\u9047\u5230\u8fd9\u4e00\u7c7b\u76f8\u540c\u5143\u7d20\u4e0d\u8ba1\u7b97\u987a\u5e8f\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5728\u641c\u7d22\u7684\u65f6\u5019\u5c31\u9700\u8981 \u6309\u67d0\u79cd\u987a\u5e8f\u641c\u7d22\u3002\u5177\u4f53\u7684\u505a\u6cd5\u662f\uff1a\u6bcf\u4e00\u6b21\u641c\u7d22\u7684\u65f6\u5019\u8bbe\u7f6e \u4e0b\u4e00\u8f6e\u641c\u7d22\u7684\u8d77\u70b9 begin\uff0c\u8bf7\u770b\u4e0b\u56fe\u3002 - \u89e3\u7b54\u90e8\u5206\u5bf9\u5e94\u7684\u6811,\u5e94\u8be5\u662f\u526a\u679d\u8fc7\u540e\u7684\u4e00\u4e2a\u6ee1\u4e8c\u53c9\u6811(candidates.size()) - \u800c\u6807\u51c6\u89e3\u6cd5\u901a\u8fc7\u641c\u7d22 target \u548c target - nums[i] ,\u9650\u5236\u4e86\"\u641c\u7d22\u987a\u5e8f\" \u6811\u7684\u5206\u652f\u6700\u5927\u4e3a 2 .\u9047\u5230\u8fd9\u4e00\u7c7b\u76f8\u540c\u5143\u7d20\u4e0d\u8ba1\u7b97\u987a\u5e8f\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5728\u641c\u7d22\u7684\u65f6\u5019\u5c31\u9700\u8981 \u6309\u67d0\u79cd\u987a\u5e8f\u641c\u7d22)","title":"\u603b\u7ed3"},{"location":"402.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570 num\uff0c\u79fb\u9664\u8fd9\u4e2a\u6570\u4e2d\u7684 k \u4f4d\u6570\u5b57\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u6570\u5b57\u6700\u5c0f\u3002 \u793a\u4f8b: >\u8f93\u5165: num = \"10200\", k = 1 >\u8f93\u51fa: \"200\" >\u89e3\u91ca: \u79fb\u6389\u9996\u4f4d\u7684 1 \u5269\u4e0b\u7684\u6570\u5b57\u4e3a 200. \u6ce8\u610f\u8f93\u51fa\u4e0d\u80fd\u6709\u4efb\u4f55\u524d\u5bfc\u96f6 \u601d\u8def \u5355\u8c03\u6808\uff0c\u4fdd\u6301\u6700\u5c0f\u503c \u89e3\u7b54: class Solution { public: string removeKdigits(string num, int k) { stack<char> st; // \u6700\u5c0f\u6808 st.push(num[0]); // \u538b\u5165\u7b2c\u4e00\u4e2a\u5143\u7d20 for(int i = 1; k > 0 || i < num.size(); ++i) { while (k > 0 && !st.empty() && num[i]< st.top()) { st.pop(); k --; } if(i < num.size()) st.push(num[i]); } string res; while(!st.empty()){ res.push_back(st.top()); st.pop(); } for(int j = res.size() - 1; j >= 0 && res[j] == '0'; --j) { res.pop_back(); } reverse(res.begin(), res.end()); return res == \"\"? \"0\":res; } };","title":"\u9898\u76ee:"},{"location":"402.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570 num\uff0c\u79fb\u9664\u8fd9\u4e2a\u6570\u4e2d\u7684 k \u4f4d\u6570\u5b57\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u6570\u5b57\u6700\u5c0f\u3002","title":"\u9898\u76ee:"},{"location":"402.html#_2","text":">\u8f93\u5165: num = \"10200\", k = 1 >\u8f93\u51fa: \"200\" >\u89e3\u91ca: \u79fb\u6389\u9996\u4f4d\u7684 1 \u5269\u4e0b\u7684\u6570\u5b57\u4e3a 200. \u6ce8\u610f\u8f93\u51fa\u4e0d\u80fd\u6709\u4efb\u4f55\u524d\u5bfc\u96f6","title":"\u793a\u4f8b:"},{"location":"402.html#_3","text":"\u5355\u8c03\u6808\uff0c\u4fdd\u6301\u6700\u5c0f\u503c","title":"\u601d\u8def"},{"location":"402.html#_4","text":"class Solution { public: string removeKdigits(string num, int k) { stack<char> st; // \u6700\u5c0f\u6808 st.push(num[0]); // \u538b\u5165\u7b2c\u4e00\u4e2a\u5143\u7d20 for(int i = 1; k > 0 || i < num.size(); ++i) { while (k > 0 && !st.empty() && num[i]< st.top()) { st.pop(); k --; } if(i < num.size()) st.push(num[i]); } string res; while(!st.empty()){ res.push_back(st.top()); st.pop(); } for(int j = res.size() - 1; j >= 0 && res[j] == '0'; --j) { res.pop_back(); } reverse(res.begin(), res.end()); return res == \"\"? \"0\":res; } };","title":"\u89e3\u7b54:"},{"location":"404.html","text":"\u9898\u76ee: \u8ba1\u7b97\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6240\u6709\u5de6\u53f6\u5b50\u4e4b\u548c\u3002 \u793a\u4f8b: 3 / \\ 9 20 / \\ 15 7 \u5728\u8fd9\u4e2a\u4e8c\u53c9\u6811\u4e2d\uff0c\u6709\u4e24\u4e2a\u5de6\u53f6\u5b50\uff0c\u5206\u522b\u662f 9 \u548c 15\uff0c\u6240\u4ee5\u8fd4\u56de 24 \u89e3\u7b54: //\u6df1\u5ea6\u4f18\u5148 class Solution { public: bool isLeafNode(TreeNode* node) { return !node->left && !node->right; } int dfs(TreeNode* node) { int ans = 0; if (node->left) { ans += isLeafNode(node->left) ? node->left->val : dfs(node->left); } if (node->right && !isLeafNode(node->right)) { ans += dfs(node->right); } return ans; } int sumOfLeftLeaves(TreeNode* root) { return root ? dfs(root) : 0; } }; //\u5e7f\u5ea6\u4f18\u5148 class Solution { public: bool isLeafNode(TreeNode* node) { return !node->left && !node->right; } int sumOfLeftLeaves(TreeNode* root) { if (!root) { return 0; } queue<TreeNode*> q; q.push(root); int ans = 0; while (!q.empty()) { TreeNode* node = q.front(); q.pop(); if (node->left) { if (isLeafNode(node->left)) { ans += node->left->val; } else { q.push(node->left); } } if (node->right) { if (!isLeafNode(node->right)) { q.push(node->right); } } } return ans; } };","title":404},{"location":"404.html#_1","text":"\u8ba1\u7b97\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6240\u6709\u5de6\u53f6\u5b50\u4e4b\u548c\u3002","title":"\u9898\u76ee:"},{"location":"404.html#_2","text":"3 / \\ 9 20 / \\ 15 7 \u5728\u8fd9\u4e2a\u4e8c\u53c9\u6811\u4e2d\uff0c\u6709\u4e24\u4e2a\u5de6\u53f6\u5b50\uff0c\u5206\u522b\u662f 9 \u548c 15\uff0c\u6240\u4ee5\u8fd4\u56de 24","title":"\u793a\u4f8b:"},{"location":"404.html#_3","text":"//\u6df1\u5ea6\u4f18\u5148 class Solution { public: bool isLeafNode(TreeNode* node) { return !node->left && !node->right; } int dfs(TreeNode* node) { int ans = 0; if (node->left) { ans += isLeafNode(node->left) ? node->left->val : dfs(node->left); } if (node->right && !isLeafNode(node->right)) { ans += dfs(node->right); } return ans; } int sumOfLeftLeaves(TreeNode* root) { return root ? dfs(root) : 0; } }; //\u5e7f\u5ea6\u4f18\u5148 class Solution { public: bool isLeafNode(TreeNode* node) { return !node->left && !node->right; } int sumOfLeftLeaves(TreeNode* root) { if (!root) { return 0; } queue<TreeNode*> q; q.push(root); int ans = 0; while (!q.empty()) { TreeNode* node = q.front(); q.pop(); if (node->left) { if (isLeafNode(node->left)) { ans += node->left->val; } else { q.push(node->left); } } if (node->right) { if (!isLeafNode(node->right)) { q.push(node->right); } } } return ans; } };","title":"\u89e3\u7b54:"},{"location":"424.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u4ec5\u7531\u5927\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u5c06\u4efb\u610f\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u66ff\u6362\u6210\u53e6\u5916\u7684\u5b57\u7b26\uff0c\u603b\u5171\u53ef\u6700\u591a\u66ff\u6362 k \u6b21\u3002\u5728\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0c\u627e\u5230\u5305\u542b\u91cd\u590d\u5b57\u6bcd\u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1as = \"AABABBA\", k = 1 >\u8f93\u51fa\uff1a4 >\u89e3\u91ca\uff1a \u5c06\u4e2d\u95f4\u7684\u4e00\u4e2a'A'\u66ff\u6362\u4e3a'B',\u5b57\u7b26\u4e32\u53d8\u4e3a \"AABBBBA\"\u3002 \u5b50\u4e32 \"BBBB\" \u6709\u6700\u957f\u91cd\u590d\u5b57\u6bcd, \u7b54\u6848\u4e3a 4 \u601d\u8def \u6ed1\u52a8\u533a\u95f4 \u89e3\u7b54: //\u8d85\u65f6 class Solution { public: int characterReplacement(string s, int k) { int res = 0; int n = s.size(); vector<int> f(26, 0); if( n == 0) return 0; if( n == 1) return 1; f[s[0] - 'A'] ++; f[s[1] - 'A'] ++; for(int left = 0, right = 1; right < n; ) { int max_count = -1; //\u51fa\u73b0\u6700\u5927\u6b21\u6570\u7684\u5b57\u7b26\u4e32 // \u627e\u5230\u5f53\u524d\u533a\u95f4\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26 for(int i = left; i <= right; ++i) { max_count = max(f[s[i] - 'A'], max_count); } int len = right - left + 1; //\u5f53\u524d\u533a\u95f4\u7684\u957f\u5ea6 if(max_count + k >= len) { res = max(res, len); right ++; if(right < n) f[ s[right] - 'A'] ++; } else{ f[ s[left] - 'A'] --; left ++; } std:;cout <<max_count<< \" \"<<left <<\" \"<< right<<std::endl; } return res; } }; \u6807\u51c6\u7b54\u6848 class Solution { public: int characterReplacement(string s, int k) { vector<int> num(26); int n = s.length(); int maxn = 0; for (int left = 0, right = 0; right < n; ++right) { num[s[right] - 'A']++; maxn = max(maxn, num[s[right] - 'A']); int len = right - left + 1; if (len > k + maxn) { // \u6b64\u65f6\u8be5\u533a\u95f4\u4e0d\u53ef\u80fd\u6ee1\u8db3\u6761\u4ef6 num[s[left] - 'A']--; left++; } } return right - left; } }; \u603b\u7ed3 - \u6ca1\u80fd\u7406\u6e05,\u533a\u95f4\u8fb9\u754c\u79fb\u52a8\u7684\u6761\u4ef6","title":424},{"location":"424.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u4ec5\u7531\u5927\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u5c06\u4efb\u610f\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u66ff\u6362\u6210\u53e6\u5916\u7684\u5b57\u7b26\uff0c\u603b\u5171\u53ef\u6700\u591a\u66ff\u6362 k \u6b21\u3002\u5728\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0c\u627e\u5230\u5305\u542b\u91cd\u590d\u5b57\u6bcd\u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\u3002","title":"\u9898\u76ee:"},{"location":"424.html#_2","text":">\u8f93\u5165\uff1as = \"AABABBA\", k = 1 >\u8f93\u51fa\uff1a4 >\u89e3\u91ca\uff1a \u5c06\u4e2d\u95f4\u7684\u4e00\u4e2a'A'\u66ff\u6362\u4e3a'B',\u5b57\u7b26\u4e32\u53d8\u4e3a \"AABBBBA\"\u3002 \u5b50\u4e32 \"BBBB\" \u6709\u6700\u957f\u91cd\u590d\u5b57\u6bcd, \u7b54\u6848\u4e3a 4","title":"\u793a\u4f8b:"},{"location":"424.html#_3","text":"\u6ed1\u52a8\u533a\u95f4","title":"\u601d\u8def"},{"location":"424.html#_4","text":"//\u8d85\u65f6 class Solution { public: int characterReplacement(string s, int k) { int res = 0; int n = s.size(); vector<int> f(26, 0); if( n == 0) return 0; if( n == 1) return 1; f[s[0] - 'A'] ++; f[s[1] - 'A'] ++; for(int left = 0, right = 1; right < n; ) { int max_count = -1; //\u51fa\u73b0\u6700\u5927\u6b21\u6570\u7684\u5b57\u7b26\u4e32 // \u627e\u5230\u5f53\u524d\u533a\u95f4\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26 for(int i = left; i <= right; ++i) { max_count = max(f[s[i] - 'A'], max_count); } int len = right - left + 1; //\u5f53\u524d\u533a\u95f4\u7684\u957f\u5ea6 if(max_count + k >= len) { res = max(res, len); right ++; if(right < n) f[ s[right] - 'A'] ++; } else{ f[ s[left] - 'A'] --; left ++; } std:;cout <<max_count<< \" \"<<left <<\" \"<< right<<std::endl; } return res; } };","title":"\u89e3\u7b54:"},{"location":"424.html#_5","text":"class Solution { public: int characterReplacement(string s, int k) { vector<int> num(26); int n = s.length(); int maxn = 0; for (int left = 0, right = 0; right < n; ++right) { num[s[right] - 'A']++; maxn = max(maxn, num[s[right] - 'A']); int len = right - left + 1; if (len > k + maxn) { // \u6b64\u65f6\u8be5\u533a\u95f4\u4e0d\u53ef\u80fd\u6ee1\u8db3\u6761\u4ef6 num[s[left] - 'A']--; left++; } } return right - left; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"424.html#_6","text":"- \u6ca1\u80fd\u7406\u6e05,\u533a\u95f4\u8fb9\u754c\u79fb\u52a8\u7684\u6761\u4ef6","title":"\u603b\u7ed3"},{"location":"435.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u627e\u5230\u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0\u3002 \u6ce8\u610f: \u53ef\u4ee5\u8ba4\u4e3a\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u70b9\u3002 \u533a\u95f4 [1,2] \u548c [2,3] \u7684\u8fb9\u754c\u76f8\u4e92\u201c\u63a5\u89e6\u201d\uff0c\u4f46\u6ca1\u6709\u76f8\u4e92\u91cd\u53e0\u3002 \u793a\u4f8b: \u8f93\u5165: [ [1,2], [2,3], [3,4], [1,3] ] \u8f93\u51fa: 1 \u89e3\u91ca: \u79fb\u9664 [1,3] \u540e\uff0c\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002 \u601d\u8def \u8d2a\u5fc3\u7b97\u6cd5 \u6807\u51c6\u7b54\u6848 class Solution { public: int eraseOverlapIntervals(vector<vector<int>>& intervals) { sort(intervals.begin(), intervals.end(),[](vector<int>& a,vector<int>& b){ return a[0] < b[0]; }); int len = intervals.size(); int R = intervals[0][1]; int res = 0; for(int i = 1; i < len ; ++i) { if( R <= intervals[i][0]) { R = intervals[i][1]; } else { res ++; R = min (R, intervals[i][1]); } } return res; } }; class Solution { public: int eraseOverlapIntervals(vector<vector<int>>& intervals) { sort(intervals.begin(), intervals.end(),[](vector<int>& a,vector<int>& b){ return a[1] < b[1]; //\u5bf9\u53f3\u533a\u95f4\u6392\u5e8f }); int len = intervals.size(); int R = intervals[0][1]; int res = 1; for(int i = 1; i < len; ++i) { if(intervals[i][0] >= R) { res ++; R = intervals[i][1]; } } return len - res; } }; \u603b\u7ed3 \u4e4b\u524d\u9047\u89c1\u8fc7\u7c7b\u4f3c\u7684\u9898\uff0c\u96be\u70b9\u5728\u4e8e\u5206\u8fa8\u51fa\u5982\u4f55\u5bf9\u4e8e\u533a\u95f4\u6392\u5e8f\uff0c\u4ee5\u53ca\u5982\u4f55\u9009\u62e9\u533a\u95f4","title":"435\u65e0\u91cd\u590d\u533a\u95f4(\u7ecf\u5178)"},{"location":"435.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u627e\u5230\u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0\u3002 \u6ce8\u610f: \u53ef\u4ee5\u8ba4\u4e3a\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u70b9\u3002 \u533a\u95f4 [1,2] \u548c [2,3] \u7684\u8fb9\u754c\u76f8\u4e92\u201c\u63a5\u89e6\u201d\uff0c\u4f46\u6ca1\u6709\u76f8\u4e92\u91cd\u53e0\u3002","title":"\u9898\u76ee:"},{"location":"435.html#_2","text":"\u8f93\u5165: [ [1,2], [2,3], [3,4], [1,3] ] \u8f93\u51fa: 1 \u89e3\u91ca: \u79fb\u9664 [1,3] \u540e\uff0c\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002","title":"\u793a\u4f8b:"},{"location":"435.html#_3","text":"\u8d2a\u5fc3\u7b97\u6cd5","title":"\u601d\u8def"},{"location":"435.html#_4","text":"class Solution { public: int eraseOverlapIntervals(vector<vector<int>>& intervals) { sort(intervals.begin(), intervals.end(),[](vector<int>& a,vector<int>& b){ return a[0] < b[0]; }); int len = intervals.size(); int R = intervals[0][1]; int res = 0; for(int i = 1; i < len ; ++i) { if( R <= intervals[i][0]) { R = intervals[i][1]; } else { res ++; R = min (R, intervals[i][1]); } } return res; } }; class Solution { public: int eraseOverlapIntervals(vector<vector<int>>& intervals) { sort(intervals.begin(), intervals.end(),[](vector<int>& a,vector<int>& b){ return a[1] < b[1]; //\u5bf9\u53f3\u533a\u95f4\u6392\u5e8f }); int len = intervals.size(); int R = intervals[0][1]; int res = 1; for(int i = 1; i < len; ++i) { if(intervals[i][0] >= R) { res ++; R = intervals[i][1]; } } return len - res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"435.html#_5","text":"\u4e4b\u524d\u9047\u89c1\u8fc7\u7c7b\u4f3c\u7684\u9898\uff0c\u96be\u70b9\u5728\u4e8e\u5206\u8fa8\u51fa\u5982\u4f55\u5bf9\u4e8e\u533a\u95f4\u6392\u5e8f\uff0c\u4ee5\u53ca\u5982\u4f55\u9009\u62e9\u533a\u95f4","title":"\u603b\u7ed3"},{"location":"448.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u5728 1 \u2264 a[i] \u2264 n ( n = \u6570\u7ec4\u5927\u5c0f )\u7684\u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e00\u4e9b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u53e6\u4e00\u4e9b\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u627e\u5230\u6240\u6709\u5728 [1, n] \u8303\u56f4\u4e4b\u95f4\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u3002 \u60a8\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002 \u793a\u4f8b: > \u8f93\u5165: [4,3,2,7,8,2,3,1] > \u8f93\u51fa: [5,6] \u601d\u8def: 1. hash\u7b97\u6cd5 \u9700\u8981\u501f\u52a9\u989d\u5916\u7684\u50a8\u5b58\u7a7a\u95f4 2. \u6392\u5e8f\u6700\u4f4e\u662fO(n*lgn) 3. \"\u6570\u7ec4\u4e2d\u7684\u5143\u7d20**\u4e00\u4e9b**\u51fa\u73b0\u4e86\u4e24\u6b21\" \u7d2f\u52a0\u7684\u65b9\u5f0f\u4e0d\u53ef\u53d6 \u6ce8\u610f\u5230\u5b57\u6bcdn\uff0c\u5b57\u6bcdn\u4e0d\u4ec5\u662f\u6570\u7ec4\u5143\u7d20\u7684\u6700\u5927\u503c,\u4e5f\u662f\u6570\u7ec4\u7684\u5927\u5c0f(\u975e\u5e38\u9002\u7528hash\u7b97\u6cd5,\u4f46\u53c8\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u50a8\u5b58\u7a7a\u95f4) \u2192 \u60f3\u5230\"\u539f\u5730\u4fee\u6539\". \u518d\u8005:\u6ce8\u610f\u6570\u7ec4\u5143\u7d20\u7684\u53d6\u503c\u8303\u56f4\u6700\u5c0f\u4e3a1\uff1f\u4e0d\u80fd\u4e3a\u8d1f\u6570\u53ef\u4ee5\u7406\u89e3(hash \u6620\u5c04\u65f6\u5e76\u4e0d\u597d\u64cd\u4f5c)\u4f46\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u662f0\uff1f. \u8fd9\u7c7b\u95ee\u9898\u7684\u5173\u952e\u662f\u6807\u8bb0\u51fa\u8bfb\u53d6\u8fc7\u7684\u5143\u7d20\uff01\uff01\u4e0b\u9762\u4e24\u79cd\u65b9\u6cd5\u91c7\u7528\u4e86\u4e24\u79cd\u6807\u8bb0\u65b9\u6cd5\u5747\u4e3a\u95f4\u63a5\u6807\u8bb0\u3002 \u5b98\u65b9\u89e3\u6cd51: \u904d\u5386\u8f93\u5165\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u4e00\u6b21\u3002 1. \u6211\u4eec\u5c06\u628a |nums[i]|-1 \u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20\u6807\u8bb0\u4e3a\u8d1f\u6570\u3002\u5373nums[ |nums[i]| \u2212 1 ] \u00d7 \u22121. 2. \u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u82e5\u5f53\u524d\u6570\u7ec4\u5143\u7d20 nums[i] \u4e3a\u8d1f\u6570\uff0c\u8bf4\u660e\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u5b58\u5728\u6570\u5b57 i+1. \u89e3\u6cd52\uff1a 1. \u5c06\u6570\u7ec4\u5143\u7d20\u5bf9\u5e94\u4e3a\u7d22\u5f15\u7684\u4f4d\u7f6e\u52a0n 2. \u904d\u5386\u52a0n\u540e\u7684\u6570\u7ec4\uff0c\u82e5\u6570\u7ec4\u5143\u7d20\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8bf4\u660e\u6570\u7ec4\u4e0b\u6807\u503c\u4e0d\u5b58\u5728\uff0c\u5373\u6d88\u5931\u7684\u6570\u5b57. i=0:4 3 2 7 8 2 3 1 i=1: 15 i=2: 10 i=3: 11 i=4: 11 i=5: 9 i=6: 19 i=7: 18 i=8:12 \u89e3\u7b54: int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize){ for(int i=0; i<numsSize ; i++ ){ int j = nums[i]>0?nums[i]:-nums[i]; if( nums[j-1]>0 ){ nums[ j-1] = -1 * nums[j-1]; }//else{ continue;} } int j =0; for(int i=0; i< numsSize; i++ ){ if( nums[i]>0 ){ nums[j] = i+1 ; j++; } } *returnSize= j; return nums; }","title":448},{"location":"448.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u5728 1 \u2264 a[i] \u2264 n ( n = \u6570\u7ec4\u5927\u5c0f )\u7684\u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e00\u4e9b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u53e6\u4e00\u4e9b\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u627e\u5230\u6240\u6709\u5728 [1, n] \u8303\u56f4\u4e4b\u95f4\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u3002 \u60a8\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002","title":"\u9898\u76ee:"},{"location":"448.html#_2","text":"> \u8f93\u5165: [4,3,2,7,8,2,3,1] > \u8f93\u51fa: [5,6]","title":"\u793a\u4f8b:"},{"location":"448.html#_3","text":"1. hash\u7b97\u6cd5 \u9700\u8981\u501f\u52a9\u989d\u5916\u7684\u50a8\u5b58\u7a7a\u95f4 2. \u6392\u5e8f\u6700\u4f4e\u662fO(n*lgn) 3. \"\u6570\u7ec4\u4e2d\u7684\u5143\u7d20**\u4e00\u4e9b**\u51fa\u73b0\u4e86\u4e24\u6b21\" \u7d2f\u52a0\u7684\u65b9\u5f0f\u4e0d\u53ef\u53d6 \u6ce8\u610f\u5230\u5b57\u6bcdn\uff0c\u5b57\u6bcdn\u4e0d\u4ec5\u662f\u6570\u7ec4\u5143\u7d20\u7684\u6700\u5927\u503c,\u4e5f\u662f\u6570\u7ec4\u7684\u5927\u5c0f(\u975e\u5e38\u9002\u7528hash\u7b97\u6cd5,\u4f46\u53c8\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u50a8\u5b58\u7a7a\u95f4) \u2192 \u60f3\u5230\"\u539f\u5730\u4fee\u6539\". \u518d\u8005:\u6ce8\u610f\u6570\u7ec4\u5143\u7d20\u7684\u53d6\u503c\u8303\u56f4\u6700\u5c0f\u4e3a1\uff1f\u4e0d\u80fd\u4e3a\u8d1f\u6570\u53ef\u4ee5\u7406\u89e3(hash \u6620\u5c04\u65f6\u5e76\u4e0d\u597d\u64cd\u4f5c)\u4f46\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u662f0\uff1f. \u8fd9\u7c7b\u95ee\u9898\u7684\u5173\u952e\u662f\u6807\u8bb0\u51fa\u8bfb\u53d6\u8fc7\u7684\u5143\u7d20\uff01\uff01\u4e0b\u9762\u4e24\u79cd\u65b9\u6cd5\u91c7\u7528\u4e86\u4e24\u79cd\u6807\u8bb0\u65b9\u6cd5\u5747\u4e3a\u95f4\u63a5\u6807\u8bb0\u3002 \u5b98\u65b9\u89e3\u6cd51: \u904d\u5386\u8f93\u5165\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u4e00\u6b21\u3002 1. \u6211\u4eec\u5c06\u628a |nums[i]|-1 \u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20\u6807\u8bb0\u4e3a\u8d1f\u6570\u3002\u5373nums[ |nums[i]| \u2212 1 ] \u00d7 \u22121. 2. \u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u82e5\u5f53\u524d\u6570\u7ec4\u5143\u7d20 nums[i] \u4e3a\u8d1f\u6570\uff0c\u8bf4\u660e\u6211\u4eec\u5728\u6570\u7ec4\u4e2d\u5b58\u5728\u6570\u5b57 i+1. \u89e3\u6cd52\uff1a 1. \u5c06\u6570\u7ec4\u5143\u7d20\u5bf9\u5e94\u4e3a\u7d22\u5f15\u7684\u4f4d\u7f6e\u52a0n 2. \u904d\u5386\u52a0n\u540e\u7684\u6570\u7ec4\uff0c\u82e5\u6570\u7ec4\u5143\u7d20\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8bf4\u660e\u6570\u7ec4\u4e0b\u6807\u503c\u4e0d\u5b58\u5728\uff0c\u5373\u6d88\u5931\u7684\u6570\u5b57. i=0:4 3 2 7 8 2 3 1 i=1: 15 i=2: 10 i=3: 11 i=4: 11 i=5: 9 i=6: 19 i=7: 18 i=8:12","title":"\u601d\u8def:"},{"location":"448.html#_4","text":"int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize){ for(int i=0; i<numsSize ; i++ ){ int j = nums[i]>0?nums[i]:-nums[i]; if( nums[j-1]>0 ){ nums[ j-1] = -1 * nums[j-1]; }//else{ continue;} } int j =0; for(int i=0; i< numsSize; i++ ){ if( nums[i]>0 ){ nums[j] = i+1 ; j++; } } *returnSize= j; return nums; }","title":"\u89e3\u7b54:"},{"location":"452.html","text":"\u9898\u76ee: \u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u6709\u8bb8\u591a\u7403\u5f62\u7684\u6c14\u7403\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6c14\u7403\uff0c\u63d0\u4f9b\u7684\u8f93\u5165\u662f\u6c34\u5e73\u65b9\u5411\u4e0a\uff0c\u6c14\u7403\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u3002\u7531\u4e8e\u5b83\u662f\u6c34\u5e73\u7684\uff0c\u6240\u4ee5\u7eb5\u5750\u6807\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u6b64\u53ea\u8981\u77e5\u9053\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u6a2a\u5750\u6807\u5c31\u8db3\u591f\u4e86\u3002\u5f00\u59cb\u5750\u6807\u603b\u662f\u5c0f\u4e8e\u7ed3\u675f\u5750\u6807\u3002 \u4e00\u652f\u5f13\u7bad\u53ef\u4ee5\u6cbf\u7740 x \u8f74\u4ece\u4e0d\u540c\u70b9\u5b8c\u5168\u5782\u76f4\u5730\u5c04\u51fa\u3002\u5728\u5750\u6807 x \u5904\u5c04\u51fa\u4e00\u652f\u7bad\uff0c\u82e5\u6709\u4e00\u4e2a\u6c14\u7403\u7684\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u4e3a xstart\uff0cxend\uff0c \u4e14\u6ee1\u8db3 xstart \u2264 x \u2264 xend\uff0c\u5219\u8be5\u6c14\u7403\u4f1a\u88ab\u5f15\u7206\u3002\u53ef\u4ee5\u5c04\u51fa\u7684\u5f13\u7bad\u7684\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 \u5f13\u7bad\u4e00\u65e6\u88ab\u5c04\u51fa\u4e4b\u540e\uff0c\u53ef\u4ee5\u65e0\u9650\u5730\u524d\u8fdb\u3002\u6211\u4eec\u60f3\u627e\u5230\u4f7f\u5f97\u6240\u6709\u6c14\u7403\u5168\u90e8\u88ab\u5f15\u7206\uff0c\u6240\u9700\u7684\u5f13\u7bad\u7684\u6700\u5c0f\u6570\u91cf\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 points \uff0c\u5176\u4e2d points [i] = [xstart,xend] \uff0c\u8fd4\u56de\u5f15\u7206\u6240\u6709\u6c14\u7403\u6240\u5fc5\u987b\u5c04\u51fa\u7684\u6700\u5c0f\u5f13\u7bad\u6570 \u793a\u4f8b: >\u8f93\u5165\uff1apoints = [[1,2],[2,3],[3,4],[4,5]] >\u8f93\u51fa\uff1a2 >\u8f93\u5165\uff1apoints = [[10,16],[2,8],[1,6],[7,12]] >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u5bf9\u4e8e\u8be5\u6837\u4f8b\uff0cx = 6 \u53ef\u4ee5\u5c04\u7206 [2,8],[1,6] \u4e24\u4e2a\u6c14\u7403\uff0c\u4ee5\u53ca x = 11 \u5c04\u7206\u53e6\u5916\u4e24\u4e2a\u6c14\u7403 \u601d\u8def 1. \u7c7b\u4f3c\u4e8e 1705 \u7684\u5408\u5e76\u533a\u95f4\u95ee\u9898,\u4e0d\u8fc7\u8fd9\u91cc\u662f\u5408\u5e76\u8fc7\u540e\u4fdd\u7559\u7684\u662f \u4e24\u4e2a\u533a\u95f4\u7684\u4ea4\u96c6 \u89e3\u7b54: //\u6781\u6162 class Solution { public: int findMinArrowShots(vector<vector<int>>& points) { if(points.size() == 0) return 0; int res = -1; vector<vector<int> > merged; sort(points.begin(), points.end(), [](vector<int> a, vector<int> b){ return a[0] < b[0]; }); merged.push_back({points[0][0], points[0][1]}); for(size_t i = 1; i < points.size(); ++i) { int L = points[i][0]; int R = points[i][1]; if( L <= merged.back()[1] ) { merged.back()[0] = min<int>(merged.back()[0], L); merged.back()[1] = min<int>(merged.back()[1], R); } else { merged.push_back({L, R}); } } res = merged.size(); return res; } }; \u603b\u7ed3 lambda \u5e94\u8be5\u7528\u5f15\u7528\u6027 \u4f20\u503c","title":452},{"location":"452.html#_1","text":"\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u6709\u8bb8\u591a\u7403\u5f62\u7684\u6c14\u7403\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6c14\u7403\uff0c\u63d0\u4f9b\u7684\u8f93\u5165\u662f\u6c34\u5e73\u65b9\u5411\u4e0a\uff0c\u6c14\u7403\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u3002\u7531\u4e8e\u5b83\u662f\u6c34\u5e73\u7684\uff0c\u6240\u4ee5\u7eb5\u5750\u6807\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u6b64\u53ea\u8981\u77e5\u9053\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u6a2a\u5750\u6807\u5c31\u8db3\u591f\u4e86\u3002\u5f00\u59cb\u5750\u6807\u603b\u662f\u5c0f\u4e8e\u7ed3\u675f\u5750\u6807\u3002 \u4e00\u652f\u5f13\u7bad\u53ef\u4ee5\u6cbf\u7740 x \u8f74\u4ece\u4e0d\u540c\u70b9\u5b8c\u5168\u5782\u76f4\u5730\u5c04\u51fa\u3002\u5728\u5750\u6807 x \u5904\u5c04\u51fa\u4e00\u652f\u7bad\uff0c\u82e5\u6709\u4e00\u4e2a\u6c14\u7403\u7684\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u4e3a xstart\uff0cxend\uff0c \u4e14\u6ee1\u8db3 xstart \u2264 x \u2264 xend\uff0c\u5219\u8be5\u6c14\u7403\u4f1a\u88ab\u5f15\u7206\u3002\u53ef\u4ee5\u5c04\u51fa\u7684\u5f13\u7bad\u7684\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 \u5f13\u7bad\u4e00\u65e6\u88ab\u5c04\u51fa\u4e4b\u540e\uff0c\u53ef\u4ee5\u65e0\u9650\u5730\u524d\u8fdb\u3002\u6211\u4eec\u60f3\u627e\u5230\u4f7f\u5f97\u6240\u6709\u6c14\u7403\u5168\u90e8\u88ab\u5f15\u7206\uff0c\u6240\u9700\u7684\u5f13\u7bad\u7684\u6700\u5c0f\u6570\u91cf\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 points \uff0c\u5176\u4e2d points [i] = [xstart,xend] \uff0c\u8fd4\u56de\u5f15\u7206\u6240\u6709\u6c14\u7403\u6240\u5fc5\u987b\u5c04\u51fa\u7684\u6700\u5c0f\u5f13\u7bad\u6570","title":"\u9898\u76ee:"},{"location":"452.html#_2","text":">\u8f93\u5165\uff1apoints = [[1,2],[2,3],[3,4],[4,5]] >\u8f93\u51fa\uff1a2 >\u8f93\u5165\uff1apoints = [[10,16],[2,8],[1,6],[7,12]] >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u5bf9\u4e8e\u8be5\u6837\u4f8b\uff0cx = 6 \u53ef\u4ee5\u5c04\u7206 [2,8],[1,6] \u4e24\u4e2a\u6c14\u7403\uff0c\u4ee5\u53ca x = 11 \u5c04\u7206\u53e6\u5916\u4e24\u4e2a\u6c14\u7403","title":"\u793a\u4f8b:"},{"location":"452.html#_3","text":"1. \u7c7b\u4f3c\u4e8e 1705 \u7684\u5408\u5e76\u533a\u95f4\u95ee\u9898,\u4e0d\u8fc7\u8fd9\u91cc\u662f\u5408\u5e76\u8fc7\u540e\u4fdd\u7559\u7684\u662f \u4e24\u4e2a\u533a\u95f4\u7684\u4ea4\u96c6","title":"\u601d\u8def"},{"location":"452.html#_4","text":"//\u6781\u6162 class Solution { public: int findMinArrowShots(vector<vector<int>>& points) { if(points.size() == 0) return 0; int res = -1; vector<vector<int> > merged; sort(points.begin(), points.end(), [](vector<int> a, vector<int> b){ return a[0] < b[0]; }); merged.push_back({points[0][0], points[0][1]}); for(size_t i = 1; i < points.size(); ++i) { int L = points[i][0]; int R = points[i][1]; if( L <= merged.back()[1] ) { merged.back()[0] = min<int>(merged.back()[0], L); merged.back()[1] = min<int>(merged.back()[1], R); } else { merged.push_back({L, R}); } } res = merged.size(); return res; } };","title":"\u89e3\u7b54:"},{"location":"452.html#_5","text":"lambda \u5e94\u8be5\u7528\u5f15\u7528\u6027 \u4f20\u503c","title":"\u603b\u7ed3"},{"location":"5.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1as = \"babad\" >\u8f93\u51fa\uff1a\"bab\" >\u89e3\u91ca\uff1a\"aba\" \u540c\u6837\u662f\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848\u3002 \u601d\u8def \u52a8\u6001\u89c4\u5212 \u540c 647 \u89e3\u7b54: class Solution { public: pair<int, int> helper(const string& s, int i, int j) { for(int n = s.size(); i >= 0 && j < n && s[i] == s[j]; --i, ++j){ } return {i + 1 , j-1}; } string longestPalindrome(string s) { int left = 0, right = 0; for(int i = 0, n = s.size(); i< n; ++i) { auto le1 = helper(s, i, i); int left1 = le1.first, right1 = le1.second; if(right1 - left1 > right - left){ right = right1; left = left1; } auto le2 = helper(s, i, i+1); int left2 = le2.first, right2 = le2.second; if(right2 - left2 > right - left){ right = right2; left = left2; } } return s.substr(left, right - left + 1); } };","title":5},{"location":"5.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002","title":"\u9898\u76ee:"},{"location":"5.html#_2","text":">\u8f93\u5165\uff1as = \"babad\" >\u8f93\u51fa\uff1a\"bab\" >\u89e3\u91ca\uff1a\"aba\" \u540c\u6837\u662f\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848\u3002","title":"\u793a\u4f8b:"},{"location":"5.html#_3","text":"\u52a8\u6001\u89c4\u5212 \u540c 647","title":"\u601d\u8def"},{"location":"5.html#_4","text":"class Solution { public: pair<int, int> helper(const string& s, int i, int j) { for(int n = s.size(); i >= 0 && j < n && s[i] == s[j]; --i, ++j){ } return {i + 1 , j-1}; } string longestPalindrome(string s) { int left = 0, right = 0; for(int i = 0, n = s.size(); i< n; ++i) { auto le1 = helper(s, i, i); int left1 = le1.first, right1 = le1.second; if(right1 - left1 > right - left){ right = right1; left = left1; } auto le2 = helper(s, i, i+1); int left2 = le2.first, right2 = le2.second; if(right2 - left2 > right - left){ right = right2; left = left2; } } return s.substr(left, right - left + 1); } };","title":"\u89e3\u7b54:"},{"location":"503.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u5faa\u73af\u6570\u7ec4\uff08\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8f93\u51fa\u6bcf\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u3002\u6570\u5b57 x \u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20\u662f\u6309\u6570\u7ec4\u904d\u5386\u987a\u5e8f\uff0c\u8fd9\u4e2a\u6570\u5b57\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u66f4\u5927\u7684\u6570\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u5e94\u8be5\u5faa\u73af\u5730\u641c\u7d22\u5b83\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa -1\u3002 \u793a\u4f8b: >\u8f93\u5165: [1,2,1] >\u8f93\u51fa: [2,-1,2] \u601d\u8def \u8ddf1019 \u601d\u8def\u4e00\u6837\uff0c\u4e0d\u8fc7\u7531\u4e8e\u662f\u5faa\u73af\u6570\u7ec4\uff0c\u5728\u540e\u534a\u6bb5\u627e\u4e0d\u5230\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5728\u524d\u4e00\u6bb5\u8fdb\u884c\u67e5\u627e \u89e3\u7b54: ```c++ class Solution { int max_em(const vector & nums, int index) { int i = 0; for(; i < index; ++i) { if(nums[i] > nums[index]) break; } return i == index? -1 : nums[i]; } public: vector nextGreaterElements(vector & nums) { stack st; vector res(nums.size()); //\u9006\u5e8f\u904d\u5386\u6570\u7ec4 for(int i = nums.size()-1 ; i >= 0; --i) { while (!st.empty() && nums[i] >= st.top()) { st.pop(); } res[i] = st.empty() ? max_em(nums, i):st.top(); st.push(nums[i]); } //\u8fd4\u56de return res; } }; \u603b\u7ed3","title":503},{"location":"503.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5faa\u73af\u6570\u7ec4\uff08\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8f93\u51fa\u6bcf\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u3002\u6570\u5b57 x \u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20\u662f\u6309\u6570\u7ec4\u904d\u5386\u987a\u5e8f\uff0c\u8fd9\u4e2a\u6570\u5b57\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u66f4\u5927\u7684\u6570\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u5e94\u8be5\u5faa\u73af\u5730\u641c\u7d22\u5b83\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa -1\u3002","title":"\u9898\u76ee:"},{"location":"503.html#_2","text":">\u8f93\u5165: [1,2,1] >\u8f93\u51fa: [2,-1,2]","title":"\u793a\u4f8b:"},{"location":"503.html#_3","text":"\u8ddf1019 \u601d\u8def\u4e00\u6837\uff0c\u4e0d\u8fc7\u7531\u4e8e\u662f\u5faa\u73af\u6570\u7ec4\uff0c\u5728\u540e\u534a\u6bb5\u627e\u4e0d\u5230\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5728\u524d\u4e00\u6bb5\u8fdb\u884c\u67e5\u627e","title":"\u601d\u8def"},{"location":"503.html#_4","text":"```c++ class Solution { int max_em(const vector & nums, int index) { int i = 0; for(; i < index; ++i) { if(nums[i] > nums[index]) break; } return i == index? -1 : nums[i]; } public: vector nextGreaterElements(vector & nums) { stack st; vector res(nums.size()); //\u9006\u5e8f\u904d\u5386\u6570\u7ec4 for(int i = nums.size()-1 ; i >= 0; --i) { while (!st.empty() && nums[i] >= st.top()) { st.pop(); } res[i] = st.empty() ? max_em(nums, i):st.top(); st.push(nums[i]); } //\u8fd4\u56de return res; } };","title":"\u89e3\u7b54:"},{"location":"503.html#_5","text":"","title":"\u603b\u7ed3"},{"location":"518.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 coins \u8868\u793a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01\uff0c\u53e6\u7ed9\u4e00\u4e2a\u6574\u6570 amount \u8868\u793a\u603b\u91d1\u989d\u3002 \u8bf7\u4f60\u8ba1\u7b97\u5e76\u8fd4\u56de\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u3002\u5982\u679c\u4efb\u4f55\u786c\u5e01\u7ec4\u5408\u90fd\u65e0\u6cd5\u51d1\u51fa\u603b\u91d1\u989d\uff0c\u8fd4\u56de 0 \u3002 \u5047\u8bbe\u6bcf\u4e00\u79cd\u9762\u989d\u7684\u786c\u5e01\u6709\u65e0\u9650\u4e2a\u3002 \u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7ed3\u679c\u7b26\u5408 32 \u4f4d\u5e26\u7b26\u53f7\u6574\u6570 \u793a\u4f8b: \u8f93\u5165\uff1aamount = 5, coins = [1, 2, 5] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6709\u56db\u79cd\u65b9\u5f0f\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\uff1a 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 \u601d\u8def \u52a8\u6001\u89c4\u5212 \u7ec4\u5408\u80cc\u5305\u95ee\u9898 \u89e3\u7b54: //\u9519\u8bef,\u56e0\u4e3a\u8fd9\u4e2a\u8003\u8651\u4e86\u4e0d\u540c\u987a\u5e8f,\u4f1a\u6709\u91cd\u590d\u8ba1\u7b97 class Solution { public: int change(int amount, vector<int> &coins){ vector<int> dp(amount + 1); dp[0] = 1; for (int i = 1; i <= amount; i++) for (int coin : coins) if (i >= coin) dp[i] += dp[i - coin]; return dp[amount]; } }; \u6807\u51c6\u7b54\u6848 // \u56e0\u4e3a\u5916\u5c42\u5faa\u73af\u662f\u904d\u5386\u6570\u7ec4 coins \u7684\u503c\uff0c\u5185\u5c42\u5faa\u73af\u662f\u904d\u5386\u4e0d\u540c\u7684\u91d1\u989d\u4e4b\u548c\uff0c\u5728\u8ba1\u7b97 dp[i] \u7684\u503c\u65f6\uff0c\u53ef\u4ee5\u786e\u4fdd\u91d1\u989d\u4e4b\u548c\u7b49\u4e8e i \u7684\u786c\u5e01\u9762\u989d\u7684\u987a\u5e8f\uff0c\u7531\u4e8e\u987a\u5e8f\u786e\u5b9a\uff0c\u56e0\u6b64\u4e0d\u4f1a\u91cd\u590d\u8ba1\u7b97\u4e0d\u540c\u7684\u6392\u5217\u3002 class Solution { public: int change(int amount, vector<int> &coins){ vector<int> dp(amount + 1); dp[0] = 1; for (int coin : coins) for (int i = 1; i <= amount; i++) if (i >= coin) dp[i] += dp[i - coin]; return dp[amount]; } }; \u603b\u7ed3 \u5faa\u73af\u6b21\u5e8f\u7684\u4e0d\u540c\u53ef\u80fd\u5bfc\u81f4\u7ed3\u679c\u7684\u4e0d\u540c","title":"518. \u96f6\u94b1\u5151\u6362 II"},{"location":"518.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 coins \u8868\u793a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01\uff0c\u53e6\u7ed9\u4e00\u4e2a\u6574\u6570 amount \u8868\u793a\u603b\u91d1\u989d\u3002 \u8bf7\u4f60\u8ba1\u7b97\u5e76\u8fd4\u56de\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u3002\u5982\u679c\u4efb\u4f55\u786c\u5e01\u7ec4\u5408\u90fd\u65e0\u6cd5\u51d1\u51fa\u603b\u91d1\u989d\uff0c\u8fd4\u56de 0 \u3002 \u5047\u8bbe\u6bcf\u4e00\u79cd\u9762\u989d\u7684\u786c\u5e01\u6709\u65e0\u9650\u4e2a\u3002 \u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7ed3\u679c\u7b26\u5408 32 \u4f4d\u5e26\u7b26\u53f7\u6574\u6570","title":"\u9898\u76ee:"},{"location":"518.html#_2","text":"\u8f93\u5165\uff1aamount = 5, coins = [1, 2, 5] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6709\u56db\u79cd\u65b9\u5f0f\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\uff1a 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1","title":"\u793a\u4f8b:"},{"location":"518.html#_3","text":"\u52a8\u6001\u89c4\u5212 \u7ec4\u5408\u80cc\u5305\u95ee\u9898","title":"\u601d\u8def"},{"location":"518.html#_4","text":"//\u9519\u8bef,\u56e0\u4e3a\u8fd9\u4e2a\u8003\u8651\u4e86\u4e0d\u540c\u987a\u5e8f,\u4f1a\u6709\u91cd\u590d\u8ba1\u7b97 class Solution { public: int change(int amount, vector<int> &coins){ vector<int> dp(amount + 1); dp[0] = 1; for (int i = 1; i <= amount; i++) for (int coin : coins) if (i >= coin) dp[i] += dp[i - coin]; return dp[amount]; } };","title":"\u89e3\u7b54:"},{"location":"518.html#_5","text":"// \u56e0\u4e3a\u5916\u5c42\u5faa\u73af\u662f\u904d\u5386\u6570\u7ec4 coins \u7684\u503c\uff0c\u5185\u5c42\u5faa\u73af\u662f\u904d\u5386\u4e0d\u540c\u7684\u91d1\u989d\u4e4b\u548c\uff0c\u5728\u8ba1\u7b97 dp[i] \u7684\u503c\u65f6\uff0c\u53ef\u4ee5\u786e\u4fdd\u91d1\u989d\u4e4b\u548c\u7b49\u4e8e i \u7684\u786c\u5e01\u9762\u989d\u7684\u987a\u5e8f\uff0c\u7531\u4e8e\u987a\u5e8f\u786e\u5b9a\uff0c\u56e0\u6b64\u4e0d\u4f1a\u91cd\u590d\u8ba1\u7b97\u4e0d\u540c\u7684\u6392\u5217\u3002 class Solution { public: int change(int amount, vector<int> &coins){ vector<int> dp(amount + 1); dp[0] = 1; for (int coin : coins) for (int i = 1; i <= amount; i++) if (i >= coin) dp[i] += dp[i - coin]; return dp[amount]; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"518.html#_6","text":"\u5faa\u73af\u6b21\u5e8f\u7684\u4e0d\u540c\u53ef\u80fd\u5bfc\u81f4\u7ed3\u679c\u7684\u4e0d\u540c","title":"\u603b\u7ed3"},{"location":"523.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b \u975e\u8d1f\u6570 \u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807 \u6574\u6570 k \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u5426\u542b\u6709\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\uff0c\u5176\u5927\u5c0f\u81f3\u5c11\u4e3a 2\uff0c\u4e14\u603b\u548c\u4e3a k \u7684\u500d\u6570\uff0c\u5373\u603b\u548c\u4e3a n * k \uff0c\u5176\u4e2d n \u4e5f\u662f\u4e00\u4e2a\u6574\u6570\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1a[23,2,4,6,7], k = 6 >\u8f93\u51fa\uff1aTrue >\u89e3\u91ca\uff1a[2,4] \u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a 2 \u7684\u5b50\u6570\u7ec4\uff0c\u5e76\u4e14\u548c\u4e3a 6\u3002 \u601d\u8def \u5bf9\u4e8e\u524d\u7f00\u548c\u7684\u4f18\u5316 \u89e3\u7b54: //\u8d85\u65f6 O(n^2) class Solution { public: bool checkSubarraySum(vector<int>& nums, int k) { int n = nums.size(); vector<int> tmp(n+1, 0); tmp[0] = 0; partial_sum(nums.begin(), nums.end(), tmp.begin() + 1); if( n == 1 ) return false; for(int i = 1; i < n + 1; ++i) { for(int j = 1; j < i; ++j){ if(i -j > 1 && (tmp[i] - tmp[j] )% k == 0 ) return true; } } return false; } }; \u6807\u51c6\u7b54\u6848 // O(n) // https://leetcode-cn.com/problems/continuous-subarray-sum/solution/lian-xu-de-zi-shu-zu-he-by-leetcode/ class Solution { public: bool checkSubarraySum(vector<int>& nums, int k) { map<int, int> Map; Map[0] = -1; for(int i = 0, sum = 0; i < nums.size(); ++i) { sum += nums[i]; sum %= k; //\u5982\u679c\u4f59\u6570\u5df2\u7ecf\u88ab\u4fdd\u5b58 if(Map.find(sum) != Map.end()) { if(i - Map[sum] > 1) return true; } else { Map[sum] = i; } } return false; } }; \u603b\u7ed3","title":523},{"location":"523.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b \u975e\u8d1f\u6570 \u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807 \u6574\u6570 k \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u5426\u542b\u6709\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\uff0c\u5176\u5927\u5c0f\u81f3\u5c11\u4e3a 2\uff0c\u4e14\u603b\u548c\u4e3a k \u7684\u500d\u6570\uff0c\u5373\u603b\u548c\u4e3a n * k \uff0c\u5176\u4e2d n \u4e5f\u662f\u4e00\u4e2a\u6574\u6570\u3002","title":"\u9898\u76ee:"},{"location":"523.html#_2","text":">\u8f93\u5165\uff1a[23,2,4,6,7], k = 6 >\u8f93\u51fa\uff1aTrue >\u89e3\u91ca\uff1a[2,4] \u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a 2 \u7684\u5b50\u6570\u7ec4\uff0c\u5e76\u4e14\u548c\u4e3a 6\u3002","title":"\u793a\u4f8b:"},{"location":"523.html#_3","text":"\u5bf9\u4e8e\u524d\u7f00\u548c\u7684\u4f18\u5316","title":"\u601d\u8def"},{"location":"523.html#_4","text":"//\u8d85\u65f6 O(n^2) class Solution { public: bool checkSubarraySum(vector<int>& nums, int k) { int n = nums.size(); vector<int> tmp(n+1, 0); tmp[0] = 0; partial_sum(nums.begin(), nums.end(), tmp.begin() + 1); if( n == 1 ) return false; for(int i = 1; i < n + 1; ++i) { for(int j = 1; j < i; ++j){ if(i -j > 1 && (tmp[i] - tmp[j] )% k == 0 ) return true; } } return false; } };","title":"\u89e3\u7b54:"},{"location":"523.html#_5","text":"// O(n) // https://leetcode-cn.com/problems/continuous-subarray-sum/solution/lian-xu-de-zi-shu-zu-he-by-leetcode/ class Solution { public: bool checkSubarraySum(vector<int>& nums, int k) { map<int, int> Map; Map[0] = -1; for(int i = 0, sum = 0; i < nums.size(); ++i) { sum += nums[i]; sum %= k; //\u5982\u679c\u4f59\u6570\u5df2\u7ecf\u88ab\u4fdd\u5b58 if(Map.find(sum) != Map.end()) { if(i - Map[sum] > 1) return true; } else { Map[sum] = i; } } return false; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"523.html#_6","text":"","title":"\u603b\u7ed3"},{"location":"525.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4 nums , \u627e\u5230\u542b\u6709\u76f8\u540c\u6570\u91cf\u7684 0 \u548c 1 \u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: nums = [0,1] \u8f93\u51fa: 2 \u8bf4\u660e: [0, 1] \u662f\u5177\u6709\u76f8\u540c\u6570\u91cf 0 \u548c 1 \u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\u3002 \u601d\u8def \u524d\u7f00\u548c \u548c hssh\u8868 1. \u7531\u4e8e\u300c0 \u548c 1 \u7684\u6570\u91cf\u76f8\u540c\u300d\u7b49\u4ef7\u4e8e\u300c1 \u7684\u6570\u91cf\u51cf\u53bb 0 \u7684\u6570\u91cf\u7b49\u4e8e 0\u300d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u7ec4\u4e2d\u7684 0 \u89c6\u4f5c \u22121\uff0c\u5219\u539f\u95ee\u9898\u8f6c\u6362\u6210 **\u6c42\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5176\u5143\u7d20\u548c\u4e3a 0** 2. \u4e3a\u4e86\u5feb\u901f\u8ba1\u7b97 \\textit{newNums}newNums \u7684\u5b50\u6570\u7ec4\u7684\u5143\u7d20\u548c\uff0c\u9700\u8981\u9996\u5148\u8ba1\u7b97 newnums \u7684\u201c\u524d\u7f00\u548c\u201d.\u540c\u65f6\u4f7f\u7528\u300c\u54c8\u5e0c\u8868\u300d\u6765\u8bb0\u5f55\u300c\u67d0\u4e2a\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6700\u5c0f\u4e0b\u6807\u300d\u662f\u591a\u5c11\u3002 (\u4f7f\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u524d\u7f00\u548c\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807) 3. \u89c4\u5b9a\u7a7a\u7684\u524d\u7f00\u7684\u7ed3\u675f\u4e0b\u6807\u4e3a -1\uff0c\u7531\u4e8e\u7a7a\u7684\u524d\u7f00\u7684\u5143\u7d20\u548c\u4e3a 0\uff0c\u56e0\u6b64\u5728\u904d\u5386\u4e4b\u524d\uff0c\u9996\u5148\u5728\u54c8\u5e0c\u8868\u4e2d\u5b58\u5165\u952e\u503c\u5bf9 (0,\u22121) \u6807\u51c6\u7b54\u6848 \u603b\u7ed3 1. \u5408\u7406\u7684\u5229\u7528\u201c\u95ee\u9898\u7b49\u4ef7\u201d\u6982\u5ff5\u80fd\u591f\u6781\u5927\u7684\u7b80\u5316\u95ee\u9898\uff0c\u62bd\u51fa\u95ee\u9898\u7684\u6838\u5fc3\u601d\u60f3 2.","title":"525.\u8fde\u7eed\u6570\u7ec4"},{"location":"525.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4 nums , \u627e\u5230\u542b\u6709\u76f8\u540c\u6570\u91cf\u7684 0 \u548c 1 \u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002","title":"\u9898\u76ee:"},{"location":"525.html#_2","text":"\u8f93\u5165: nums = [0,1] \u8f93\u51fa: 2 \u8bf4\u660e: [0, 1] \u662f\u5177\u6709\u76f8\u540c\u6570\u91cf 0 \u548c 1 \u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\u3002","title":"\u793a\u4f8b:"},{"location":"525.html#_3","text":"\u524d\u7f00\u548c \u548c hssh\u8868 1. \u7531\u4e8e\u300c0 \u548c 1 \u7684\u6570\u91cf\u76f8\u540c\u300d\u7b49\u4ef7\u4e8e\u300c1 \u7684\u6570\u91cf\u51cf\u53bb 0 \u7684\u6570\u91cf\u7b49\u4e8e 0\u300d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u7ec4\u4e2d\u7684 0 \u89c6\u4f5c \u22121\uff0c\u5219\u539f\u95ee\u9898\u8f6c\u6362\u6210 **\u6c42\u6700\u957f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5176\u5143\u7d20\u548c\u4e3a 0** 2. \u4e3a\u4e86\u5feb\u901f\u8ba1\u7b97 \\textit{newNums}newNums \u7684\u5b50\u6570\u7ec4\u7684\u5143\u7d20\u548c\uff0c\u9700\u8981\u9996\u5148\u8ba1\u7b97 newnums \u7684\u201c\u524d\u7f00\u548c\u201d.\u540c\u65f6\u4f7f\u7528\u300c\u54c8\u5e0c\u8868\u300d\u6765\u8bb0\u5f55\u300c\u67d0\u4e2a\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6700\u5c0f\u4e0b\u6807\u300d\u662f\u591a\u5c11\u3002 (\u4f7f\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u524d\u7f00\u548c\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807) 3. \u89c4\u5b9a\u7a7a\u7684\u524d\u7f00\u7684\u7ed3\u675f\u4e0b\u6807\u4e3a -1\uff0c\u7531\u4e8e\u7a7a\u7684\u524d\u7f00\u7684\u5143\u7d20\u548c\u4e3a 0\uff0c\u56e0\u6b64\u5728\u904d\u5386\u4e4b\u524d\uff0c\u9996\u5148\u5728\u54c8\u5e0c\u8868\u4e2d\u5b58\u5165\u952e\u503c\u5bf9 (0,\u22121)","title":"\u601d\u8def"},{"location":"525.html#_4","text":"","title":"\u6807\u51c6\u7b54\u6848"},{"location":"525.html#_5","text":"1. \u5408\u7406\u7684\u5229\u7528\u201c\u95ee\u9898\u7b49\u4ef7\u201d\u6982\u5ff5\u80fd\u591f\u6781\u5927\u7684\u7b80\u5316\u95ee\u9898\uff0c\u62bd\u51fa\u95ee\u9898\u7684\u6838\u5fc3\u601d\u60f3 2.","title":"\u603b\u7ed3"},{"location":"542.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u77e9\u9635\uff0c\u627e\u51fa\u6bcf\u4e2a\u5143\u7d20\u5230\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb\u3002 \u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002 \u793a\u4f8b: \u8f93\u5165\uff1a [[0,0,0], [0,1,0], [0,0,0]] \u8f93\u51fa\uff1a [[0,0,0], [0,1,0], [0,0,0]] \u601d\u8def \u5e7f\u5ea6\u4f18\u5148\u904d\u5386 \u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u80fd\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u6c42\u8fd9\u79cd\u6700\u77ed\u8ddd\u79bb\u7684\u65b9\u6cd5\u5f88\u5bb9\u6613\u60f3\u5230\u5c31\u662f BFS\uff0cBFS \u7684\u540d\u79f0\u662f\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5373\u628a\u5468\u56f4\u8fd9\u4e00\u5708\u641c\u7d22\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u641c\u7d22\u4e0b\u4e00\u5708\uff0c\u662f\u6162\u6162\u6269\u5927\u641c\u7d22\u8303\u56f4\u7684\u3002 \u6807\u51c6\u7b54\u6848 class Solution { private: int dist[4][2] ={ {-1, 0 }, {1 , 0 }, {0 , 1 }, {0 , -1} }; public: vector<vector<int>> updateMatrix(vector<vector<int>>& mat) { int m = mat.size(), n = mat[0].size(); vector<vector<int>> res(m, vector<int>(n)); vector<vector<bool>> seen(m, vector<bool>(n,false)); queue<pair<int,int>> q; //\u5e7f\u5ea6\u4f18\u5148\u961f\u5217 for(int i = 0; i < m; ++i) { for(int j = 0; j < n; j ++) { if(mat[i][j] == 0) { //\u4e3a 0\u65f6\u624d\u9700\u8981\u8fdb\u884c\u67e5\u627e q.emplace(i,j); seen[i][j] = true; } } } while(!q.empty()) { pair<int,int> tmp = q.front(); int i = tmp.first; int j = tmp.second; q.pop(); for(int d = 0; d < 4; ++d) { int new_i = i + dist[d][0]; int new_j = j + dist[d][1]; if(new_i >= 0 && new_j >= 0 && new_i < m && new_j < n && !seen[new_i][new_j]) { res[new_i][new_j] = res[i][j] + 1; q.emplace(new_i, new_j); //\u65b0\u5143\u7d20\u8fdb\u961f seen[new_i][new_j] = true; } } } return res; } };","title":"542.0-1\u77e9\u9635"},{"location":"542.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u77e9\u9635\uff0c\u627e\u51fa\u6bcf\u4e2a\u5143\u7d20\u5230\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb\u3002 \u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002","title":"\u9898\u76ee:"},{"location":"542.html#_2","text":"\u8f93\u5165\uff1a [[0,0,0], [0,1,0], [0,0,0]] \u8f93\u51fa\uff1a [[0,0,0], [0,1,0], [0,0,0]]","title":"\u793a\u4f8b:"},{"location":"542.html#_3","text":"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386 \u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u80fd\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u6c42\u8fd9\u79cd\u6700\u77ed\u8ddd\u79bb\u7684\u65b9\u6cd5\u5f88\u5bb9\u6613\u60f3\u5230\u5c31\u662f BFS\uff0cBFS \u7684\u540d\u79f0\u662f\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5373\u628a\u5468\u56f4\u8fd9\u4e00\u5708\u641c\u7d22\u5b8c\u6210\u4e4b\u540e\uff0c\u518d\u641c\u7d22\u4e0b\u4e00\u5708\uff0c\u662f\u6162\u6162\u6269\u5927\u641c\u7d22\u8303\u56f4\u7684\u3002","title":"\u601d\u8def"},{"location":"542.html#_4","text":"class Solution { private: int dist[4][2] ={ {-1, 0 }, {1 , 0 }, {0 , 1 }, {0 , -1} }; public: vector<vector<int>> updateMatrix(vector<vector<int>>& mat) { int m = mat.size(), n = mat[0].size(); vector<vector<int>> res(m, vector<int>(n)); vector<vector<bool>> seen(m, vector<bool>(n,false)); queue<pair<int,int>> q; //\u5e7f\u5ea6\u4f18\u5148\u961f\u5217 for(int i = 0; i < m; ++i) { for(int j = 0; j < n; j ++) { if(mat[i][j] == 0) { //\u4e3a 0\u65f6\u624d\u9700\u8981\u8fdb\u884c\u67e5\u627e q.emplace(i,j); seen[i][j] = true; } } } while(!q.empty()) { pair<int,int> tmp = q.front(); int i = tmp.first; int j = tmp.second; q.pop(); for(int d = 0; d < 4; ++d) { int new_i = i + dist[d][0]; int new_j = j + dist[d][1]; if(new_i >= 0 && new_j >= 0 && new_i < m && new_j < n && !seen[new_i][new_j]) { res[new_i][new_j] = res[i][j] + 1; q.emplace(new_i, new_j); //\u65b0\u5143\u7d20\u8fdb\u961f seen[new_i][new_j] = true; } } } return res; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"55.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4 nums \uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684 \u7b2c\u4e00\u4e2a\u4e0b\u6807 \u3002 \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002 \u5224\u65ad\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4e0b\u6807 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [2,3,1,1,4] >\u8f93\u51fa\uff1atrue >\u89e3\u91ca\uff1a\u53ef\u4ee5\u5148\u8df3 1 \u6b65\uff0c\u4ece\u4e0b\u6807 0 \u5230\u8fbe\u4e0b\u6807 1, \u7136\u540e\u518d\u4ece\u4e0b\u6807 1 \u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u3002 \u601d\u8def \u8d2a\u5fc3\u7b97\u6cd5,\u627e\u6700\u957f\u80fd\u5230\u8fbe\u7684\u8ddd\u79bb \u89e3\u7b54: class Solution { public: bool canJump(vector<int>& nums) { int n = nums.size(); // m\u8868\u793a\u5f53\u524d\u7684\u4f4d\u7f6e for(int m = 0; m < n-1; ) { int max_distance = nums[m]; // + 0 // \u904d\u5386\u80fd\u591f\u8df3\u7684\u533a\u95f4,\u627e\u51fa \"\u6700\u5927\u503c\" for(int j = 0; m + j < n && j < max_distance; ++j) { max_distance = max(max_distance, j + nums[m+j]); } //std::cout << m <<\" \"<<max_distance; m += max_distance; //if(m == n-1) return true; if(max_distance == 0 ) return false; //std::cout << max_distance <<\" \"<<m <<endl; } return true; // \u9ed8\u8ba4\u8fd4\u56detrue } }; \u603b\u7ed3 \u5bf9\u4e8e\u8fb9\u754c\u95ee\u9898,\u4e0d\u80fd\u6761\u7406\u6e05\u6670\u7684\u5904\u7406","title":55},{"location":"55.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4 nums \uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684 \u7b2c\u4e00\u4e2a\u4e0b\u6807 \u3002 \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002 \u5224\u65ad\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4e0b\u6807","title":"\u9898\u76ee:"},{"location":"55.html#_2","text":">\u8f93\u5165\uff1anums = [2,3,1,1,4] >\u8f93\u51fa\uff1atrue >\u89e3\u91ca\uff1a\u53ef\u4ee5\u5148\u8df3 1 \u6b65\uff0c\u4ece\u4e0b\u6807 0 \u5230\u8fbe\u4e0b\u6807 1, \u7136\u540e\u518d\u4ece\u4e0b\u6807 1 \u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u3002","title":"\u793a\u4f8b:"},{"location":"55.html#_3","text":"\u8d2a\u5fc3\u7b97\u6cd5,\u627e\u6700\u957f\u80fd\u5230\u8fbe\u7684\u8ddd\u79bb","title":"\u601d\u8def"},{"location":"55.html#_4","text":"class Solution { public: bool canJump(vector<int>& nums) { int n = nums.size(); // m\u8868\u793a\u5f53\u524d\u7684\u4f4d\u7f6e for(int m = 0; m < n-1; ) { int max_distance = nums[m]; // + 0 // \u904d\u5386\u80fd\u591f\u8df3\u7684\u533a\u95f4,\u627e\u51fa \"\u6700\u5927\u503c\" for(int j = 0; m + j < n && j < max_distance; ++j) { max_distance = max(max_distance, j + nums[m+j]); } //std::cout << m <<\" \"<<max_distance; m += max_distance; //if(m == n-1) return true; if(max_distance == 0 ) return false; //std::cout << max_distance <<\" \"<<m <<endl; } return true; // \u9ed8\u8ba4\u8fd4\u56detrue } };","title":"\u89e3\u7b54:"},{"location":"55.html#_5","text":"\u5bf9\u4e8e\u8fb9\u754c\u95ee\u9898,\u4e0d\u80fd\u6761\u7406\u6e05\u6670\u7684\u5904\u7406","title":"\u603b\u7ed3"},{"location":"56.html","text":"\u9898\u76ee: \u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u8bf7\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1aintervals = [[1,3],[2,6],[8,10],[15,18]] >\u8f93\u51fa\uff1a[[1,6],[8,10],[15,18]] >\u89e3\u91ca: \u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6]. >\u8f93\u5165\uff1aintervals = [[1,4],[4,5]] >\u8f93\u51fa\uff1a[[1,5]] >\u89e3\u91ca: \u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002 \u601d\u8def \u4e00\u5f00\u59cb\u60f3\u5230\u7684\u662f\u6392\u5e8f\uff0c\u5c06\u6240\u6709\u7684\u5143\u7d20\u63d0\u53d6\u51fa\u6765\uff0c\u6392\u5e8f\u5728\u5220\u6389\u201c\u533a\u95f4\u8fde\u63a5\u5143\u7d20\u201d\uff0c\u5f97\u5230\u6700\u540e\u6bcf\u4e2a\u533a\u95f4\u5143\u7d20\u7684\u96c6\u5408 \u4f46\u5bf9\u4e8e\u201c\u533a\u95f4\u8fde\u63a5\u5143\u7d20\u201d\u59cb\u7ec8\u5904\u7406\u4e0d\u597d \u89e3\u7b54: // \u9519\u8bef class Solution { public: vector<vector<int>> merge(vector<vector<int>>& intervals) { vector< vector<int>> ans; vector<int> ve; // \u8bfb\u53d6\u6240\u6709\u7684\u6570\u636e for (vector<int> i : intervals) { for (int num : i) { ve.push_back(num); } } // \u6392\u5e8f sort(ve.begin(), ve.end()); // \u5408\u5e76\u76f8\u90bb\u7684\u533a\u95f4 for (vector<int>::iterator p=ve.begin() + 1; p!=ve.end()-1; ) { if (*p == *(p+1)||*p == *(p+1) -1 ) { ve.erase(p);//erase \u5220\u9664\u540ep\u4f1a\u6307\u5411\u4e0b\u4e00\u5143\u7d20 ve.erase(p); std::cout<<*p<<\"\\n\"; } if(p !=ve.end()) {break;} if(p !=ve.end()-1) {p++;} } for (int a : ve) { std::cout << a << std::endl; } // \u8fd4\u56de\u7ed3\u679c for(int i=0, m = 0; m<ve.size(); i++) { vector<int> temp; for(int j = 0;j<2;j++) { temp.push_back(ve[m ++]); } ans.push_back(temp); temp.clear(); } return ans; } }; \u6807\u51c6\u7b54\u6848 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u5217\u8868\u4e2d\u7684\u533a\u95f4\u6309\u7167\u5de6\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\u3002\u7136\u540e\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u533a\u95f4\u52a0\u5165 merged \u6570\u7ec4\u4e2d\uff0c\u5e76\u6309\u987a\u5e8f\u4f9d\u6b21\u8003\u8651\u4e4b\u540e\u7684\u6bcf\u4e2a\u533a\u95f4\uff1a \u5982\u679c\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5728\u6570\u7ec4 merged \u4e2d\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u4e4b\u540e\uff0c\u90a3\u4e48\u5b83\u4eec\u4e0d\u4f1a\u91cd\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06\u8fd9\u4e2a\u533a\u95f4\u52a0\u5165\u6570\u7ec4 merged \u7684\u672b\u5c3e\uff1b \u5426\u5219\uff0c\u5b83\u4eec\u91cd\u5408\uff0c\u6211\u4eec\u9700\u8981\u7528\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u66f4\u65b0\u6570\u7ec4 merged \u4e2d\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0c\u5c06\u5176\u7f6e\u4e3a\u4e8c\u8005\u7684\u8f83\u5927\u503c\u3002 class Solution { public: vector<vector<int>> merge(vector<vector<int>>& intervals) { if (intervals.size() == 0) { return {}; // InitList\u51fd\u6570 } sort(intervals.begin(), intervals.end()); // \u5e76\u672a\u6307\u5b9a\u6392\u5e8f\u89c4\u5219 vector<vector<int>> merged; for (int i = 0; i < intervals.size(); ++i) { int L = intervals[i][0], R = intervals[i][1]; if (!merged.size() || merged.back()[1] < L) { merged.push_back({L, R}); // InintList\u51fd\u6570 } else { merged.back()[1] = max(merged.back()[1], R); } } return merged; } }; \u603b\u7ed3 \u4e00\u63d0\u5230\u6392\u5e8f\uff0c\u6700\u5148\u60f3\u5230\u7684\u8fd8\u662f\u5bf9\u6240\u6709\u7684\u5143\u7d20\u5747\u8fdb\u884c\u6392\u5e8f\uff0c\u800c\u5ffd\u7565\u4e86\u6309\u7167\u5143\u7d20\u4e2d\u7684\u4e00\u5b9a\u201c\u7279\u5f81\u201d\u8fdb\u884c\u6392\u5e8f sort\u65f6\u5e76\u672a\u6307\u5b9a\u6392\u5e8f\u89c4\u5219 \u6807\u51c6\u7b54\u6848\u5bf9\u4e8e \"{}\"\u7684\u8fd0\u7528\u8f83\u597d","title":56},{"location":"56.html#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u8bf7\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\u3002","title":"\u9898\u76ee:"},{"location":"56.html#_2","text":">\u8f93\u5165\uff1aintervals = [[1,3],[2,6],[8,10],[15,18]] >\u8f93\u51fa\uff1a[[1,6],[8,10],[15,18]] >\u89e3\u91ca: \u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6]. >\u8f93\u5165\uff1aintervals = [[1,4],[4,5]] >\u8f93\u51fa\uff1a[[1,5]] >\u89e3\u91ca: \u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002","title":"\u793a\u4f8b:"},{"location":"56.html#_3","text":"\u4e00\u5f00\u59cb\u60f3\u5230\u7684\u662f\u6392\u5e8f\uff0c\u5c06\u6240\u6709\u7684\u5143\u7d20\u63d0\u53d6\u51fa\u6765\uff0c\u6392\u5e8f\u5728\u5220\u6389\u201c\u533a\u95f4\u8fde\u63a5\u5143\u7d20\u201d\uff0c\u5f97\u5230\u6700\u540e\u6bcf\u4e2a\u533a\u95f4\u5143\u7d20\u7684\u96c6\u5408 \u4f46\u5bf9\u4e8e\u201c\u533a\u95f4\u8fde\u63a5\u5143\u7d20\u201d\u59cb\u7ec8\u5904\u7406\u4e0d\u597d","title":"\u601d\u8def"},{"location":"56.html#_4","text":"// \u9519\u8bef class Solution { public: vector<vector<int>> merge(vector<vector<int>>& intervals) { vector< vector<int>> ans; vector<int> ve; // \u8bfb\u53d6\u6240\u6709\u7684\u6570\u636e for (vector<int> i : intervals) { for (int num : i) { ve.push_back(num); } } // \u6392\u5e8f sort(ve.begin(), ve.end()); // \u5408\u5e76\u76f8\u90bb\u7684\u533a\u95f4 for (vector<int>::iterator p=ve.begin() + 1; p!=ve.end()-1; ) { if (*p == *(p+1)||*p == *(p+1) -1 ) { ve.erase(p);//erase \u5220\u9664\u540ep\u4f1a\u6307\u5411\u4e0b\u4e00\u5143\u7d20 ve.erase(p); std::cout<<*p<<\"\\n\"; } if(p !=ve.end()) {break;} if(p !=ve.end()-1) {p++;} } for (int a : ve) { std::cout << a << std::endl; } // \u8fd4\u56de\u7ed3\u679c for(int i=0, m = 0; m<ve.size(); i++) { vector<int> temp; for(int j = 0;j<2;j++) { temp.push_back(ve[m ++]); } ans.push_back(temp); temp.clear(); } return ans; } };","title":"\u89e3\u7b54:"},{"location":"56.html#_5","text":"\u9996\u5148\uff0c\u6211\u4eec\u5c06\u5217\u8868\u4e2d\u7684\u533a\u95f4\u6309\u7167\u5de6\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\u3002\u7136\u540e\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u533a\u95f4\u52a0\u5165 merged \u6570\u7ec4\u4e2d\uff0c\u5e76\u6309\u987a\u5e8f\u4f9d\u6b21\u8003\u8651\u4e4b\u540e\u7684\u6bcf\u4e2a\u533a\u95f4\uff1a \u5982\u679c\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5728\u6570\u7ec4 merged \u4e2d\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u4e4b\u540e\uff0c\u90a3\u4e48\u5b83\u4eec\u4e0d\u4f1a\u91cd\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06\u8fd9\u4e2a\u533a\u95f4\u52a0\u5165\u6570\u7ec4 merged \u7684\u672b\u5c3e\uff1b \u5426\u5219\uff0c\u5b83\u4eec\u91cd\u5408\uff0c\u6211\u4eec\u9700\u8981\u7528\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u66f4\u65b0\u6570\u7ec4 merged \u4e2d\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0c\u5c06\u5176\u7f6e\u4e3a\u4e8c\u8005\u7684\u8f83\u5927\u503c\u3002 class Solution { public: vector<vector<int>> merge(vector<vector<int>>& intervals) { if (intervals.size() == 0) { return {}; // InitList\u51fd\u6570 } sort(intervals.begin(), intervals.end()); // \u5e76\u672a\u6307\u5b9a\u6392\u5e8f\u89c4\u5219 vector<vector<int>> merged; for (int i = 0; i < intervals.size(); ++i) { int L = intervals[i][0], R = intervals[i][1]; if (!merged.size() || merged.back()[1] < L) { merged.push_back({L, R}); // InintList\u51fd\u6570 } else { merged.back()[1] = max(merged.back()[1], R); } } return merged; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"56.html#_6","text":"\u4e00\u63d0\u5230\u6392\u5e8f\uff0c\u6700\u5148\u60f3\u5230\u7684\u8fd8\u662f\u5bf9\u6240\u6709\u7684\u5143\u7d20\u5747\u8fdb\u884c\u6392\u5e8f\uff0c\u800c\u5ffd\u7565\u4e86\u6309\u7167\u5143\u7d20\u4e2d\u7684\u4e00\u5b9a\u201c\u7279\u5f81\u201d\u8fdb\u884c\u6392\u5e8f sort\u65f6\u5e76\u672a\u6307\u5b9a\u6392\u5e8f\u89c4\u5219 \u6807\u51c6\u7b54\u6848\u5bf9\u4e8e \"{}\"\u7684\u8fd0\u7528\u8f83\u597d","title":"\u603b\u7ed3"},{"location":"560.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u627e\u5230\u8be5\u6570\u7ec4\u4e2d\u548c\u4e3a k \u7684\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u7684\u4e2a\u6570\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [1,1,1], k = 2 >\u8f93\u51fa\uff1a2 , [1,1] \u4e0e [1,1] \u4e3a\u4e24\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u3002 \u63d0\u793a\uff1a \u6570\u7ec4\u7684\u957f\u5ea6\u4e3a [1, 20,000]\u3002 \u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u662f [-1000, 1000] \uff0c\u4e14\u6574\u6570 k \u7684\u8303\u56f4\u662f [-1e7, 1e7]\u3002 \u601d\u8def \u89e3\u7b541: /* * \u9996\u5148\u8054\u60f3\u5230\u7684\u662f\u52a8\u6001\u89c4\u5212\u95ee\u9898,\u5f53\u9047\u89c1\u65b0\u5143\u7d20\u65f6\u4f1a\u51fa\u73b0\u4e09\u79cd\u60c5\u51b5,\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef. */ int subarraySum(int* nums, int numsSize, int k) { int m = 0; //\u533a\u95f4\u5f00\u59cb\u4e0b\u6807 int temp = 0; //\u533a\u95f4\u4e4b\u548c bool flag = true; int count = 0; for(int i=0;i<numsSize;) { if(flag) temp += nums[i]; flag = false; if(temp<k){ i++; flag = true; } else if(temp == k) { temp -= nums[m]; i ++; m ++; count ++; flag = true; } else { temp -= nums[m]; m ++; } } return count; } \u6700\u7ec8\u7248 /* * \u4e0a\u8ff0\u4ee3\u7801\u6ca1\u6709\u6ce8\u610f\u5230\u4e00\u4e2a\u5173\u952e\u70b9:\u6570\u7ec4\u5143\u7d20\u7684\u5185\u5bb9\u53ef\u80fd\u4e3a\u8d1f\u6570.* \u5f53\u51fa\u73b0\u5f62\u5982 ** 1 -100 ** \u60c5\u51b5\u65f6\uff0c\u5bf9\u4e8e-100\u5e76\u4e0d\u80fd\u6709\u6548\u7684* \u9884\u89c1. */ /* * \u89e3\u7b54\u601d\u8def: * pre[i] - pre[j\u22121]==k \u4e3a\u6838\u5fc3\u601d\u60f3. * *\u4e0d\u7528\u6c42\u51fa prefixSum \u6570\u7ec4\uff0c\u5f15\u5165\u54c8\u5e0c\u8868 \u6211\u4eec\u53ea\u5173\u5fc3\u54ea\u4e9b\u524d\u7f00\u548c\u7684\u503c\u76f8\u51cf\u7b49\u4e8ek\uff0c\u6211\u4eec\u4e0d\u5173\u5fc3\u5177\u4f53\u662f\u54ea\u4e00\u9879\u7684\u524d\u7f00\u548c\u76f8\u51cf\u7b49\u4e8ek\uff0c\u5e76\u4e14\u6211\u4eec\u5173\u5fc3\u524d\u7f00\u548c\u7684\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u77e5\u9053\u6709\u51e0\u4e2a\u5b50\u6570\u7ec4\u6c42\u548c\u7b49\u4e8ek\u3002 \u51fa\u73b0\u8fc7\u7684\u524d\u7f00\u548c\uff0c\u548c\u5bf9\u5e94\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5b58\u5165 mapkey\uff1a\u524d\u7f00\u548c\u7684\u503cvalue\uff1a\u8be5\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570 \u904d\u5386 nums \u4e4b\u524d\uff0c\u6211\u4eec\u8ba9 -1 \u60c5\u51b5\u4e0b\u7684\u524d\u7f00\u548c\u4e3a 0\uff0c\u8fd9\u6837\u901a\u5f0f\u5728\u8fb9\u754c\u60c5\u51b5\u4e5f\u80fd\u9002\u7528\u3002\u5373 map \u521d\u59cb\u653e\u5165 0:1 \u952e\u503c\u5bf9\uff0c\u5373\u5df2\u7ecf\u51fa\u73b0 1 \u6b21\u524d\u7f00\u548c\u4e3a 0. \u904d\u5386 nums \u6570\u7ec4\uff0c\u6c42\u51fa\u5f53\u524d\u9879\u7684\u524d\u7f00\u548c\uff0c\u5b58\u5165 map\uff1a \u4e4b\u524d\u6ca1\u6709\u5b58\u8fc7\uff0c\u5219\u5b58\u5165\uff0c\u503c\u4e3a 1\u3002\u4e4b\u524d\u5b58\u8fc7\uff0c\u5219\u503c +1\u3002 \u8fb9\u5b58\u8fb9\u67e5\u770b map\uff0c\u5982\u679c map \u4e2d\u5b58\u5728 key \u4e3a\uff1a\u5f53\u524d\u524d\u7f00\u548c - k \u8bf4\u660e\u8fd9\u4e2a\u4e4b\u524d\u51fa\u73b0\u7684\u524d\u7f00\u548c\uff0c\u6ee1\u8db3\u300c\u5f53\u524d\u524d\u7f00\u548c - \u8be5\u524d\u7f00\u548c == k\u300d\u3002\u8be5\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7d2f\u52a0\u7ed9 count\u3002 * */ /* * \u67e5\u770b\u89e3\u6790\u540e\uff0c\u601d\u8def\u5982\u4e0b: * 1. \u52a8\u6001\u89c4\u5212(\u5229\u7528\u2018\u524d\u7f00\u548c\u2019)\u7684\u601d\u8def\u6ca1\u6709\u95ee\u9898\uff0c\u5e94\u5f53\u50a8\u5b58\u626b\u63cf\u8fc7\u5143\u7d20\u7684\u4fe1\u606f\uff0c\u4f46\u5bf9\u4e8e\u8be5\u50a8\u5b58\u7684\u4fe1\u606f\u8ba4\u8bc6\u8fd8\u4e0d\u591f. * 2. \u4e2a\u4eba\u5bf9\u4e8ehash\u7684\u5229\u7528\u8fd8\u4e0d\u591f\u591a\uff0c\u53ea\u4f1a\u5199\u5f62\u5982\uff1a * hash[nums[i]] ++ \u4e00\u7c7b\u7684\u4ee3\u7801. */ class Solution { public: int subarraySum(vector<int>& nums, int k) { unordered_map<int, int> mp; mp[0] = 1; int count = 0, pre = 0; for (auto& x:nums) { pre += x; if (mp.find(pre - k) != mp.end()) { count += mp[pre - k]; } mp[pre]++; } return count; } }; \u53c2\u8003 \u53c2\u80031","title":560},{"location":"560.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u627e\u5230\u8be5\u6570\u7ec4\u4e2d\u548c\u4e3a k \u7684\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u7684\u4e2a\u6570\u3002","title":"\u9898\u76ee:"},{"location":"560.html#_2","text":">\u8f93\u5165\uff1anums = [1,1,1], k = 2 >\u8f93\u51fa\uff1a2 , [1,1] \u4e0e [1,1] \u4e3a\u4e24\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u3002","title":"\u793a\u4f8b:"},{"location":"560.html#_3","text":"\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a [1, 20,000]\u3002 \u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u662f [-1000, 1000] \uff0c\u4e14\u6574\u6570 k \u7684\u8303\u56f4\u662f [-1e7, 1e7]\u3002","title":"\u63d0\u793a\uff1a"},{"location":"560.html#_4","text":"","title":"\u601d\u8def"},{"location":"560.html#1","text":"/* * \u9996\u5148\u8054\u60f3\u5230\u7684\u662f\u52a8\u6001\u89c4\u5212\u95ee\u9898,\u5f53\u9047\u89c1\u65b0\u5143\u7d20\u65f6\u4f1a\u51fa\u73b0\u4e09\u79cd\u60c5\u51b5,\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef. */ int subarraySum(int* nums, int numsSize, int k) { int m = 0; //\u533a\u95f4\u5f00\u59cb\u4e0b\u6807 int temp = 0; //\u533a\u95f4\u4e4b\u548c bool flag = true; int count = 0; for(int i=0;i<numsSize;) { if(flag) temp += nums[i]; flag = false; if(temp<k){ i++; flag = true; } else if(temp == k) { temp -= nums[m]; i ++; m ++; count ++; flag = true; } else { temp -= nums[m]; m ++; } } return count; }","title":"\u89e3\u7b541:"},{"location":"560.html#_5","text":"/* * \u4e0a\u8ff0\u4ee3\u7801\u6ca1\u6709\u6ce8\u610f\u5230\u4e00\u4e2a\u5173\u952e\u70b9:\u6570\u7ec4\u5143\u7d20\u7684\u5185\u5bb9\u53ef\u80fd\u4e3a\u8d1f\u6570.* \u5f53\u51fa\u73b0\u5f62\u5982 ** 1 -100 ** \u60c5\u51b5\u65f6\uff0c\u5bf9\u4e8e-100\u5e76\u4e0d\u80fd\u6709\u6548\u7684* \u9884\u89c1. */ /* * \u89e3\u7b54\u601d\u8def: * pre[i] - pre[j\u22121]==k \u4e3a\u6838\u5fc3\u601d\u60f3. * *\u4e0d\u7528\u6c42\u51fa prefixSum \u6570\u7ec4\uff0c\u5f15\u5165\u54c8\u5e0c\u8868 \u6211\u4eec\u53ea\u5173\u5fc3\u54ea\u4e9b\u524d\u7f00\u548c\u7684\u503c\u76f8\u51cf\u7b49\u4e8ek\uff0c\u6211\u4eec\u4e0d\u5173\u5fc3\u5177\u4f53\u662f\u54ea\u4e00\u9879\u7684\u524d\u7f00\u548c\u76f8\u51cf\u7b49\u4e8ek\uff0c\u5e76\u4e14\u6211\u4eec\u5173\u5fc3\u524d\u7f00\u548c\u7684\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u77e5\u9053\u6709\u51e0\u4e2a\u5b50\u6570\u7ec4\u6c42\u548c\u7b49\u4e8ek\u3002 \u51fa\u73b0\u8fc7\u7684\u524d\u7f00\u548c\uff0c\u548c\u5bf9\u5e94\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5b58\u5165 mapkey\uff1a\u524d\u7f00\u548c\u7684\u503cvalue\uff1a\u8be5\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570 \u904d\u5386 nums \u4e4b\u524d\uff0c\u6211\u4eec\u8ba9 -1 \u60c5\u51b5\u4e0b\u7684\u524d\u7f00\u548c\u4e3a 0\uff0c\u8fd9\u6837\u901a\u5f0f\u5728\u8fb9\u754c\u60c5\u51b5\u4e5f\u80fd\u9002\u7528\u3002\u5373 map \u521d\u59cb\u653e\u5165 0:1 \u952e\u503c\u5bf9\uff0c\u5373\u5df2\u7ecf\u51fa\u73b0 1 \u6b21\u524d\u7f00\u548c\u4e3a 0. \u904d\u5386 nums \u6570\u7ec4\uff0c\u6c42\u51fa\u5f53\u524d\u9879\u7684\u524d\u7f00\u548c\uff0c\u5b58\u5165 map\uff1a \u4e4b\u524d\u6ca1\u6709\u5b58\u8fc7\uff0c\u5219\u5b58\u5165\uff0c\u503c\u4e3a 1\u3002\u4e4b\u524d\u5b58\u8fc7\uff0c\u5219\u503c +1\u3002 \u8fb9\u5b58\u8fb9\u67e5\u770b map\uff0c\u5982\u679c map \u4e2d\u5b58\u5728 key \u4e3a\uff1a\u5f53\u524d\u524d\u7f00\u548c - k \u8bf4\u660e\u8fd9\u4e2a\u4e4b\u524d\u51fa\u73b0\u7684\u524d\u7f00\u548c\uff0c\u6ee1\u8db3\u300c\u5f53\u524d\u524d\u7f00\u548c - \u8be5\u524d\u7f00\u548c == k\u300d\u3002\u8be5\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7d2f\u52a0\u7ed9 count\u3002 * */ /* * \u67e5\u770b\u89e3\u6790\u540e\uff0c\u601d\u8def\u5982\u4e0b: * 1. \u52a8\u6001\u89c4\u5212(\u5229\u7528\u2018\u524d\u7f00\u548c\u2019)\u7684\u601d\u8def\u6ca1\u6709\u95ee\u9898\uff0c\u5e94\u5f53\u50a8\u5b58\u626b\u63cf\u8fc7\u5143\u7d20\u7684\u4fe1\u606f\uff0c\u4f46\u5bf9\u4e8e\u8be5\u50a8\u5b58\u7684\u4fe1\u606f\u8ba4\u8bc6\u8fd8\u4e0d\u591f. * 2. \u4e2a\u4eba\u5bf9\u4e8ehash\u7684\u5229\u7528\u8fd8\u4e0d\u591f\u591a\uff0c\u53ea\u4f1a\u5199\u5f62\u5982\uff1a * hash[nums[i]] ++ \u4e00\u7c7b\u7684\u4ee3\u7801. */ class Solution { public: int subarraySum(vector<int>& nums, int k) { unordered_map<int, int> mp; mp[0] = 1; int count = 0, pre = 0; for (auto& x:nums) { pre += x; if (mp.find(pre - k) != mp.end()) { count += mp[pre - k]; } mp[pre]++; } return count; } };","title":"\u6700\u7ec8\u7248"},{"location":"560.html#_6","text":"\u53c2\u80031","title":"\u53c2\u8003"},{"location":"62.html","text":"\u9898\u76ee: \u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a m x n \u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a \u201cStart\u201d \uff09\u3002 \u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a \u201cFinish\u201d \uff09\u3002 \u95ee\u603b\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f \u793a\u4f8b: >\u8f93\u5165\uff1am = 3, n = 2 >\u8f93\u51fa\uff1a3 >\u89e3\u91ca\uff1a\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u603b\u5171\u6709 3 \u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u89d2\u3002 1. \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u4e0b 2. \u5411\u4e0b -> \u5411\u4e0b -> \u5411\u53f3 3. \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u4e0b \u601d\u8def \u6211\u4eec\u7528 f(i, j)f(i,j) \u8868\u793a\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230 (i, j)(i,j) \u7684\u8def\u5f84\u6570\u91cf\uff0c\u5176\u4e2d ii \u548c jj \u7684\u8303\u56f4\u5206\u522b\u662f [0, m)[0,m) \u548c [0, n)[0,n)\u3002 \u52a8\u6001\u89c4\u5212\u8f6c\u79fb\u65b9\u7a0b\uff1af(i,j)=f(i\u22121,j)+f(i,j\u22121) \u6700\u7ec8\u7684\u7b54\u6848\u5373\u4e3a f(m-1,n-1)f(m\u22121,n\u22121)\u3002 \u89e3\u7b54: class Solution { public: int uniquePaths(int m, int n) { vector<vector<int>> f(m, vector<int>(n)); for(int i = 0; i < m; ++i) { f[i][0] = 1; } for(int i = 0; i < n; ++i) { f[0][i] = 1; } for(int i = 1; i < m; ++i) for(int j = 1; j < n; ++j) f[i][j] = f[i-1][j] + f[i][j-1]; return f[m-1][n-1]; } };","title":62},{"location":"62.html#_1","text":"\u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a m x n \u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a \u201cStart\u201d \uff09\u3002 \u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a \u201cFinish\u201d \uff09\u3002 \u95ee\u603b\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f","title":"\u9898\u76ee:"},{"location":"62.html#_2","text":">\u8f93\u5165\uff1am = 3, n = 2 >\u8f93\u51fa\uff1a3 >\u89e3\u91ca\uff1a\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u603b\u5171\u6709 3 \u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u89d2\u3002 1. \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u4e0b 2. \u5411\u4e0b -> \u5411\u4e0b -> \u5411\u53f3 3. \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u4e0b","title":"\u793a\u4f8b:"},{"location":"62.html#_3","text":"\u6211\u4eec\u7528 f(i, j)f(i,j) \u8868\u793a\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230 (i, j)(i,j) \u7684\u8def\u5f84\u6570\u91cf\uff0c\u5176\u4e2d ii \u548c jj \u7684\u8303\u56f4\u5206\u522b\u662f [0, m)[0,m) \u548c [0, n)[0,n)\u3002 \u52a8\u6001\u89c4\u5212\u8f6c\u79fb\u65b9\u7a0b\uff1af(i,j)=f(i\u22121,j)+f(i,j\u22121) \u6700\u7ec8\u7684\u7b54\u6848\u5373\u4e3a f(m-1,n-1)f(m\u22121,n\u22121)\u3002","title":"\u601d\u8def"},{"location":"62.html#_4","text":"class Solution { public: int uniquePaths(int m, int n) { vector<vector<int>> f(m, vector<int>(n)); for(int i = 0; i < m; ++i) { f[i][0] = 1; } for(int i = 0; i < n; ++i) { f[0][i] = 1; } for(int i = 1; i < m; ++i) for(int j = 1; j < n; ++j) f[i][j] = f[i-1][j] + f[i][j-1]; return f[m-1][n-1]; } };","title":"\u89e3\u7b54:"},{"location":"647.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u56de\u6587\u5b50\u4e32\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1a\"aaa\" >\u8f93\u51fa\uff1a6 >\u89e3\u91ca\uff1a6\u4e2a\u56de\u6587\u5b50\u4e32: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\" \u601d\u8def \u52a8\u6001\u89c4\u5212\u95ee\u9898 \u89e3\u7b54: /* \u60c5\u51b5\u4e00\uff1a\u4e0b\u6807i \u4e0e j\u76f8\u540c\uff0c\u540c\u4e00\u4e2a\u5b57\u7b26\u4f8b\u5982a\uff0c\u5f53\u7136\u662f\u56de\u6587\u5b50\u4e32 \u60c5\u51b5\u4e8c\uff1a\u4e0b\u6807i \u4e0e j\u76f8\u5dee\u4e3a1\uff0c\u4f8b\u5982aa\uff0c\u4e5f\u662f\u6587\u5b50\u4e32 \u60c5\u51b5\u4e09\uff1a\u4e0b\u6807\uff1ai \u4e0e j\u76f8\u5dee\u5927\u4e8e1\u7684\u65f6\u5019\uff0c\u4f8b\u5982cabac\uff0c\u6b64\u65f6s[i]\u4e0es[j]\u5df2\u7ecf\u76f8\u540c\u4e86\uff0c\u6211\u4eec\u770bi\u5230j\u533a\u95f4\u662f\u4e0d\u662f\u56de\u6587\u5b50\u4e32\u5c31\u770baba\u662f\u4e0d\u662f\u56de\u6587\u5c31\u53ef\u4ee5\u4e86\uff0c\u90a3\u4e48aba\u7684\u533a\u95f4\u5c31\u662f i+1 \u4e0e j-1\u533a\u95f4\uff0c\u8fd9\u4e2a\u533a\u95f4\u662f\u4e0d\u662f\u56de\u6587\u5c31\u770bdp[i + 1][j - 1]\u662f\u5426\u4e3atrue\u3002 */ //\u4ee5\u5f53\u524d\u4e3a\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55 class Solution { public: int extend(const string& s, int left, int right){ int n = s.size(); int res = 0; while (left>=0 && right < n && s[left] == s[right]) { left--; right++; res ++; } return res; } int countSubstrings(string s) { int res = 0; for(int i = 0,n = s.size(); i < n; ++i) { res += extend(s, i, i); res += extend(s, i,i+1); } return res; } };","title":647},{"location":"647.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u56de\u6587\u5b50\u4e32\u3002","title":"\u9898\u76ee:"},{"location":"647.html#_2","text":">\u8f93\u5165\uff1a\"aaa\" >\u8f93\u51fa\uff1a6 >\u89e3\u91ca\uff1a6\u4e2a\u56de\u6587\u5b50\u4e32: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"","title":"\u793a\u4f8b:"},{"location":"647.html#_3","text":"\u52a8\u6001\u89c4\u5212\u95ee\u9898","title":"\u601d\u8def"},{"location":"647.html#_4","text":"/* \u60c5\u51b5\u4e00\uff1a\u4e0b\u6807i \u4e0e j\u76f8\u540c\uff0c\u540c\u4e00\u4e2a\u5b57\u7b26\u4f8b\u5982a\uff0c\u5f53\u7136\u662f\u56de\u6587\u5b50\u4e32 \u60c5\u51b5\u4e8c\uff1a\u4e0b\u6807i \u4e0e j\u76f8\u5dee\u4e3a1\uff0c\u4f8b\u5982aa\uff0c\u4e5f\u662f\u6587\u5b50\u4e32 \u60c5\u51b5\u4e09\uff1a\u4e0b\u6807\uff1ai \u4e0e j\u76f8\u5dee\u5927\u4e8e1\u7684\u65f6\u5019\uff0c\u4f8b\u5982cabac\uff0c\u6b64\u65f6s[i]\u4e0es[j]\u5df2\u7ecf\u76f8\u540c\u4e86\uff0c\u6211\u4eec\u770bi\u5230j\u533a\u95f4\u662f\u4e0d\u662f\u56de\u6587\u5b50\u4e32\u5c31\u770baba\u662f\u4e0d\u662f\u56de\u6587\u5c31\u53ef\u4ee5\u4e86\uff0c\u90a3\u4e48aba\u7684\u533a\u95f4\u5c31\u662f i+1 \u4e0e j-1\u533a\u95f4\uff0c\u8fd9\u4e2a\u533a\u95f4\u662f\u4e0d\u662f\u56de\u6587\u5c31\u770bdp[i + 1][j - 1]\u662f\u5426\u4e3atrue\u3002 */ //\u4ee5\u5f53\u524d\u4e3a\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55 class Solution { public: int extend(const string& s, int left, int right){ int n = s.size(); int res = 0; while (left>=0 && right < n && s[left] == s[right]) { left--; right++; res ++; } return res; } int countSubstrings(string s) { int res = 0; for(int i = 0,n = s.size(); i < n; ++i) { res += extend(s, i, i); res += extend(s, i,i+1); } return res; } };","title":"\u89e3\u7b54:"},{"location":"658.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u597d\u7684\u6570\u7ec4 arr \uff0c\u4e24\u4e2a\u6574\u6570 k \u548c x \uff0c\u4ece\u6570\u7ec4\u4e2d\u627e\u5230\u6700\u9760\u8fd1 x\uff08\u4e24\u6570\u4e4b\u5dee\u6700\u5c0f\uff09\u7684 k \u4e2a\u6570\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u5fc5\u987b\u8981\u662f\u6309\u5347\u5e8f\u6392\u597d\u7684 \u6574\u6570 a \u6bd4\u6574\u6570 b \u66f4\u63a5\u8fd1 x \u9700\u8981\u6ee1\u8db3\uff1a |a - x| < |b - x| \u6216\u8005 |a - x| == |b - x| \u4e14 a < b \u793a\u4f8b: >\u8f93\u5165:[0,2,2,3,4,6,7,8,9,9] 4 5 >\u8f93\u51fa:[3,4,6,7] \u601d\u8def \u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6309\u7167\u4e0e\u76ee\u6807 x \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6392\u5e8f \u6709\u5e8f\uff0c\u67e5\u627e\u7c7b\u4efb\u52a1\uff0c\u60f3\u5230$O(lg_n)$ \u7684\u6298\u534a\u67e5\u627e\uff0c\u4f46\u6298\u534a\u67e5\u627e\u662f\u9488\u5bf9\u5355\u4e2a\u5143\u7d20\u7684\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6709\u4e24\u79cd\u67e5\u627e\u7b56\u7565 \u627e\u5230\u7b2c\u4e00\u4e2a\u6700\u63a5\u8fd1\u4e14\u6bd4 x \u5c0f\u7684\u6570\uff0c\u7136\u540e\u5411\u4e24\u8fb9\u641c\u7d22 \u67e5\u627e\u7b26\u5408\u6761\u4ef6\u7684\u5de6\u533a\u95f4 \u67e5\u627e\u533a\u95f4\u4e3a [0, arr.size() - k] \u5f53 x - arr[mid] > arr[mid + k] - x \u65f6\uff0c\u6b64\u65f6\u5de6\u533a\u95f4\u4e00\u5b9a\u5728mid \u53f3\u4fa7,\u8c03\u6574\u641c\u7d22\u533a\u95f4,\u7ee7\u7eed\u641c\u7d22 \u89e3\u7b54 class Solution { public: vector<int> findClosestElements(vector<int>& arr, int k, int x) { int len = arr.size(); vector<pair<int, int>> tmp(len) ; for(int i = 0; i < len; ++i) { tmp[i].first = abs(arr[i] - x); tmp[i].second = arr[i]; } sort(tmp.begin(), tmp.end()); vector<int> res(k, 0); for(int i = 0; i < k; ++i) { res[i] = tmp[i].second; } sort(res.begin() , res.end()); return res; } }; //\u6298\u534a\u67e5\u627e \u7b56\u7565\u4e00 class Solution { public: vector<int> findClosestElements(vector<int>& arr, int k, int x) { vector<int> ans; int n = arr.size(); int l = -1, r = n- 1; // \u4e8c\u5206\u67e5\u627e\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4x\u5c0f\u7684\u6570 while (l < r) { int mid = l + r + 1 >> 1; if (arr[mid] > x) r = mid - 1; else l = mid; } if (l == -1) { for (int i = 0; i < k; i ++) ans.push_back(arr[i]); return ans; } int i = l, j = l + 1, cnt = 0;; while (i >= 0 && j < n && cnt < k) { if (x - arr[i] <= arr[j] - x) { ans.push_back(arr[i]); i --; } else { ans.push_back(arr[j]); j ++; } cnt ++; } while (i >= 0 && cnt < k) { ans.push_back(arr[i]); i--; cnt ++; } while (j < n && cnt < k) { ans.push_back(arr[j]); j ++; cnt ++; } sort(ans.begin(), ans.end()); return ans; } }; //\u6298\u534a\u67e5\u627e \u7b56\u7565\u4e8c class Solution { public: vector<int> findClosestElements(vector<int>& arr, int k, int x) { int lo = 0; int hi = arr.size() - k; while(lo < hi) { int mid = lo + ((hi - lo) >> 1); if( x - arr[mid] > arr[mid + k] - x) { lo = mid + 1; } else { hi = mid; } } return vector<int>(arr.begin() + lo, arr.begin() + lo + k); } }; \u603b\u7ed3","title":"658.\u627e\u5230K\u4e2a\u6700\u63a5\u8fd1\u7684\u5143\u7d20"},{"location":"658.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u597d\u7684\u6570\u7ec4 arr \uff0c\u4e24\u4e2a\u6574\u6570 k \u548c x \uff0c\u4ece\u6570\u7ec4\u4e2d\u627e\u5230\u6700\u9760\u8fd1 x\uff08\u4e24\u6570\u4e4b\u5dee\u6700\u5c0f\uff09\u7684 k \u4e2a\u6570\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u5fc5\u987b\u8981\u662f\u6309\u5347\u5e8f\u6392\u597d\u7684 \u6574\u6570 a \u6bd4\u6574\u6570 b \u66f4\u63a5\u8fd1 x \u9700\u8981\u6ee1\u8db3\uff1a |a - x| < |b - x| \u6216\u8005 |a - x| == |b - x| \u4e14 a < b","title":"\u9898\u76ee:"},{"location":"658.html#_2","text":">\u8f93\u5165:[0,2,2,3,4,6,7,8,9,9] 4 5 >\u8f93\u51fa:[3,4,6,7]","title":"\u793a\u4f8b:"},{"location":"658.html#_3","text":"\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6309\u7167\u4e0e\u76ee\u6807 x \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6392\u5e8f \u6709\u5e8f\uff0c\u67e5\u627e\u7c7b\u4efb\u52a1\uff0c\u60f3\u5230$O(lg_n)$ \u7684\u6298\u534a\u67e5\u627e\uff0c\u4f46\u6298\u534a\u67e5\u627e\u662f\u9488\u5bf9\u5355\u4e2a\u5143\u7d20\u7684\uff0c\u8fd9\u91cc\u53ef\u4ee5\u6709\u4e24\u79cd\u67e5\u627e\u7b56\u7565 \u627e\u5230\u7b2c\u4e00\u4e2a\u6700\u63a5\u8fd1\u4e14\u6bd4 x \u5c0f\u7684\u6570\uff0c\u7136\u540e\u5411\u4e24\u8fb9\u641c\u7d22 \u67e5\u627e\u7b26\u5408\u6761\u4ef6\u7684\u5de6\u533a\u95f4 \u67e5\u627e\u533a\u95f4\u4e3a [0, arr.size() - k] \u5f53 x - arr[mid] > arr[mid + k] - x \u65f6\uff0c\u6b64\u65f6\u5de6\u533a\u95f4\u4e00\u5b9a\u5728mid \u53f3\u4fa7,\u8c03\u6574\u641c\u7d22\u533a\u95f4,\u7ee7\u7eed\u641c\u7d22","title":"\u601d\u8def"},{"location":"658.html#_4","text":"class Solution { public: vector<int> findClosestElements(vector<int>& arr, int k, int x) { int len = arr.size(); vector<pair<int, int>> tmp(len) ; for(int i = 0; i < len; ++i) { tmp[i].first = abs(arr[i] - x); tmp[i].second = arr[i]; } sort(tmp.begin(), tmp.end()); vector<int> res(k, 0); for(int i = 0; i < k; ++i) { res[i] = tmp[i].second; } sort(res.begin() , res.end()); return res; } }; //\u6298\u534a\u67e5\u627e \u7b56\u7565\u4e00 class Solution { public: vector<int> findClosestElements(vector<int>& arr, int k, int x) { vector<int> ans; int n = arr.size(); int l = -1, r = n- 1; // \u4e8c\u5206\u67e5\u627e\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4x\u5c0f\u7684\u6570 while (l < r) { int mid = l + r + 1 >> 1; if (arr[mid] > x) r = mid - 1; else l = mid; } if (l == -1) { for (int i = 0; i < k; i ++) ans.push_back(arr[i]); return ans; } int i = l, j = l + 1, cnt = 0;; while (i >= 0 && j < n && cnt < k) { if (x - arr[i] <= arr[j] - x) { ans.push_back(arr[i]); i --; } else { ans.push_back(arr[j]); j ++; } cnt ++; } while (i >= 0 && cnt < k) { ans.push_back(arr[i]); i--; cnt ++; } while (j < n && cnt < k) { ans.push_back(arr[j]); j ++; cnt ++; } sort(ans.begin(), ans.end()); return ans; } }; //\u6298\u534a\u67e5\u627e \u7b56\u7565\u4e8c class Solution { public: vector<int> findClosestElements(vector<int>& arr, int k, int x) { int lo = 0; int hi = arr.size() - k; while(lo < hi) { int mid = lo + ((hi - lo) >> 1); if( x - arr[mid] > arr[mid + k] - x) { lo = mid + 1; } else { hi = mid; } } return vector<int>(arr.begin() + lo, arr.begin() + lo + k); } };","title":"\u89e3\u7b54"},{"location":"658.html#_5","text":"","title":"\u603b\u7ed3"},{"location":"692.html","text":"\u9898\u76ee: \u7ed9\u4e00\u975e\u7a7a\u7684\u5355\u8bcd\u5217\u8868\uff0c\u8fd4\u56de\u524d k \u4e2a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5355\u8bcd\u3002 \u8fd4\u56de\u7684\u7b54\u6848\u5e94\u8be5\u6309\u5355\u8bcd\u51fa\u73b0\u9891\u7387\u7531\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u5982\u679c\u4e0d\u540c\u7684\u5355\u8bcd\u6709\u76f8\u540c\u51fa\u73b0\u9891\u7387\uff0c\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f \u793a\u4f8b: >\u8f93\u5165\uff1a[\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2 >\u8f93\u51fa\uff1a [\"i\", \"love\"] >\u89e3\u6790: \"i\" \u548c \"love\" \u4e3a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u5747\u4e3a2\u6b21\u3002\u6ce8\u610f\uff0c\u6309\u5b57\u6bcd\u987a\u5e8f \"i\" \u5728 \"love\" \u4e4b\u524d\u3002 \u601d\u8def \u6ce8\u610f\u5806\u7684\u58f0\u660e\u65b9\u5f0f \u89e3\u7b54: class Solution { typedef pair<int, int> value_type; // \u6b21\u6570\u548c\u5b57\u7b26\u4e0b\u6807 public: vector<string> topKFrequent(vector<string>& words, int k) { vector<string> res; map<string, value_type> mp; auto cmp = [&words](const value_type& a, const value_type& b){ if(a.first == b.first) return words[a.second].compare(words[b.second]) >0; return a.first < b.first; }; priority_queue<value_type, vector<value_type>, decltype(cmp)> pq(cmp); for(size_t i = 0; i < words.size(); ++i) { mp[ words[i] ].first ++; mp[ words[i] ].second = i; //map[word] ++; } for(auto p = mp.begin(); p!=mp.end(); ++p) { pq.push(p->second); } for(size_t i = 0; !pq.empty() && i < k; ++i ) { value_type tmp = pq.top(); res.push_back(words[tmp.second]); pq.pop(); } return res; } };","title":"\u9898\u76ee:"},{"location":"692.html#_1","text":"\u7ed9\u4e00\u975e\u7a7a\u7684\u5355\u8bcd\u5217\u8868\uff0c\u8fd4\u56de\u524d k \u4e2a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5355\u8bcd\u3002 \u8fd4\u56de\u7684\u7b54\u6848\u5e94\u8be5\u6309\u5355\u8bcd\u51fa\u73b0\u9891\u7387\u7531\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u5982\u679c\u4e0d\u540c\u7684\u5355\u8bcd\u6709\u76f8\u540c\u51fa\u73b0\u9891\u7387\uff0c\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f","title":"\u9898\u76ee:"},{"location":"692.html#_2","text":">\u8f93\u5165\uff1a[\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2 >\u8f93\u51fa\uff1a [\"i\", \"love\"] >\u89e3\u6790: \"i\" \u548c \"love\" \u4e3a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u5747\u4e3a2\u6b21\u3002\u6ce8\u610f\uff0c\u6309\u5b57\u6bcd\u987a\u5e8f \"i\" \u5728 \"love\" \u4e4b\u524d\u3002","title":"\u793a\u4f8b:"},{"location":"692.html#_3","text":"\u6ce8\u610f\u5806\u7684\u58f0\u660e\u65b9\u5f0f","title":"\u601d\u8def"},{"location":"692.html#_4","text":"class Solution { typedef pair<int, int> value_type; // \u6b21\u6570\u548c\u5b57\u7b26\u4e0b\u6807 public: vector<string> topKFrequent(vector<string>& words, int k) { vector<string> res; map<string, value_type> mp; auto cmp = [&words](const value_type& a, const value_type& b){ if(a.first == b.first) return words[a.second].compare(words[b.second]) >0; return a.first < b.first; }; priority_queue<value_type, vector<value_type>, decltype(cmp)> pq(cmp); for(size_t i = 0; i < words.size(); ++i) { mp[ words[i] ].first ++; mp[ words[i] ].second = i; //map[word] ++; } for(auto p = mp.begin(); p!=mp.end(); ++p) { pq.push(p->second); } for(size_t i = 0; !pq.empty() && i < k; ++i ) { value_type tmp = pq.top(); res.push_back(words[tmp.second]); pq.pop(); } return res; } };","title":"\u89e3\u7b54:"},{"location":"714.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 prices\uff0c\u5176\u4e2d\u7b2c i \u4e2a\u5143\u7d20\u4ee3\u8868\u4e86\u7b2c i \u5929\u7684\u80a1\u7968\u4ef7\u683c \uff1b\u975e\u8d1f\u6574\u6570 fee \u4ee3\u8868\u4e86\u4ea4\u6613\u80a1\u7968\u7684\u624b\u7eed\u8d39\u7528\u3002 \u4f60\u53ef\u4ee5\u65e0\u9650\u6b21\u5730\u5b8c\u6210\u4ea4\u6613\uff0c\u4f46\u662f\u4f60\u6bcf\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u4ed8\u624b\u7eed\u8d39\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u8d2d\u4e70\u4e86\u4e00\u4e2a\u80a1\u7968\uff0c\u5728\u5356\u51fa\u5b83\u4e4b\u524d\u4f60\u5c31\u4e0d\u80fd\u518d\u7ee7\u7eed\u8d2d\u4e70\u80a1\u7968\u4e86\u3002 \u8fd4\u56de\u83b7\u5f97\u5229\u6da6\u7684\u6700\u5927\u503c\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u4e00\u7b14\u4ea4\u6613\u6307\u4e70\u5165\u6301\u6709\u5e76\u5356\u51fa\u80a1\u7968\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u6bcf\u7b14\u4ea4\u6613\u4f60\u53ea\u9700\u8981\u4e3a\u652f\u4ed8\u4e00\u6b21\u624b\u7eed\u8d39 \u793a\u4f8b: >\u8f93\u5165: prices = [1, 3, 2, 8, 4, 9], fee = 2 >\u8f93\u51fa: 8 >\u89e3\u91ca: \u80fd\u591f\u8fbe\u5230\u7684\u6700\u5927\u5229\u6da6: \u5728\u6b64\u5904\u4e70\u5165 prices[0] = 1 \u5728\u6b64\u5904\u5356\u51fa prices[3] = 8 \u5728\u6b64\u5904\u4e70\u5165 prices[4] = 4 \u5728\u6b64\u5904\u5356\u51fa prices[5] = 9 \u603b\u5229\u6da6: ((8 - 1) - 2) + ((9 - 4) - 2) = 8. \u601d\u8def \u8d2a\u5fc3\u7b97\u6cd5 \u89e3\u7b54: class Solution { public: int maxProfit(vector<int>& prices, int fee) { int n = prices.size(); int buy = prices[0] + fee; int res = 0; //\u5229\u6da6 for(int i = 1; i < prices.size(); ++i) { if(prices[i] + fee < buy) { //\u6709\u66f4\u597d\u7684\u4e70\u70b9 buy = prices[i] + fee; } else if (prices[i] > buy){ //\u5356\u51fa\u80a1\u7968 res += prices[i] - buy; /* \u5904\u7406\u80a1\u7968\u53ef\u80fd\u7ee7\u7eed\u589e\u957f\u7684\u60c5\u51b5(prices[i+1] > prices[i]) \u6b64\u65f6\u5f53 i +1 \u65f6,res = prices[i+1] - prices[i](buy) + \u5f53i\u65f6\u7684\u5229\u6da6 */ //\u53ef\u80fd\u9047\u89c1\u5c40\u90e8\u6700\u4f18\u89e3 buy = prices[i]; } /* else prices[i] \u843d\u5728\u533a\u95f4 [buy\u2212fee,buy] \u5185\uff0c\u5b83 \u7684\u4ef7\u683c\u6ca1\u6709\u4f4e\u5230\u6211\u4eec\u653e\u5f03\u624b\u4e0a\u7684\u80a1\u7968\u53bb\u9009\u62e9\u5b83\uff0c\u4e5f\u6ca1\u6709 \u9ad8\u5230\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5356\u51fa\u83b7\u5f97\u6536\u76ca\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c */ } return res; } };","title":714},{"location":"714.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 prices\uff0c\u5176\u4e2d\u7b2c i \u4e2a\u5143\u7d20\u4ee3\u8868\u4e86\u7b2c i \u5929\u7684\u80a1\u7968\u4ef7\u683c \uff1b\u975e\u8d1f\u6574\u6570 fee \u4ee3\u8868\u4e86\u4ea4\u6613\u80a1\u7968\u7684\u624b\u7eed\u8d39\u7528\u3002 \u4f60\u53ef\u4ee5\u65e0\u9650\u6b21\u5730\u5b8c\u6210\u4ea4\u6613\uff0c\u4f46\u662f\u4f60\u6bcf\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u4ed8\u624b\u7eed\u8d39\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u8d2d\u4e70\u4e86\u4e00\u4e2a\u80a1\u7968\uff0c\u5728\u5356\u51fa\u5b83\u4e4b\u524d\u4f60\u5c31\u4e0d\u80fd\u518d\u7ee7\u7eed\u8d2d\u4e70\u80a1\u7968\u4e86\u3002 \u8fd4\u56de\u83b7\u5f97\u5229\u6da6\u7684\u6700\u5927\u503c\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u4e00\u7b14\u4ea4\u6613\u6307\u4e70\u5165\u6301\u6709\u5e76\u5356\u51fa\u80a1\u7968\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u6bcf\u7b14\u4ea4\u6613\u4f60\u53ea\u9700\u8981\u4e3a\u652f\u4ed8\u4e00\u6b21\u624b\u7eed\u8d39","title":"\u9898\u76ee:"},{"location":"714.html#_2","text":">\u8f93\u5165: prices = [1, 3, 2, 8, 4, 9], fee = 2 >\u8f93\u51fa: 8 >\u89e3\u91ca: \u80fd\u591f\u8fbe\u5230\u7684\u6700\u5927\u5229\u6da6: \u5728\u6b64\u5904\u4e70\u5165 prices[0] = 1 \u5728\u6b64\u5904\u5356\u51fa prices[3] = 8 \u5728\u6b64\u5904\u4e70\u5165 prices[4] = 4 \u5728\u6b64\u5904\u5356\u51fa prices[5] = 9 \u603b\u5229\u6da6: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.","title":"\u793a\u4f8b:"},{"location":"714.html#_3","text":"\u8d2a\u5fc3\u7b97\u6cd5","title":"\u601d\u8def"},{"location":"714.html#_4","text":"class Solution { public: int maxProfit(vector<int>& prices, int fee) { int n = prices.size(); int buy = prices[0] + fee; int res = 0; //\u5229\u6da6 for(int i = 1; i < prices.size(); ++i) { if(prices[i] + fee < buy) { //\u6709\u66f4\u597d\u7684\u4e70\u70b9 buy = prices[i] + fee; } else if (prices[i] > buy){ //\u5356\u51fa\u80a1\u7968 res += prices[i] - buy; /* \u5904\u7406\u80a1\u7968\u53ef\u80fd\u7ee7\u7eed\u589e\u957f\u7684\u60c5\u51b5(prices[i+1] > prices[i]) \u6b64\u65f6\u5f53 i +1 \u65f6,res = prices[i+1] - prices[i](buy) + \u5f53i\u65f6\u7684\u5229\u6da6 */ //\u53ef\u80fd\u9047\u89c1\u5c40\u90e8\u6700\u4f18\u89e3 buy = prices[i]; } /* else prices[i] \u843d\u5728\u533a\u95f4 [buy\u2212fee,buy] \u5185\uff0c\u5b83 \u7684\u4ef7\u683c\u6ca1\u6709\u4f4e\u5230\u6211\u4eec\u653e\u5f03\u624b\u4e0a\u7684\u80a1\u7968\u53bb\u9009\u62e9\u5b83\uff0c\u4e5f\u6ca1\u6709 \u9ad8\u5230\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5356\u51fa\u83b7\u5f97\u6536\u76ca\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c */ } return res; } };","title":"\u89e3\u7b54:"},{"location":"718.html","text":"\u9898\u76ee: \u7ed9\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 A \u548c B \uff0c\u8fd4\u56de\u4e24\u4e2a\u6570\u7ec4\u4e2d\u516c\u5171\u7684\u3001\u957f\u5ea6\u6700\u957f\u7684\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1a A: [1,2,3,2,1] B: [3,2,1,4,7] >\u8f93\u51fa\uff1a3 >\u89e3\u91ca\uff1a \u957f\u5ea6\u6700\u957f\u7684\u516c\u5171\u5b50\u6570\u7ec4\u662f [3, 2, 1] \u3002 \u601d\u8def \u96be\u70b9\u5728\u4e8e\uff0cB \u5e76\u4e0d\u662f\u7ed9\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4e0d\u5f97\u4e0d\u5c1d\u8bd5B\u4e2d\u6240\u6709\u7684\u5b57\u7b26\u4e32,\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6 \u4e3a O(N^3) \u5018\u82e5\u6211\u4eec\u80fd\u591f\u627e\u5230 A \u548c B \u521d\u59cb\u5339\u914d\u7684\u4f4d\u7f6e\uff0c\u95ee\u9898\u5c31\u53d8\u7684\u66f4\u52a0\u7684\u7b80\u5355\u4e86 - \u8bb0\u5f55\u4e0b\u6709\u7528\u7684\u65f6\u95f4\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6,\u52a8\u6001\u89c4\u5212\uff0c\u5145\u5206\u7684\u5229\u7528\u4e4b\u524d\u7684\u5339\u914d - \u5c06 A \u548cB \u5b9e\u73b0\u5bf9\u9f50 \u89e3\u7b54: //\u57fa\u4e8e KMP \u7b97\u6cd5,\u8d85\u65f6 class Solution { public: //\u5224\u65ad\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u533a\u95f4 bool helper(const vector<int>& nums1, const vector<int>& nums) { int len1 = nums1.size(); int len2 = nums.size(); int i = 0; int j = 0; while( i < len1 && j < len2){ if(nums1[i] == nums[j]){ ++i; ++j; } else { i -= j - 1; j = 0; } }// end of while return j == len2; } int findLength(vector<int>& nums1, vector<int>& nums2) { int lo = 1; int hi = min(nums1.size(), nums2.size()) + 1; int res = 0; for(int i = 0; i < nums2.size(); ++i){ //\u6240\u6709\u4f4d\u7f6e for(int j = 1; i + j <= nums2.size(); ++j){ //\u957f\u5ea6 vector<int>::iterator p = nums2.begin() + i; if(helper(nums1, vector<int>(p, p + j))) res = res > j ? res : j; } } return res; } }; \u6807\u51c6\u7b54\u6848 //\u52a8\u6001\u89c4\u5212 class Solution { public: int findLength(vector<int>& nums1, vector<int>& nums2) { int n = nums1.size(); int m = nums2.size(); int res = 0; vector<vector<int>> dp(n +1 ,vector<int>(m + 1)); for(int i = 1; i <= n; ++i) for(int j = 1; j <= m; ++j) if(nums1[i - 1] == nums2[j-1]){ dp[i][j] = dp[i-1][j-1] + 1; res = res > dp[i][j] ? res : dp[i][j]; } return res; } }; //\u6ed1\u52a8\u7a97\u53e3 class Solution { public: int maxLength(vector<int>& A, vector<int>& B, int addA, int addB, int len) { int ret = 0, k = 0; for (int i = 0; i < len; i++) { if (A[addA + i] == B[addB + i]) { k++; } else { k = 0; } ret = max(ret, k); } return ret; } int findLength(vector<int>& A, vector<int>& B) { int n = A.size(), m = B.size(); int ret = 0; for (int i = 0; i < n; i++) { int len = min(m, n - i); int maxlen = maxLength(A, B, i, 0, len); ret = max(ret, maxlen); } for (int i = 0; i < m; i++) { int len = min(n, m - i); int maxlen = maxLength(A, B, 0, i, len); ret = max(ret, maxlen); } return ret; } };","title":"718\u6700\u957f\u91cd\u590d\u5b57\u7b26\u4e32"},{"location":"718.html#_1","text":"\u7ed9\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 A \u548c B \uff0c\u8fd4\u56de\u4e24\u4e2a\u6570\u7ec4\u4e2d\u516c\u5171\u7684\u3001\u957f\u5ea6\u6700\u957f\u7684\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002","title":"\u9898\u76ee:"},{"location":"718.html#_2","text":">\u8f93\u5165\uff1a A: [1,2,3,2,1] B: [3,2,1,4,7] >\u8f93\u51fa\uff1a3 >\u89e3\u91ca\uff1a \u957f\u5ea6\u6700\u957f\u7684\u516c\u5171\u5b50\u6570\u7ec4\u662f [3, 2, 1] \u3002","title":"\u793a\u4f8b:"},{"location":"718.html#_3","text":"\u96be\u70b9\u5728\u4e8e\uff0cB \u5e76\u4e0d\u662f\u7ed9\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4e0d\u5f97\u4e0d\u5c1d\u8bd5B\u4e2d\u6240\u6709\u7684\u5b57\u7b26\u4e32,\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6 \u4e3a O(N^3) \u5018\u82e5\u6211\u4eec\u80fd\u591f\u627e\u5230 A \u548c B \u521d\u59cb\u5339\u914d\u7684\u4f4d\u7f6e\uff0c\u95ee\u9898\u5c31\u53d8\u7684\u66f4\u52a0\u7684\u7b80\u5355\u4e86 - \u8bb0\u5f55\u4e0b\u6709\u7528\u7684\u65f6\u95f4\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6,\u52a8\u6001\u89c4\u5212\uff0c\u5145\u5206\u7684\u5229\u7528\u4e4b\u524d\u7684\u5339\u914d - \u5c06 A \u548cB \u5b9e\u73b0\u5bf9\u9f50","title":"\u601d\u8def"},{"location":"718.html#_4","text":"//\u57fa\u4e8e KMP \u7b97\u6cd5,\u8d85\u65f6 class Solution { public: //\u5224\u65ad\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u533a\u95f4 bool helper(const vector<int>& nums1, const vector<int>& nums) { int len1 = nums1.size(); int len2 = nums.size(); int i = 0; int j = 0; while( i < len1 && j < len2){ if(nums1[i] == nums[j]){ ++i; ++j; } else { i -= j - 1; j = 0; } }// end of while return j == len2; } int findLength(vector<int>& nums1, vector<int>& nums2) { int lo = 1; int hi = min(nums1.size(), nums2.size()) + 1; int res = 0; for(int i = 0; i < nums2.size(); ++i){ //\u6240\u6709\u4f4d\u7f6e for(int j = 1; i + j <= nums2.size(); ++j){ //\u957f\u5ea6 vector<int>::iterator p = nums2.begin() + i; if(helper(nums1, vector<int>(p, p + j))) res = res > j ? res : j; } } return res; } };","title":"\u89e3\u7b54:"},{"location":"718.html#_5","text":"//\u52a8\u6001\u89c4\u5212 class Solution { public: int findLength(vector<int>& nums1, vector<int>& nums2) { int n = nums1.size(); int m = nums2.size(); int res = 0; vector<vector<int>> dp(n +1 ,vector<int>(m + 1)); for(int i = 1; i <= n; ++i) for(int j = 1; j <= m; ++j) if(nums1[i - 1] == nums2[j-1]){ dp[i][j] = dp[i-1][j-1] + 1; res = res > dp[i][j] ? res : dp[i][j]; } return res; } }; //\u6ed1\u52a8\u7a97\u53e3 class Solution { public: int maxLength(vector<int>& A, vector<int>& B, int addA, int addB, int len) { int ret = 0, k = 0; for (int i = 0; i < len; i++) { if (A[addA + i] == B[addB + i]) { k++; } else { k = 0; } ret = max(ret, k); } return ret; } int findLength(vector<int>& A, vector<int>& B) { int n = A.size(), m = B.size(); int ret = 0; for (int i = 0; i < n; i++) { int len = min(m, n - i); int maxlen = maxLength(A, B, i, 0, len); ret = max(ret, maxlen); } for (int i = 0; i < m; i++) { int len = min(n, m - i); int maxlen = maxLength(A, B, 0, i, len); ret = max(ret, maxlen); } return ret; } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"739.html","text":"\u9898\u76ee: \u8bf7\u6839\u636e\u6bcf\u65e5 \u6c14\u6e29 \u5217\u8868\uff0c\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5217\u8868\u3002\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8f93\u51fa\u4e3a\uff1a\u8981\u60f3\u89c2\u6d4b\u5230\u66f4\u9ad8\u7684\u6c14\u6e29\uff0c\u81f3\u5c11\u9700\u8981\u7b49\u5f85\u7684\u5929\u6570\u3002\u5982\u679c\u6c14\u6e29\u5728\u8fd9\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528 0 \u6765\u4ee3\u66ff\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1a[73, 74, 75, 71, 69, 72, 76, 73] >\u8f93\u51fa\uff1a[1, 1, 4, 2, 1, 1, 0, 0]\u3002 \u601d\u8def // \u8ddf\u5355\u8c03\u6808\u601d\u8def\u57fa\u672c\u76f8\u540c\uff0c\u627e\u5230\u540e\u7eed \u7b2c\u4e00\u4e2a \u6700\u5927\u7684\u503c \u89e3\u7b54: class Solution { public: vector<int> dailyTemperatures(vector<int>& T) { stack<int> st; vector<int> res( T.size() ); //\u9006\u5e8f\u904d\u5386 for(int i = T.size()-1; i >= 0; --i) { while( !st.empty() && T[st.top()] <= T[i]) st.pop(); res[i] = st.empty() ? 0 : st.top()-i; st.push( i ); } //\u8fd4\u56de return res; } };","title":739},{"location":"739.html#_1","text":"\u8bf7\u6839\u636e\u6bcf\u65e5 \u6c14\u6e29 \u5217\u8868\uff0c\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5217\u8868\u3002\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8f93\u51fa\u4e3a\uff1a\u8981\u60f3\u89c2\u6d4b\u5230\u66f4\u9ad8\u7684\u6c14\u6e29\uff0c\u81f3\u5c11\u9700\u8981\u7b49\u5f85\u7684\u5929\u6570\u3002\u5982\u679c\u6c14\u6e29\u5728\u8fd9\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528 0 \u6765\u4ee3\u66ff\u3002","title":"\u9898\u76ee:"},{"location":"739.html#_2","text":">\u8f93\u5165\uff1a[73, 74, 75, 71, 69, 72, 76, 73] >\u8f93\u51fa\uff1a[1, 1, 4, 2, 1, 1, 0, 0]\u3002","title":"\u793a\u4f8b:"},{"location":"739.html#_3","text":"// \u8ddf\u5355\u8c03\u6808\u601d\u8def\u57fa\u672c\u76f8\u540c\uff0c\u627e\u5230\u540e\u7eed \u7b2c\u4e00\u4e2a \u6700\u5927\u7684\u503c","title":"\u601d\u8def"},{"location":"739.html#_4","text":"class Solution { public: vector<int> dailyTemperatures(vector<int>& T) { stack<int> st; vector<int> res( T.size() ); //\u9006\u5e8f\u904d\u5386 for(int i = T.size()-1; i >= 0; --i) { while( !st.empty() && T[st.top()] <= T[i]) st.pop(); res[i] = st.empty() ? 0 : st.top()-i; st.push( i ); } //\u8fd4\u56de return res; } };","title":"\u89e3\u7b54:"},{"location":"78.html","text":"\u9898\u76ee: \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 \u4e92\u4e0d\u76f8\u540c \u3002\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u89e3\u96c6 \u4e0d\u80fd \u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u89e3\u96c6\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1anums = [1,2,3] >\u8f93\u51fa\uff1a[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] \u601d\u8def \u662f\u5982\u4f55\u907f\u514d\u51fa\u73b0 [3,2]\u7684\u60c5\u51b5\u7684? \u89e3\u7b54: class Solution { public: void helper(vector<vector<int>>& res, vector<int>& combination, const vector<int>& nums, int index) { res.push_back(combination); for(int i = index, n = nums.size(); i < n; ++i) { combination.push_back(nums[i]); helper(res, combination, nums, i + 1); // i + 1 \u548c i \u7684\u521d\u503c\u8bbe\u7f6e\u4e3a index \u907f\u514d\u51fa\u73b0\u91cd\u590d\u7ec4\u5408 combination.pop_back(); } } vector<vector<int>> subsets(vector<int>& nums) { vector<vector<int>> res; vector<int> combination; helper(res, combination, nums, 0); return res; } }; \u603b\u7ed3","title":78},{"location":"78.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 \u4e92\u4e0d\u76f8\u540c \u3002\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u89e3\u96c6 \u4e0d\u80fd \u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u89e3\u96c6\u3002","title":"\u9898\u76ee:"},{"location":"78.html#_2","text":">\u8f93\u5165\uff1anums = [1,2,3] >\u8f93\u51fa\uff1a[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]","title":"\u793a\u4f8b:"},{"location":"78.html#_3","text":"\u662f\u5982\u4f55\u907f\u514d\u51fa\u73b0 [3,2]\u7684\u60c5\u51b5\u7684?","title":"\u601d\u8def"},{"location":"78.html#_4","text":"class Solution { public: void helper(vector<vector<int>>& res, vector<int>& combination, const vector<int>& nums, int index) { res.push_back(combination); for(int i = index, n = nums.size(); i < n; ++i) { combination.push_back(nums[i]); helper(res, combination, nums, i + 1); // i + 1 \u548c i \u7684\u521d\u503c\u8bbe\u7f6e\u4e3a index \u907f\u514d\u51fa\u73b0\u91cd\u590d\u7ec4\u5408 combination.pop_back(); } } vector<vector<int>> subsets(vector<int>& nums) { vector<vector<int>> res; vector<int> combination; helper(res, combination, nums, 0); return res; } };","title":"\u89e3\u7b54:"},{"location":"78.html#_5","text":"","title":"\u603b\u7ed3"},{"location":"79.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a m x n \u4e8c\u7ef4\u5b57\u7b26\u7f51\u683c board \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5355\u8bcd word \u3002\u5982\u679c word \u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1aboard = [ [\"A\",\"B\",\"C\",\"E\"], [\"S\",\"F\",\"C\",\"S\"], [\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\" >\u8f93\u51fa\uff1atrue \u601d\u8def \u56de\u6eaf\u7b97\u6cd5,\u7528 f \u6570\u7ec4\u907f\u514d\u91cd\u590d\u8bbf\u95ee \u89e3\u7b54: class Solution { public: bool helper(const vector<vector<char>>& board, vector<vector<bool>>& f, const string& word, array<array<int, 2>, 4>& d, int index, int x, int y) { //\u56de\u6eaf\u7b97\u6cd5 if( x == -1 || y == -1 || x == board.size() || y == board[0].size()) return false; if(f[x][y] || board[x][y] != word[index]) return false; if( index == word.size() - 1) return true; for( int i = 0; i < 4 ; ++i) { f[x][y] = true; int dx = d[i][0]; int dy = d[i][1]; if(helper(board, f, word, d, index + 1, x + dx, y + dy)) return true; f[x][y] = false; } return false; } bool exist(vector<vector<char>>& board, string word) { int m = board.size(); int n = board[0].size(); array<array<int, 2>, 4> d ={ -1, 0 , 1, 0 , 0, -1, 0, 1 }; for(int i = 0; i < m;++i) { //\u5728\u6240\u6709\u7684\u4f4d\u7f6e\u4e3a\u5f00\u59cb\u8fdb\u884c\u5c1d\u8bd5 vector<vector<bool>> f(m, vector<bool>(n, false)); //\u5f53\u524d\u5143\u7d20\u662f\u5426\u88ab\u904d\u5386 for(int j = 0; j < n; ++j) { bool flag = helper(board, f, word, d, 0, i , j ); if( flag ) return true; } } return false; } };","title":79},{"location":"79.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a m x n \u4e8c\u7ef4\u5b57\u7b26\u7f51\u683c board \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5355\u8bcd word \u3002\u5982\u679c word \u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002","title":"\u9898\u76ee:"},{"location":"79.html#_2","text":">\u8f93\u5165\uff1aboard = [ [\"A\",\"B\",\"C\",\"E\"], [\"S\",\"F\",\"C\",\"S\"], [\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\" >\u8f93\u51fa\uff1atrue","title":"\u793a\u4f8b:"},{"location":"79.html#_3","text":"\u56de\u6eaf\u7b97\u6cd5,\u7528 f \u6570\u7ec4\u907f\u514d\u91cd\u590d\u8bbf\u95ee","title":"\u601d\u8def"},{"location":"79.html#_4","text":"class Solution { public: bool helper(const vector<vector<char>>& board, vector<vector<bool>>& f, const string& word, array<array<int, 2>, 4>& d, int index, int x, int y) { //\u56de\u6eaf\u7b97\u6cd5 if( x == -1 || y == -1 || x == board.size() || y == board[0].size()) return false; if(f[x][y] || board[x][y] != word[index]) return false; if( index == word.size() - 1) return true; for( int i = 0; i < 4 ; ++i) { f[x][y] = true; int dx = d[i][0]; int dy = d[i][1]; if(helper(board, f, word, d, index + 1, x + dx, y + dy)) return true; f[x][y] = false; } return false; } bool exist(vector<vector<char>>& board, string word) { int m = board.size(); int n = board[0].size(); array<array<int, 2>, 4> d ={ -1, 0 , 1, 0 , 0, -1, 0, 1 }; for(int i = 0; i < m;++i) { //\u5728\u6240\u6709\u7684\u4f4d\u7f6e\u4e3a\u5f00\u59cb\u8fdb\u884c\u5c1d\u8bd5 vector<vector<bool>> f(m, vector<bool>(n, false)); //\u5f53\u524d\u5143\u7d20\u662f\u5426\u88ab\u904d\u5386 for(int j = 0; j < n; ++j) { bool flag = helper(board, f, word, d, 0, i , j ); if( flag ) return true; } } return false; } };","title":"\u89e3\u7b54:"},{"location":"82.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1a 1->2->3->3->4->4->5 >\u8f93\u51fa\uff1a 1->2->5 \u601d\u8def \u901a\u8fc7\u53cc\u6307\u9488L\uff0cR\u6307\u5411\u76f8\u540c\u7684\u533a\u95f4\u5b9e\u73b0\u5220\u9664 \u89e3\u7b54: class Solution { public: ListNode* deleteDuplicates(ListNode* head) { // \u5f02\u5e38\u5904\u7406 if( head == nullptr || head->next == nullptr ) return head; // \u63d2\u5165\u5047\u5934\u7ed3\u70b9 ListNode* fakehead = new ListNode(-1); fakehead ->next = head; ListNode* pre = fakehead; // \u5f00\u59cb\u533a\u95f4\u7684\u524d\u7f00\u8282\u70b9 ListNode* L, *R; do{ L = R = pre->next; // \u5bfb\u627e\u76f8\u540c\u533a\u95f4 while( R != nullptr && L->val == R->val) { R = R->next; } if( L->next == R ) // \u6ca1\u6709\u76f8\u540c\u7684\u5143\u7d20 pre = pre ->next; else { // \u91ca\u653e\u5185\u5b58 pre->next = R; } }while( R != nullptr); //\u4e3ahead\u8d4b\u65b0\u503c head = fakehead ->next; delete(fakehead); return head; } }; \u603b\u7ed3 \u5bf9\u4e8e\u94fe\u8868\u7684\u64cd\u4f5c\u8fd8\u4e0d\u719f\u6089\uff0c\u66f4\u591a\u7684\u65f6\u5019\u662f\u77e5\u9053\u601d\u60f3\uff0c\u5728\u5b9e\u73b0\u4e0a\u6709\u969c\u788d.","title":"\u9898\u76ee:"},{"location":"82.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002","title":"\u9898\u76ee:"},{"location":"82.html#_2","text":">\u8f93\u5165\uff1a 1->2->3->3->4->4->5 >\u8f93\u51fa\uff1a 1->2->5","title":"\u793a\u4f8b:"},{"location":"82.html#_3","text":"\u901a\u8fc7\u53cc\u6307\u9488L\uff0cR\u6307\u5411\u76f8\u540c\u7684\u533a\u95f4\u5b9e\u73b0\u5220\u9664","title":"\u601d\u8def"},{"location":"82.html#_4","text":"class Solution { public: ListNode* deleteDuplicates(ListNode* head) { // \u5f02\u5e38\u5904\u7406 if( head == nullptr || head->next == nullptr ) return head; // \u63d2\u5165\u5047\u5934\u7ed3\u70b9 ListNode* fakehead = new ListNode(-1); fakehead ->next = head; ListNode* pre = fakehead; // \u5f00\u59cb\u533a\u95f4\u7684\u524d\u7f00\u8282\u70b9 ListNode* L, *R; do{ L = R = pre->next; // \u5bfb\u627e\u76f8\u540c\u533a\u95f4 while( R != nullptr && L->val == R->val) { R = R->next; } if( L->next == R ) // \u6ca1\u6709\u76f8\u540c\u7684\u5143\u7d20 pre = pre ->next; else { // \u91ca\u653e\u5185\u5b58 pre->next = R; } }while( R != nullptr); //\u4e3ahead\u8d4b\u65b0\u503c head = fakehead ->next; delete(fakehead); return head; } };","title":"\u89e3\u7b54:"},{"location":"82.html#_5","text":"\u5bf9\u4e8e\u94fe\u8868\u7684\u64cd\u4f5c\u8fd8\u4e0d\u719f\u6089\uff0c\u66f4\u591a\u7684\u65f6\u5019\u662f\u77e5\u9053\u601d\u60f3\uff0c\u5728\u5b9e\u73b0\u4e0a\u6709\u969c\u788d.","title":"\u603b\u7ed3"},{"location":"853.html","text":"\u9898\u76ee: N \u8f86\u8f66\u6cbf\u7740\u4e00\u6761\u8f66\u9053\u9a76\u5411\u4f4d\u4e8e target \u82f1\u91cc\u4e4b\u5916\u7684\u5171\u540c\u76ee\u7684\u5730\u3002 \u6bcf\u8f86\u8f66 i \u4ee5\u6052\u5b9a\u7684\u901f\u5ea6 speed[i] \uff08\u82f1\u91cc/\u5c0f\u65f6\uff09\uff0c\u4ece\u521d\u59cb\u4f4d\u7f6e position[i] \uff08\u82f1\u91cc\uff09 \u6cbf\u8f66\u9053\u9a76\u5411\u76ee\u7684\u5730\u3002 \u4e00\u8f86\u8f66\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7\u524d\u9762\u7684\u53e6\u4e00\u8f86\u8f66\uff0c\u4f46\u5b83\u53ef\u4ee5\u8ffd\u4e0a\u53bb\uff0c\u5e76\u4e0e\u524d\u8f66\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u7d27\u63a5\u7740\u884c\u9a76\u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u4f1a\u5ffd\u7565\u8fd9\u4e24\u8f86\u8f66\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u88ab\u5047\u5b9a\u5904\u4e8e\u76f8\u540c\u7684\u4f4d\u7f6e\u3002 \u8f66\u961f \u662f\u4e00\u4e9b\u7531\u884c\u9a76\u5728\u76f8\u540c\u4f4d\u7f6e\u3001\u5177\u6709\u76f8\u540c\u901f\u5ea6\u7684\u8f66\u7ec4\u6210\u7684\u975e\u7a7a\u96c6\u5408\u3002\u6ce8\u610f\uff0c\u4e00\u8f86\u8f66\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8f66\u961f\u3002 \u5373\u4fbf\u4e00\u8f86\u8f66\u5728\u76ee\u7684\u5730\u624d\u8d76\u4e0a\u4e86\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u4ecd\u7136\u4f1a\u88ab\u89c6\u4f5c\u662f\u540c\u4e00\u4e2a\u8f66\u961f\u3002 \u4f1a\u6709\u591a\u5c11\u8f66\u961f\u5230\u8fbe\u76ee\u7684\u5730? \u793a\u4f8b: >\u8f93\u5165\uff1atarget = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3] >\u8f93\u51fa\uff1a3 >\u89e3\u91ca\uff1a \u4ece 10 \u548c 8 \u5f00\u59cb\u7684\u8f66\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u5728 12 \u5904\u76f8\u9047\u3002 \u4ece 0 \u5904\u5f00\u59cb\u7684\u8f66\u65e0\u6cd5\u8ffd\u4e0a\u5176\u5b83\u8f66\uff0c\u6240\u4ee5\u5b83\u81ea\u5df1\u5c31\u662f\u4e00\u4e2a\u8f66\u961f\u3002 \u4ece 5 \u548c 3 \u5f00\u59cb\u7684\u8f66\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u5728 6 \u5904\u76f8\u9047\u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u5230\u8fbe\u76ee\u7684\u5730\u4e4b\u524d\u6ca1\u6709\u5176\u5b83\u8f66\u4f1a\u9047\u5230\u8fd9\u4e9b\u8f66\u961f\uff0c\u6240\u4ee5\u7b54\u6848\u662f 3\u3002 \u601d\u8def \u8ba1\u7b97\u5f53\u524d\u8f66\u8f86\u662f\u5426\u80fd\u591f\u8ffd\u4e0a\u524d\u9762\u7684\u8f66\u961f, \u6211\u4eec\u9009\u62e9\u79bb target \u6700\u8fd1\u7684\u8f66\u8f86\u4f5c\u4e3a\"\u6807\u51c6\u8f66\u8f86\". (\u56e0\u4e3a\u5176\u4ed6\u8f66\u8f86\u8ffd\u4e0a\"\u6807\u51c6\u8f66\u8f86\"\u65f6,\u901f\u5ea6\u4f1a\u6539\u53d8.) \u89e3\u7b54: class Solution { public: int carFleet(int target, vector<int>& position, vector<int>& speed) { vector<pair<int, int>> new_vector; for(size_t i = 0; i < position.size(); ++i) { new_vector.push_back({position[i], speed[i]}); } //\u6309\u7167 position \u8fdb\u884c\u6392\u5e8f sort(new_vector.begin(), new_vector.end()); int n = new_vector.size(); int res = n ? 1:0; int m = n-1; // \"\u6807\u51c6\u8f66\u8f86\"\u7684\u4f4d\u7f6e for(int i = n -2; i >=0; --i) { double pos1 = (double)new_vector[i].first; double pos2 = (double)new_vector[m].first; int x = new_vector[i].second; int y = new_vector[m].second; double dis = pos1 + x * (pos2 - pos1) / (x - y); // std::cout << x<<y<<pos1<<pos2 << endl; // std::cout << cou <<endl; if( y < x && dis <= target){ //\u80fd\u8ffd\u4e0a continue; } else { // \u4e0d\u80fd\u8ffd\u4e0a.\"\u6807\u51c6\u8f66\u8f86\"\u53d1\u751f\u6539\u53d8 m = i; res ++; } } return res; } };","title":853},{"location":"853.html#_1","text":"N \u8f86\u8f66\u6cbf\u7740\u4e00\u6761\u8f66\u9053\u9a76\u5411\u4f4d\u4e8e target \u82f1\u91cc\u4e4b\u5916\u7684\u5171\u540c\u76ee\u7684\u5730\u3002 \u6bcf\u8f86\u8f66 i \u4ee5\u6052\u5b9a\u7684\u901f\u5ea6 speed[i] \uff08\u82f1\u91cc/\u5c0f\u65f6\uff09\uff0c\u4ece\u521d\u59cb\u4f4d\u7f6e position[i] \uff08\u82f1\u91cc\uff09 \u6cbf\u8f66\u9053\u9a76\u5411\u76ee\u7684\u5730\u3002 \u4e00\u8f86\u8f66\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7\u524d\u9762\u7684\u53e6\u4e00\u8f86\u8f66\uff0c\u4f46\u5b83\u53ef\u4ee5\u8ffd\u4e0a\u53bb\uff0c\u5e76\u4e0e\u524d\u8f66\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u7d27\u63a5\u7740\u884c\u9a76\u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u4f1a\u5ffd\u7565\u8fd9\u4e24\u8f86\u8f66\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u88ab\u5047\u5b9a\u5904\u4e8e\u76f8\u540c\u7684\u4f4d\u7f6e\u3002 \u8f66\u961f \u662f\u4e00\u4e9b\u7531\u884c\u9a76\u5728\u76f8\u540c\u4f4d\u7f6e\u3001\u5177\u6709\u76f8\u540c\u901f\u5ea6\u7684\u8f66\u7ec4\u6210\u7684\u975e\u7a7a\u96c6\u5408\u3002\u6ce8\u610f\uff0c\u4e00\u8f86\u8f66\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8f66\u961f\u3002 \u5373\u4fbf\u4e00\u8f86\u8f66\u5728\u76ee\u7684\u5730\u624d\u8d76\u4e0a\u4e86\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u4ecd\u7136\u4f1a\u88ab\u89c6\u4f5c\u662f\u540c\u4e00\u4e2a\u8f66\u961f\u3002 \u4f1a\u6709\u591a\u5c11\u8f66\u961f\u5230\u8fbe\u76ee\u7684\u5730?","title":"\u9898\u76ee:"},{"location":"853.html#_2","text":">\u8f93\u5165\uff1atarget = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3] >\u8f93\u51fa\uff1a3 >\u89e3\u91ca\uff1a \u4ece 10 \u548c 8 \u5f00\u59cb\u7684\u8f66\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u5728 12 \u5904\u76f8\u9047\u3002 \u4ece 0 \u5904\u5f00\u59cb\u7684\u8f66\u65e0\u6cd5\u8ffd\u4e0a\u5176\u5b83\u8f66\uff0c\u6240\u4ee5\u5b83\u81ea\u5df1\u5c31\u662f\u4e00\u4e2a\u8f66\u961f\u3002 \u4ece 5 \u548c 3 \u5f00\u59cb\u7684\u8f66\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u5728 6 \u5904\u76f8\u9047\u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u5230\u8fbe\u76ee\u7684\u5730\u4e4b\u524d\u6ca1\u6709\u5176\u5b83\u8f66\u4f1a\u9047\u5230\u8fd9\u4e9b\u8f66\u961f\uff0c\u6240\u4ee5\u7b54\u6848\u662f 3\u3002","title":"\u793a\u4f8b:"},{"location":"853.html#_3","text":"\u8ba1\u7b97\u5f53\u524d\u8f66\u8f86\u662f\u5426\u80fd\u591f\u8ffd\u4e0a\u524d\u9762\u7684\u8f66\u961f, \u6211\u4eec\u9009\u62e9\u79bb target \u6700\u8fd1\u7684\u8f66\u8f86\u4f5c\u4e3a\"\u6807\u51c6\u8f66\u8f86\". (\u56e0\u4e3a\u5176\u4ed6\u8f66\u8f86\u8ffd\u4e0a\"\u6807\u51c6\u8f66\u8f86\"\u65f6,\u901f\u5ea6\u4f1a\u6539\u53d8.)","title":"\u601d\u8def"},{"location":"853.html#_4","text":"class Solution { public: int carFleet(int target, vector<int>& position, vector<int>& speed) { vector<pair<int, int>> new_vector; for(size_t i = 0; i < position.size(); ++i) { new_vector.push_back({position[i], speed[i]}); } //\u6309\u7167 position \u8fdb\u884c\u6392\u5e8f sort(new_vector.begin(), new_vector.end()); int n = new_vector.size(); int res = n ? 1:0; int m = n-1; // \"\u6807\u51c6\u8f66\u8f86\"\u7684\u4f4d\u7f6e for(int i = n -2; i >=0; --i) { double pos1 = (double)new_vector[i].first; double pos2 = (double)new_vector[m].first; int x = new_vector[i].second; int y = new_vector[m].second; double dis = pos1 + x * (pos2 - pos1) / (x - y); // std::cout << x<<y<<pos1<<pos2 << endl; // std::cout << cou <<endl; if( y < x && dis <= target){ //\u80fd\u8ffd\u4e0a continue; } else { // \u4e0d\u80fd\u8ffd\u4e0a.\"\u6807\u51c6\u8f66\u8f86\"\u53d1\u751f\u6539\u53d8 m = i; res ++; } } return res; } };","title":"\u89e3\u7b54:"},{"location":"875.html","text":"\u9898\u76ee: \u73c2\u73c2\u559c\u6b22\u5403\u9999\u8549\u3002\u8fd9\u91cc\u6709 N \u5806\u9999\u8549\uff0c\u7b2c i \u5806\u4e2d\u6709 piles[i] \u6839\u9999\u8549\u3002\u8b66\u536b\u5df2\u7ecf\u79bb\u5f00\u4e86\uff0c\u5c06\u5728 H \u5c0f\u65f6\u540e\u56de\u6765\u3002 \u73c2\u73c2\u53ef\u4ee5\u51b3\u5b9a\u5979\u5403\u9999\u8549\u7684\u901f\u5ea6 K \uff08\u5355\u4f4d\uff1a\u6839/\u5c0f\u65f6\uff09\u3002\u6bcf\u4e2a\u5c0f\u65f6\uff0c\u5979\u5c06\u4f1a\u9009\u62e9\u4e00\u5806\u9999\u8549\uff0c\u4ece\u4e2d\u5403\u6389 K \u6839\u3002\u5982\u679c\u8fd9\u5806\u9999\u8549\u5c11\u4e8e K \u6839\uff0c\u5979\u5c06\u5403\u6389\u8fd9\u5806\u7684\u6240\u6709\u9999\u8549\uff0c\u7136\u540e\u8fd9\u4e00\u5c0f\u65f6\u5185\u4e0d\u4f1a\u518d\u5403\u66f4\u591a\u7684\u9999\u8549\u3002 \u73c2\u73c2\u559c\u6b22\u6162\u6162\u5403\uff0c\u4f46\u4ecd\u7136\u60f3\u5728\u8b66\u536b\u56de\u6765\u524d\u5403\u6389\u6240\u6709\u7684\u9999\u8549\u3002 \u8fd4\u56de\u5979\u53ef\u4ee5\u5728 H \u5c0f\u65f6\u5185\u5403\u6389\u6240\u6709\u9999\u8549\u7684\u6700\u5c0f\u901f\u5ea6 K\uff08K \u4e3a\u6574\u6570\uff09. \u793a\u4f8b1: >\u8f93\u5165piles = [3,6,7,11], H = 8 >\u8f93\u51fa\uff1a4 \u601d\u8def \u5982\u524d\u8a00\u4e2d\u6240\u8ff0\u5178\u578b\u7684\u4e8c\u5206\u67e5\u627e\u3002\u67e5\u627e\u7b26\u5408\u6761\u4ef6\u7684 K \u503c \u89e3\u7b54: class Solution { public: int minEatingSpeed(vector<int>& piles, int H) { int lo = 1; int hi = *max_element(piles.begin(), piles.end()); while (lo < hi) { int mi = (hi + lo) / 2; if (!possible(piles, H, mi)) lo = mi + 1; else hi = mi; } return lo; } // Can Koko eat all bananas in H hours with eating speed K? bool possible(vector<int>& piles, int H, int K) { int time = 0; for (int p: piles) time += (p - 1) / K + 1; return time <= H; } };","title":875},{"location":"875.html#_1","text":"\u73c2\u73c2\u559c\u6b22\u5403\u9999\u8549\u3002\u8fd9\u91cc\u6709 N \u5806\u9999\u8549\uff0c\u7b2c i \u5806\u4e2d\u6709 piles[i] \u6839\u9999\u8549\u3002\u8b66\u536b\u5df2\u7ecf\u79bb\u5f00\u4e86\uff0c\u5c06\u5728 H \u5c0f\u65f6\u540e\u56de\u6765\u3002 \u73c2\u73c2\u53ef\u4ee5\u51b3\u5b9a\u5979\u5403\u9999\u8549\u7684\u901f\u5ea6 K \uff08\u5355\u4f4d\uff1a\u6839/\u5c0f\u65f6\uff09\u3002\u6bcf\u4e2a\u5c0f\u65f6\uff0c\u5979\u5c06\u4f1a\u9009\u62e9\u4e00\u5806\u9999\u8549\uff0c\u4ece\u4e2d\u5403\u6389 K \u6839\u3002\u5982\u679c\u8fd9\u5806\u9999\u8549\u5c11\u4e8e K \u6839\uff0c\u5979\u5c06\u5403\u6389\u8fd9\u5806\u7684\u6240\u6709\u9999\u8549\uff0c\u7136\u540e\u8fd9\u4e00\u5c0f\u65f6\u5185\u4e0d\u4f1a\u518d\u5403\u66f4\u591a\u7684\u9999\u8549\u3002 \u73c2\u73c2\u559c\u6b22\u6162\u6162\u5403\uff0c\u4f46\u4ecd\u7136\u60f3\u5728\u8b66\u536b\u56de\u6765\u524d\u5403\u6389\u6240\u6709\u7684\u9999\u8549\u3002 \u8fd4\u56de\u5979\u53ef\u4ee5\u5728 H \u5c0f\u65f6\u5185\u5403\u6389\u6240\u6709\u9999\u8549\u7684\u6700\u5c0f\u901f\u5ea6 K\uff08K \u4e3a\u6574\u6570\uff09.","title":"\u9898\u76ee:"},{"location":"875.html#1","text":">\u8f93\u5165piles = [3,6,7,11], H = 8 >\u8f93\u51fa\uff1a4","title":"\u793a\u4f8b1:"},{"location":"875.html#_2","text":"\u5982\u524d\u8a00\u4e2d\u6240\u8ff0\u5178\u578b\u7684\u4e8c\u5206\u67e5\u627e\u3002\u67e5\u627e\u7b26\u5408\u6761\u4ef6\u7684 K \u503c","title":"\u601d\u8def"},{"location":"875.html#_3","text":"class Solution { public: int minEatingSpeed(vector<int>& piles, int H) { int lo = 1; int hi = *max_element(piles.begin(), piles.end()); while (lo < hi) { int mi = (hi + lo) / 2; if (!possible(piles, H, mi)) lo = mi + 1; else hi = mi; } return lo; } // Can Koko eat all bananas in H hours with eating speed K? bool possible(vector<int>& piles, int H, int K) { int time = 0; for (int p: piles) time += (p - 1) / K + 1; return time <= H; } };","title":"\u89e3\u7b54:"},{"location":"91.html","text":"\u9898\u76ee: \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u6620\u5c04\u8fdb\u884c\u4e86 \u7f16\u7801 \uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u8981 \u89e3\u7801 \u5df2\u7f16\u7801\u7684\u6d88\u606f\uff0c\u6240\u6709\u6570\u5b57\u5fc5\u987b\u57fa\u4e8e\u4e0a\u8ff0\u6620\u5c04\u7684\u65b9\u6cd5\uff0c\u53cd\u5411\u6620\u5c04\u56de\u5b57\u6bcd\uff08\u53ef\u80fd\u6709\u591a\u79cd\u65b9\u6cd5\uff09\u3002\u4f8b\u5982\uff0c\"11106\" \u53ef\u4ee5\u6620\u5c04\u4e3a\uff1a \"AAJF\" \uff0c\u5c06\u6d88\u606f\u5206\u7ec4\u4e3a (1 1 10 6) \"KJF\" \uff0c\u5c06\u6d88\u606f\u5206\u7ec4\u4e3a (11 10 6) \u6ce8\u610f\uff0c\u6d88\u606f\u4e0d\u80fd\u5206\u7ec4\u4e3a (1 11 06) \uff0c\u56e0\u4e3a \"06\" \u4e0d\u80fd\u6620\u5c04\u4e3a \"F\" \uff0c\u8fd9\u662f\u7531\u4e8e \"6\" \u548c \"06\" \u5728\u6620\u5c04\u4e2d\u5e76\u4e0d\u7b49\u4ef7\u3002 \u7ed9\u4f60\u4e00\u4e2a\u53ea\u542b\u6570\u5b57\u7684 \u975e\u7a7a \u5b57\u7b26\u4e32 s \uff0c\u8bf7\u8ba1\u7b97\u5e76\u8fd4\u56de \u89e3\u7801 \u65b9\u6cd5\u7684 \u603b\u6570 \u3002 \u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u80af\u5b9a\u662f\u4e00\u4e2a 32 \u4f4d \u7684\u6574\u6570\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1as = \"26\" >\u8f93\u51fa\uff1a2 >\u8f93\u5165\uff1as = \"12\" >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09 \u601d\u8def \u52a8\u6001\u89c4\u5212, s[i]\u53ef\u80fd\u6709\u4e24\u79cd\u60c5\u51b5 1. f[i] \u4e0d\u80fd\u8fdb\u884c\u7ec4\u5408\u53ea\u80fd\u9690\u5c04\u5230\u4e00\u4e2a\u56fa\u5b9a\u7684 \u5b57\u7b26 ,\u90a3\u4e48f[i] = f[i-1] 2. f[i] \u80fd\u591f\u8fdb\u884c\u7ec4\u5408,\u90a3\u4e48f[i] = f[i-2] + \u60c5\u51b5\u4e00 \u89e3\u7b54: class Solution { public: int numDecodings(string s) { int n = s.size(); vector<int> dp( n + 1); dp[0] = 1; for(int i = 1;i <= n; ++i) { if(s[i-1] != '0') dp[i] = dp[i - 1]; if( i> 1 && s[i-2] != '0' && (s[i-2] - '0')* 10 + s[i-1] - '0' <= 26) dp[i] += dp[i-2]; } return dp[n]; } };","title":91},{"location":"91.html#_1","text":"\u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u6620\u5c04\u8fdb\u884c\u4e86 \u7f16\u7801 \uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u8981 \u89e3\u7801 \u5df2\u7f16\u7801\u7684\u6d88\u606f\uff0c\u6240\u6709\u6570\u5b57\u5fc5\u987b\u57fa\u4e8e\u4e0a\u8ff0\u6620\u5c04\u7684\u65b9\u6cd5\uff0c\u53cd\u5411\u6620\u5c04\u56de\u5b57\u6bcd\uff08\u53ef\u80fd\u6709\u591a\u79cd\u65b9\u6cd5\uff09\u3002\u4f8b\u5982\uff0c\"11106\" \u53ef\u4ee5\u6620\u5c04\u4e3a\uff1a \"AAJF\" \uff0c\u5c06\u6d88\u606f\u5206\u7ec4\u4e3a (1 1 10 6) \"KJF\" \uff0c\u5c06\u6d88\u606f\u5206\u7ec4\u4e3a (11 10 6) \u6ce8\u610f\uff0c\u6d88\u606f\u4e0d\u80fd\u5206\u7ec4\u4e3a (1 11 06) \uff0c\u56e0\u4e3a \"06\" \u4e0d\u80fd\u6620\u5c04\u4e3a \"F\" \uff0c\u8fd9\u662f\u7531\u4e8e \"6\" \u548c \"06\" \u5728\u6620\u5c04\u4e2d\u5e76\u4e0d\u7b49\u4ef7\u3002 \u7ed9\u4f60\u4e00\u4e2a\u53ea\u542b\u6570\u5b57\u7684 \u975e\u7a7a \u5b57\u7b26\u4e32 s \uff0c\u8bf7\u8ba1\u7b97\u5e76\u8fd4\u56de \u89e3\u7801 \u65b9\u6cd5\u7684 \u603b\u6570 \u3002 \u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u80af\u5b9a\u662f\u4e00\u4e2a 32 \u4f4d \u7684\u6574\u6570\u3002","title":"\u9898\u76ee:"},{"location":"91.html#_2","text":">\u8f93\u5165\uff1as = \"26\" >\u8f93\u51fa\uff1a2 >\u8f93\u5165\uff1as = \"12\" >\u8f93\u51fa\uff1a2 >\u89e3\u91ca\uff1a\u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09","title":"\u793a\u4f8b:"},{"location":"91.html#_3","text":"\u52a8\u6001\u89c4\u5212, s[i]\u53ef\u80fd\u6709\u4e24\u79cd\u60c5\u51b5 1. f[i] \u4e0d\u80fd\u8fdb\u884c\u7ec4\u5408\u53ea\u80fd\u9690\u5c04\u5230\u4e00\u4e2a\u56fa\u5b9a\u7684 \u5b57\u7b26 ,\u90a3\u4e48f[i] = f[i-1] 2. f[i] \u80fd\u591f\u8fdb\u884c\u7ec4\u5408,\u90a3\u4e48f[i] = f[i-2] + \u60c5\u51b5\u4e00","title":"\u601d\u8def"},{"location":"91.html#_4","text":"class Solution { public: int numDecodings(string s) { int n = s.size(); vector<int> dp( n + 1); dp[0] = 1; for(int i = 1;i <= n; ++i) { if(s[i-1] != '0') dp[i] = dp[i - 1]; if( i> 1 && s[i-2] != '0' && (s[i-2] - '0')* 10 + s[i-1] - '0' <= 26) dp[i] += dp[i-2]; } return dp[n]; } };","title":"\u89e3\u7b54:"},{"location":"973.html","text":"\u9898\u76ee: \u6211\u4eec\u6709\u4e00\u4e2a\u7531\u5e73\u9762\u4e0a\u7684\u70b9\u7ec4\u6210\u7684\u5217\u8868 points\u3002\u9700\u8981\u4ece\u4e2d\u627e\u51fa K \u4e2a\u8ddd\u79bb\u539f\u70b9 (0, 0) \u6700\u8fd1\u7684\u70b9\u3002 \uff08\u8fd9\u91cc\uff0c\u5e73\u9762\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u3002\uff09 \u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002\u9664\u4e86\u70b9\u5750\u6807\u7684\u987a\u5e8f\u4e4b\u5916\uff0c\u7b54\u6848\u786e\u4fdd\u662f\u552f\u4e00\u7684\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1apoints = [[1,3],[-2,2]], K = 1 >\u8f93\u51fa\uff1a[[-2,2]] >\u89e3\u91ca\uff1a (1, 3) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(10)\uff0c (-2, 2) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(8)\uff0c \u7531\u4e8e sqrt(8) < sqrt(10)\uff0c(-2, 2) \u79bb\u539f\u70b9\u66f4\u8fd1\u3002 \u6211\u4eec\u53ea\u9700\u8981\u8ddd\u79bb\u539f\u70b9\u6700\u8fd1\u7684 K = 1 \u4e2a\u70b9\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f [[-2,2]]\u3002 \u601d\u8def \u89e3\u7b54: class Solution { public: vector<vector<int>> kClosest(vector<vector<int>>& points, int K) { //\u5c1d\u8bd5\u4e86vector\u4e2d\u4f7f\u7528\u8fed\u4ee3\u5668 vector<pair<int, std::vector<vector<int>>::iterator>> res; for(std::vector<vector<int>>::iterator p = points.begin(); p!=points.end(); ++p) { res.push_back({pow((int)p[0][0],2) + (int)pow(p[0][1],2), p}); } nth_element(res.begin(), res.begin() +K,res.end()); vector<vector<int>> rt; for(size_t i =0; i <K; ++i) { rt.push_back({res[i].second[0][0], res[i].second[0][1]}); } for(std::vector<vector<int>>::iterator p = rt.begin(); p!=rt.end(); ++p) { printf(\"%d %d\\n\",p[0][0], p[0][1]); } return rt; } }; \u603b\u7ed3 - \u6ce8\u610fpair\u7c7b\u7684\u4f7f\u7528 - nth_element \u7684\u4f7f\u7528\u65b9\u5f0f","title":973},{"location":"973.html#_1","text":"\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u5e73\u9762\u4e0a\u7684\u70b9\u7ec4\u6210\u7684\u5217\u8868 points\u3002\u9700\u8981\u4ece\u4e2d\u627e\u51fa K \u4e2a\u8ddd\u79bb\u539f\u70b9 (0, 0) \u6700\u8fd1\u7684\u70b9\u3002 \uff08\u8fd9\u91cc\uff0c\u5e73\u9762\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u3002\uff09 \u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002\u9664\u4e86\u70b9\u5750\u6807\u7684\u987a\u5e8f\u4e4b\u5916\uff0c\u7b54\u6848\u786e\u4fdd\u662f\u552f\u4e00\u7684\u3002","title":"\u9898\u76ee:"},{"location":"973.html#_2","text":">\u8f93\u5165\uff1apoints = [[1,3],[-2,2]], K = 1 >\u8f93\u51fa\uff1a[[-2,2]] >\u89e3\u91ca\uff1a (1, 3) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(10)\uff0c (-2, 2) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(8)\uff0c \u7531\u4e8e sqrt(8) < sqrt(10)\uff0c(-2, 2) \u79bb\u539f\u70b9\u66f4\u8fd1\u3002 \u6211\u4eec\u53ea\u9700\u8981\u8ddd\u79bb\u539f\u70b9\u6700\u8fd1\u7684 K = 1 \u4e2a\u70b9\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f [[-2,2]]\u3002","title":"\u793a\u4f8b:"},{"location":"973.html#_3","text":"","title":"\u601d\u8def"},{"location":"973.html#_4","text":"class Solution { public: vector<vector<int>> kClosest(vector<vector<int>>& points, int K) { //\u5c1d\u8bd5\u4e86vector\u4e2d\u4f7f\u7528\u8fed\u4ee3\u5668 vector<pair<int, std::vector<vector<int>>::iterator>> res; for(std::vector<vector<int>>::iterator p = points.begin(); p!=points.end(); ++p) { res.push_back({pow((int)p[0][0],2) + (int)pow(p[0][1],2), p}); } nth_element(res.begin(), res.begin() +K,res.end()); vector<vector<int>> rt; for(size_t i =0; i <K; ++i) { rt.push_back({res[i].second[0][0], res[i].second[0][1]}); } for(std::vector<vector<int>>::iterator p = rt.begin(); p!=rt.end(); ++p) { printf(\"%d %d\\n\",p[0][0], p[0][1]); } return rt; } };","title":"\u89e3\u7b54:"},{"location":"973.html#_5","text":"- \u6ce8\u610fpair\u7c7b\u7684\u4f7f\u7528 - nth_element \u7684\u4f7f\u7528\u65b9\u5f0f","title":"\u603b\u7ed3"},{"location":"984.html","text":"\u9898\u76ee: \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 A \u548c B\uff0c\u8fd4\u56de\u4efb\u610f\u5b57\u7b26\u4e32 S\uff0c\u8981\u6c42\u6ee1\u8db3\uff1a S \u7684\u957f\u5ea6\u4e3a A + B\uff0c\u4e14\u6b63\u597d\u5305\u542b A \u4e2a 'a' \u5b57\u6bcd\u4e0e B \u4e2a 'b' \u5b57\u6bcd\uff1b \u5b50\u4e32 'aaa' \u6ca1\u6709\u51fa\u73b0\u5728 S \u4e2d\uff1b \u5b50\u4e32 'bbb' \u6ca1\u6709\u51fa\u73b0\u5728 S \u4e2d\u3002 \u793a\u4f8b: >\u8f93\u5165\uff1aA = 4, B = 1 >\u8f93\u51fa\uff1a\"aabaa\" \u601d\u8def \u8d2a\u5fc3\u7b97\u6cd5\uff0c\u5c3d\u53ef\u80fd\u7684\u586b\u5165\u5f53\u524d\u7684\u5143\u7d20 \u89e3\u7b54: class Solution { public: string strWithout3a3b(int A, int B) { string s; int counta = 0, countb = 0; int len = A + B; for(int i = 0; i < len; ++i) { //\u586b\u5165 a\u7684\u60c5\u51b5 if (A > B && counta < 2 || (A <= B && countb == 2)){ s.push_back('a'); A --; counta ++; countb = 0; } else { s.push_back('b'); B--; counta = 0; countb++; } } return s; } };","title":"\u9898\u76ee:"},{"location":"984.html#_1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 A \u548c B\uff0c\u8fd4\u56de\u4efb\u610f\u5b57\u7b26\u4e32 S\uff0c\u8981\u6c42\u6ee1\u8db3\uff1a S \u7684\u957f\u5ea6\u4e3a A + B\uff0c\u4e14\u6b63\u597d\u5305\u542b A \u4e2a 'a' \u5b57\u6bcd\u4e0e B \u4e2a 'b' \u5b57\u6bcd\uff1b \u5b50\u4e32 'aaa' \u6ca1\u6709\u51fa\u73b0\u5728 S \u4e2d\uff1b \u5b50\u4e32 'bbb' \u6ca1\u6709\u51fa\u73b0\u5728 S \u4e2d\u3002","title":"\u9898\u76ee:"},{"location":"984.html#_2","text":">\u8f93\u5165\uff1aA = 4, B = 1 >\u8f93\u51fa\uff1a\"aabaa\"","title":"\u793a\u4f8b:"},{"location":"984.html#_3","text":"\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u5c3d\u53ef\u80fd\u7684\u586b\u5165\u5f53\u524d\u7684\u5143\u7d20","title":"\u601d\u8def"},{"location":"984.html#_4","text":"class Solution { public: string strWithout3a3b(int A, int B) { string s; int counta = 0, countb = 0; int len = A + B; for(int i = 0; i < len; ++i) { //\u586b\u5165 a\u7684\u60c5\u51b5 if (A > B && counta < 2 || (A <= B && countb == 2)){ s.push_back('a'); A --; counta ++; countb = 0; } else { s.push_back('b'); B--; counta = 0; countb++; } } return s; } };","title":"\u89e3\u7b54:"},{"location":"backtracking.html","text":"\u56de\u6eaf\u7b97\u6cd5 \u7ecf\u5e38\u9898\u89e3 - 22.md \u516b\u7687\u540e\u95ee\u9898 class Queen{ public: int x, y; //\u7687\u540e\u5728\u68cb\u76d8\u4e0a\u7684\u4f4d\u7f6e\u5750\u6807 bool operator==(const Queen& q ) { return (x == q.x) //\u884c\u51b2\u7a81 || (y == q.y) //\u5217\u51b2\u7a81 || (x + y == q.x + q.y) // \u6b63\u5bf9\u89d2\u7ebf\u51b2\u7a81 || (x - y == q.x - q.y); // \u53cd\u5bf9\u89d2\u7ebf\u51b2\u7a81 } bool operator!=(const Queen& q) {return !(*this == q;)} }; void placeQueens(int N) { //\u68cb\u76d8\u5927\u5c0f == \u7687\u540e\u603b\u6570 Stack<Queen> solu; //\u5b58\u653e\u89e3\u7684\u6808 Queen q(0,0); //\u8d77\u70b9 do { //\u4e0d\u65ad\u8fdb\u884c\u8bd5\u63a2 if( N <= solu.size() || N <= q.y) { q = solu.pop(); q.y ++; // \u56de\u6eaf\u4e00\u884c,\u5e76\u7ee7\u7eed\u8bd5\u63a2\u4e0b\u4e00\u5217 } else { //\u5426\u5219,\u8bd5\u63a2\u4e0b\u4e00\u884c while((q.y < N ) && (0 <= solu.find(q))) { q.y++; nCheck++; } if(N > q.y) { solu.push(q); if(N <= solu.size()) nSolu++; q.x++; q.y= 0; } } }while( (0<qx) || (q.y < N)); }","title":"introduction"},{"location":"backtracking.html#_1","text":"","title":"\u56de\u6eaf\u7b97\u6cd5"},{"location":"backtracking.html#_2","text":"- 22.md","title":"\u7ecf\u5e38\u9898\u89e3"},{"location":"backtracking.html#_3","text":"class Queen{ public: int x, y; //\u7687\u540e\u5728\u68cb\u76d8\u4e0a\u7684\u4f4d\u7f6e\u5750\u6807 bool operator==(const Queen& q ) { return (x == q.x) //\u884c\u51b2\u7a81 || (y == q.y) //\u5217\u51b2\u7a81 || (x + y == q.x + q.y) // \u6b63\u5bf9\u89d2\u7ebf\u51b2\u7a81 || (x - y == q.x - q.y); // \u53cd\u5bf9\u89d2\u7ebf\u51b2\u7a81 } bool operator!=(const Queen& q) {return !(*this == q;)} }; void placeQueens(int N) { //\u68cb\u76d8\u5927\u5c0f == \u7687\u540e\u603b\u6570 Stack<Queen> solu; //\u5b58\u653e\u89e3\u7684\u6808 Queen q(0,0); //\u8d77\u70b9 do { //\u4e0d\u65ad\u8fdb\u884c\u8bd5\u63a2 if( N <= solu.size() || N <= q.y) { q = solu.pop(); q.y ++; // \u56de\u6eaf\u4e00\u884c,\u5e76\u7ee7\u7eed\u8bd5\u63a2\u4e0b\u4e00\u5217 } else { //\u5426\u5219,\u8bd5\u63a2\u4e0b\u4e00\u884c while((q.y < N ) && (0 <= solu.find(q))) { q.y++; nCheck++; } if(N > q.y) { solu.push(q); if(N <= solu.size()) nSolu++; q.x++; q.y= 0; } } }while( (0<qx) || (q.y < N)); }","title":"\u516b\u7687\u540e\u95ee\u9898"},{"location":"binarysearch.html","text":"\u4e8c\u5206\u67e5\u627e \u5bf9\u4e8e\u4e8c\u5206\u67e5\u627e\u800c\u8a00\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $lg_n$. \u5176\u91cd\u8981\u7279\u5f81\u5e38\u4f53\u73b0\u4e3a\uff1a\u201c\u6709\u5e8f\u201d\uff0c\u201c\u6709\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u201d. \u201c\u6709\u5e8f\u201d\uff1a \u9898\u76ee\u4e0d\u53ef\u80fd\u76f4\u63a5\u544a\u8bc9\u4f60\uff0c\u6709\u5e8f\u8fd9\u4e2a\u6761\u4ef6\uff0c\u5e38\u5e38\u662f\u9690\u85cf\u8d77\u6765\u7684\u3002 \u4f8b\u5982\u544a\u8bc9\u4f60\u201c\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u201d\u4e0d\u5c31\u76f8\u5f53\u4e8e\u544a\u8bc9\u4f60\u6709\u5e8f\u5417\uff1f(\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u6570\u90fd\u53ef\u80fd\u4e3a\u76ee\u6807\u503c) \u4e0e\u201c\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u201d\u8fd9\u4e2a\u6761\u4ef6\u4e00\u8d77\u4f7f\u7528\uff0c\u5e38\u53ef\u6839\u636e\u989d\u5916\u7684\u6761\u4ef6\u5224\u5b9a\u51fa\uff1a\u5927\u4e8e (\u6216\u5c0f\u4e8e)\u5f53\u524d\u5143\u7d20\u7684\u503c\u4e0d\u53ef\u80fd\u4e3a\u76ee\u6807\u503c\u3002\u2190 \u8fd9\u662f\u4e8c\u5206\u67e5\u627e\u7684\u6838\u5fc3\u601d\u60f3\u3002 \u53c2\u8003\u4ee3\u7801 template <typename T> Rank binSearch(T* A, Rank lo, Rank hi, T e) { while(lo < hi) { Rank mid =(lo + hi) >>1; if(e < A[mid]) hi = mid; else if(A[mid] < e) lo = mid +1; else return mid; } return -1; //\u6ca1\u627e\u5230 } \u89e3\u9898\u601d\u60f3 \u5251\u6307 Offer 53-I.\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20I \uff0c\u5206\u522b\u5229\u7528\u4e8c\u5206\u67e5\u627e\u627e\u5230\u533a\u95f4\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5b8c\u6210\u89e3\u9898","title":"introduction"},{"location":"binarysearch.html#_1","text":"\u5bf9\u4e8e\u4e8c\u5206\u67e5\u627e\u800c\u8a00\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $lg_n$. \u5176\u91cd\u8981\u7279\u5f81\u5e38\u4f53\u73b0\u4e3a\uff1a\u201c\u6709\u5e8f\u201d\uff0c\u201c\u6709\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u201d. \u201c\u6709\u5e8f\u201d\uff1a \u9898\u76ee\u4e0d\u53ef\u80fd\u76f4\u63a5\u544a\u8bc9\u4f60\uff0c\u6709\u5e8f\u8fd9\u4e2a\u6761\u4ef6\uff0c\u5e38\u5e38\u662f\u9690\u85cf\u8d77\u6765\u7684\u3002 \u4f8b\u5982\u544a\u8bc9\u4f60\u201c\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u201d\u4e0d\u5c31\u76f8\u5f53\u4e8e\u544a\u8bc9\u4f60\u6709\u5e8f\u5417\uff1f(\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u6570\u90fd\u53ef\u80fd\u4e3a\u76ee\u6807\u503c) \u4e0e\u201c\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u201d\u8fd9\u4e2a\u6761\u4ef6\u4e00\u8d77\u4f7f\u7528\uff0c\u5e38\u53ef\u6839\u636e\u989d\u5916\u7684\u6761\u4ef6\u5224\u5b9a\u51fa\uff1a\u5927\u4e8e (\u6216\u5c0f\u4e8e)\u5f53\u524d\u5143\u7d20\u7684\u503c\u4e0d\u53ef\u80fd\u4e3a\u76ee\u6807\u503c\u3002\u2190 \u8fd9\u662f\u4e8c\u5206\u67e5\u627e\u7684\u6838\u5fc3\u601d\u60f3\u3002","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"binarysearch.html#_2","text":"template <typename T> Rank binSearch(T* A, Rank lo, Rank hi, T e) { while(lo < hi) { Rank mid =(lo + hi) >>1; if(e < A[mid]) hi = mid; else if(A[mid] < e) lo = mid +1; else return mid; } return -1; //\u6ca1\u627e\u5230 }","title":"\u53c2\u8003\u4ee3\u7801"},{"location":"binarysearch.html#_3","text":"\u5251\u6307 Offer 53-I.\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20I \uff0c\u5206\u522b\u5229\u7528\u4e8c\u5206\u67e5\u627e\u627e\u5230\u533a\u95f4\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5b8c\u6210\u89e3\u9898","title":"\u89e3\u9898\u601d\u60f3"},{"location":"greedy.html","text":"\u901a\u5e38 - \u6ed1\u52a8\u7a97\u53e3 - \u5355\u8c03\u6808 - hash \u76f8\u7ed3\u5408","title":"introduction"},{"location":"hash.html","text":"hash hash\u8868\uff0c\u5176\u5b9e\u73b0\u7684\u601d\u8def\u4e3a\u9996\u5148\u904d\u5386\u7ed9\u5b9a\u7684\u5143\u7d20\uff0c\u518d\u5229\u7528hash\u8868\u50a8\u5b58\u7ed9\u5b9a\u5143\u7d20\u7684\u76f8\u5173\u4fe1\u606f. \u901a\u5e38\u4e3a 1.\u51fa\u73b0\u6b21\u6570 2.\u524d\u7f00\u7684\u76f8\u5173\u4fe1\u606f\u7b49","title":"introduction"},{"location":"hash.html#hash","text":"hash\u8868\uff0c\u5176\u5b9e\u73b0\u7684\u601d\u8def\u4e3a\u9996\u5148\u904d\u5386\u7ed9\u5b9a\u7684\u5143\u7d20\uff0c\u518d\u5229\u7528hash\u8868\u50a8\u5b58\u7ed9\u5b9a\u5143\u7d20\u7684\u76f8\u5173\u4fe1\u606f. \u901a\u5e38\u4e3a 1.\u51fa\u73b0\u6b21\u6570 2.\u524d\u7f00\u7684\u76f8\u5173\u4fe1\u606f\u7b49","title":"hash"},{"location":"sliding_Window.html","text":"\u6ed1\u52a8\u7a97\u53e3 ,\u901a\u5e38 \u4f1a\u6d89\u53ca\u95ee\u9898\u7684\u8f6c\u6362,\u4f8b\u5982\u5c06\u95ee\u9898 \u8f6c\u6362\u4e3a sum -x \u6216\u8005\u52a0\u5165\u5176\u4ed6\u9650\u5236\u6761\u4ef6 \u6216\u8005\u501f\u52a9\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u5b9e\u73b0","title":"slidingWindow"},{"location":"sort.html","text":"\u56fe\u6765\u6e90: https://mp.weixin.qq.com/s/vn3KiV-ez79FmbZ36SX9lg \u770b\u8fd9\u7bc7\u6587\u7ae0\u5c31\u53ef\u4ee5\u4e86\uff1a https://mp.weixin.qq.com/s/vn3KiV-ez79FmbZ36SX9lg \u5f52\u5e76\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u5206\u4e3a \u81ea\u9876\u5411\u4e0b \u548c \u81ea\u5e95\u5411\u4e0a \u4e24\u79cd \u5feb\u6392 void partion(vector<int>& nums, int left, int right) { int pivot = nums[left]; // \u9009\u62e9\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u8f74\u70b9 while(left < right) { //\u4ece\u4e24\u8fb9\u5411\u4e2d\u95f4\u8fdb\u884c\u626b\u63cf while(left <right && pivot <= nums[right]) { right --; } nums[ left ] = nums[ right ]; while(left <right && nums[let] <= pivot ) { left ++; } nums[right] = nums[left]; } nums[left] = pivot; return left; } void quickSort(vector<int>& nums, int left , int right) { if( right - left < 2 ) return; // \u5355\u5143\u7d20\u6709\u5e8f int mid = partion(nums, left, right -1); // \u5206\u5272,\u627e\u5230\u8f74\u70b9 quickSort(nums, lo, mid); quickSort(nums, mid + 1 , hi); return; }","title":"\u6392\u5e8f"},{"location":"sort.html#_1","text":"\u5f52\u5e76\u6392\u5e8f \u5206\u4e3a \u81ea\u9876\u5411\u4e0b \u548c \u81ea\u5e95\u5411\u4e0a \u4e24\u79cd","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"sort.html#_2","text":"void partion(vector<int>& nums, int left, int right) { int pivot = nums[left]; // \u9009\u62e9\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u8f74\u70b9 while(left < right) { //\u4ece\u4e24\u8fb9\u5411\u4e2d\u95f4\u8fdb\u884c\u626b\u63cf while(left <right && pivot <= nums[right]) { right --; } nums[ left ] = nums[ right ]; while(left <right && nums[let] <= pivot ) { left ++; } nums[right] = nums[left]; } nums[left] = pivot; return left; } void quickSort(vector<int>& nums, int left , int right) { if( right - left < 2 ) return; // \u5355\u5143\u7d20\u6709\u5e8f int mid = partion(nums, left, right -1); // \u5206\u5272,\u627e\u5230\u8f74\u70b9 quickSort(nums, lo, mid); quickSort(nums, mid + 1 , hi); return; }","title":"\u5feb\u6392"},{"location":"string.html","text":"\u5b57\u7b26\u4e32\u7684\u5339\u914d \u66b4\u529b\u5339\u914d \u590d\u6742\u5ea6\u4e3aO(n * m ) int patternMatch(char* P, char* T) { //\u904d\u5386\u6307\u9488 unsigned int i = 0; unsigned int j = 0; return i - j; while( j < strlen(P) && i < strlen(T)) { if(T[i] == P[j]) { i++; j ++; } else { i -= j - 1; //\u56de\u9000 j = 0; } } // while } KMP \u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) int* buildnext(char* P) { int* N = new int[strlen(P)]; //next \u8868 unsigned int m = strlen(P), j = 0;//\u4e3b\u4e32\u6307\u9488 int t = N[0] = -1; //\u6a21\u5f0f\u4e32\u6307\u9488 while(j < m - 1) { if(t < 0 || P[j] == P[t]){ ++t; ++j; N[j] = (P[j] != P[t] ? t : N[t]); } else { t = N[t]; } } return N; } int PatternMatch(char* P, char* T) { int* next = buildnext(P); //\u6784\u5efa next \u6570\u7ec4 int n = strlen(P), i = 0; int m = strlen(T), j = 0; while(i < n && j < m) { if( j < 0 || T[i] == P[j]){ ++j; ++i; } else { j = next[j]; } }//while return i - j; }","title":"introduction"},{"location":"string.html#_1","text":"","title":"\u5b57\u7b26\u4e32\u7684\u5339\u914d"},{"location":"string.html#on-m","text":"int patternMatch(char* P, char* T) { //\u904d\u5386\u6307\u9488 unsigned int i = 0; unsigned int j = 0; return i - j; while( j < strlen(P) && i < strlen(T)) { if(T[i] == P[j]) { i++; j ++; } else { i -= j - 1; //\u56de\u9000 j = 0; } } // while }","title":"\u66b4\u529b\u5339\u914d \u590d\u6742\u5ea6\u4e3aO(n * m )"},{"location":"string.html#kmp-on","text":"int* buildnext(char* P) { int* N = new int[strlen(P)]; //next \u8868 unsigned int m = strlen(P), j = 0;//\u4e3b\u4e32\u6307\u9488 int t = N[0] = -1; //\u6a21\u5f0f\u4e32\u6307\u9488 while(j < m - 1) { if(t < 0 || P[j] == P[t]){ ++t; ++j; N[j] = (P[j] != P[t] ? t : N[t]); } else { t = N[t]; } } return N; } int PatternMatch(char* P, char* T) { int* next = buildnext(P); //\u6784\u5efa next \u6570\u7ec4 int n = strlen(P), i = 0; int m = strlen(T), j = 0; while(i < n && j < m) { if( j < 0 || T[i] == P[j]){ ++j; ++i; } else { j = next[j]; } }//while return i - j; }","title":"KMP \u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)"},{"location":"%E5%89%91%E6%8C%87%20Offer%2053%20-%20I.html","text":"\u9898\u76ee: \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u793a\u4f8b: >\u8f93\u5165: nums = [5,7,7,8,8,10], target = 8 >\u8f93\u51fa: 2 \u601d\u8def \u4e8c\u5206\u67e5\u627e \u89e3\u7b54: class Solution { private: // \u627e\u5230>=target\u7684\u5de6\u8fb9\u754c\uff0c\u5c31\u662f\u6ee1\u8db3 nums[i] >= target\u91cc\u7684i\u7684\u6700\u5c0f\u503c int BinaryLeft(vector<int>& nums, int target) { int lo = 0; int hi = nums.size() - 1; while (lo <= hi) { int mid = lo + ((hi - lo) >> 1); if (nums[mid] < target){ lo = mid + 1; } else { hi = mid - 1; } } return lo; } public: int search(vector<int>& nums, int target) { return BinaryLeft(nums, target+1) - BinaryLeft(nums, target); } }; \u6807\u51c6\u7b54\u6848 class Solution { public: int search(vector<int>& nums, int target) { return count(nums.begin(), nums.end(), target); } }; \u603b\u7ed3 \u5e93\u51fd\u6570\u5c31\u80fd\u5b9e\u73b0 \u8fd0\u7b97\u7b26 \u6bd4 '+'\u4f18\u5148\u7ea7\u4f4e","title":"\u5251\u6307 Offer 53 - I"},{"location":"%E5%89%91%E6%8C%87%20Offer%2053%20-%20I.html#_1","text":"\u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002","title":"\u9898\u76ee:"},{"location":"%E5%89%91%E6%8C%87%20Offer%2053%20-%20I.html#_2","text":">\u8f93\u5165: nums = [5,7,7,8,8,10], target = 8 >\u8f93\u51fa: 2","title":"\u793a\u4f8b:"},{"location":"%E5%89%91%E6%8C%87%20Offer%2053%20-%20I.html#_3","text":"\u4e8c\u5206\u67e5\u627e","title":"\u601d\u8def"},{"location":"%E5%89%91%E6%8C%87%20Offer%2053%20-%20I.html#_4","text":"class Solution { private: // \u627e\u5230>=target\u7684\u5de6\u8fb9\u754c\uff0c\u5c31\u662f\u6ee1\u8db3 nums[i] >= target\u91cc\u7684i\u7684\u6700\u5c0f\u503c int BinaryLeft(vector<int>& nums, int target) { int lo = 0; int hi = nums.size() - 1; while (lo <= hi) { int mid = lo + ((hi - lo) >> 1); if (nums[mid] < target){ lo = mid + 1; } else { hi = mid - 1; } } return lo; } public: int search(vector<int>& nums, int target) { return BinaryLeft(nums, target+1) - BinaryLeft(nums, target); } };","title":"\u89e3\u7b54:"},{"location":"%E5%89%91%E6%8C%87%20Offer%2053%20-%20I.html#_5","text":"class Solution { public: int search(vector<int>& nums, int target) { return count(nums.begin(), nums.end(), target); } };","title":"\u6807\u51c6\u7b54\u6848"},{"location":"%E5%89%91%E6%8C%87%20Offer%2053%20-%20I.html#_6","text":"\u5e93\u51fd\u6570\u5c31\u80fd\u5b9e\u73b0 \u8fd0\u7b97\u7b26 \u6bd4 '+'\u4f18\u5148\u7ea7\u4f4e","title":"\u603b\u7ed3"},{"location":"%E6%A8%A1%E6%9D%BF.html","text":"\u9898\u76ee: \u793a\u4f8b: \u601d\u8def \u89e3\u7b54: \u6807\u51c6\u7b54\u6848 \u603b\u7ed3","title":"\u9898\u76ee:"},{"location":"%E6%A8%A1%E6%9D%BF.html#_1","text":"","title":"\u9898\u76ee:"},{"location":"%E6%A8%A1%E6%9D%BF.html#_2","text":"","title":"\u793a\u4f8b:"},{"location":"%E6%A8%A1%E6%9D%BF.html#_3","text":"","title":"\u601d\u8def"},{"location":"%E6%A8%A1%E6%9D%BF.html#_4","text":"","title":"\u89e3\u7b54:"},{"location":"%E6%A8%A1%E6%9D%BF.html#_5","text":"","title":"\u6807\u51c6\u7b54\u6848"},{"location":"%E6%A8%A1%E6%9D%BF.html#_6","text":"","title":"\u603b\u7ed3"}]}